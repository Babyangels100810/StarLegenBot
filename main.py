# ========== MAIN.PY ‚Äî PART 1/8 (INIT + /start + MAIN MENU) ==========
import os, time, re, json, threading, traceback, requests, random
from datetime import datetime
from collections import defaultdict

from telebot import TeleBot, types, apihelper
from telebot.types import InputMediaPhoto
from dotenv import load_dotenv, find_dotenv

# ---------------- ENV & TOKEN ----------------
apihelper.API_URL = "https://api.telegram.org/bot{0}/{1}"

load_dotenv()
ENV_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or ""
print("dotenv path:", find_dotenv())
print("BOT_TOKEN len:", len(ENV_TOKEN))
if not ENV_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is empty. Put it in your .env")

# ---------------- DIRS ----------------
DATA_DIR = "data"
MEDIA_DIR = "media"
def ensure_dirs():
    os.makedirs(DATA_DIR, exist_ok=True)
    os.makedirs(MEDIA_DIR, exist_ok=True)
    os.makedirs(os.path.join(MEDIA_DIR, "products"), exist_ok=True)
    os.makedirs(os.path.join(MEDIA_DIR, "exchange"), exist_ok=True)
ensure_dirs()

# ---------------- BOT ----------------
bot = TeleBot(ENV_TOKEN, parse_mode="HTML")

# ---------------- RUNTIME STORAGE ----------------
CART = defaultdict(dict)      # {user_id: {code: qty}}
CHECKOUT_STATE = {}           # {user_id: {step, order}}
ORDERS = []                   # demo orders

# ---------------- VALIDATION ----------------
NAME_RE  = re.compile(r"^[A-Za-z\u0531-\u0556\u0561-\u0587–Å—ë–™—ä–´—ã–≠—ç–ô–π\s'\-\.]{3,60}$")
PHONE_RE = re.compile(r"^(\+374|0)\d{8}$")

def _order_id():
    return f"BA{int(time.time()) % 1000000}"

def _cart_total(uid: int) -> int:
    try:
        return sum(int(PRODUCTS[c]["price"]) * q for c, q in CART[uid].items())
    except Exception:
        return 0

def _check_stock(uid: int):
    for code, qty in CART[uid].items():
        st = PRODUCTS.get(code, {}).get("stock")
        if isinstance(st, int) and qty > st:
            return False, code, st
    return True, None, None

# ---------------- MENU LABELS (exactly as you asked) ----------------
BTN_SHOP      = "üõç ‘Ω’°’∂’∏÷Ç’©"
BTN_CART      = "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤"
BTN_EXCHANGE  = "üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä"
BTN_THOUGHTS  = "üí° ‘Ω’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä"
BTN_RATES     = "üìä ’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä"
BTN_PROFILE   = "üßç ‘ª’¥ ’ß’ª’®"
BTN_FEEDBACK  = "üí¨ ‘ø’°’∫ ’¥’•’¶ ’∞’•’ø"
BTN_PARTNERS  = "ü§ù ‘≤’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä"
BTN_SEARCH    = "üîç ‘±’∫÷Ä’°’∂÷Ñ’´ ’∏÷Ä’∏’∂’∏÷Ç’¥"
BTN_INVITE    = "üë• ’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´"
BTN_MAIN      = "üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"
BTN_BACK_MAIN = "‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"

def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_SHOP, BTN_CART)
    kb.add(BTN_EXCHANGE, BTN_THOUGHTS)
    kb.add(BTN_RATES, BTN_PROFILE)
    kb.add(BTN_FEEDBACK, BTN_PARTNERS)
    kb.add(BTN_SEARCH, BTN_INVITE)
    kb.add(BTN_MAIN)
    return kb

def show_main_menu(chat_id, text="‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®"):
    bot.send_message(chat_id, text, reply_markup=main_menu_kb())

# ---------------- WELCOME ----------------
def welcome_text(customer_no: int) -> str:
    return (
        "üê∞üå∏ <b>‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø StarLegen</b> üõç‚ú®\n\n"
        "üíñ ’á’∂’∏÷Ä’∞’°’Ø’°’¨ ’•’∂÷Ñ, ’∏÷Ä ’¥’´’°÷Å’•’¨ ’•÷Ñ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’¥’°’µ’∂÷Ñ’´’∂ ‚ù§Ô∏è\n"
        f"‘¥’∏÷Ç÷Ñ ’°’µ’™’¥ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’≥’°’≠’∏÷Ä’§’∂ ’•÷Ñ ‚Ññ{customer_no} ‚ú®\n\n"
        "’Ñ’•÷Ä ’≠’°’∂’∏÷Ç’©’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’£’ø’∂’•’¨ ’°’¥’•’∂ ÷Ö÷Ä ÷Ö’£’ø’°’Ø’°÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’´ ’£’•’≤’•÷Å’´’Ø ’¨’°÷Å’°’Ø’°’¶’¥ ’£’∂’•÷Ä’®÷â\n\n"
        "üéÅ <b>‘±’æ’•’¨’´ ’∑’°’ø’´’ù</b> ’°’º÷Å’°’∂÷Å ’£’∂’¥’°’∂ ’§’•’∫÷Ñ’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ÷Ö’£’ø’æ’•’¨ ’¥’´’∂’π÷á 10% ’¶’•’≤’π ’Ø’∏÷Ç’∫’∏’∂’∂’•÷Ä’´ ’∞’°’¥’°’Ø’°÷Ä’£’´÷Å÷â\n\n"
        "üì¶ ‘ª’û’∂’π ’Ø’£’ø’∂’•÷Ñ ’°’µ’Ω’ø’•’≤‚Ä§\n"
        "‚Ä¢ ‘∫’°’¥’°’∂’°’Ø’°’Ø’´÷Å ÷á ÷Ö’£’ø’°’Ø’°÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä ’°’¥’•’∂ ÷Ö÷Ä’æ’° ’∞’°’¥’°÷Ä\n"
        "‚Ä¢ ‘º’°’æ’°’£’∏÷Ç’µ’∂ ÷á ’ø’°÷Ä’¢’•÷Ä’°’Ø’æ’°’Æ Telegram ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä\n"
        "‚Ä¢ ’Ä’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ÷á ’°÷Ä’°’£ ’°’º’°÷Ñ’∏÷Ç’¥ üöö\n\n"
        "üìä <b>’ì’∏’≠’°÷Ä’™’•÷Ñ’´ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä</b>\n"
        "‚Ä¢ PI ‚ûî USDT (’∑’∏÷Ç’Ø’°’µ’°’Ø’°’∂ ’Ø’∏÷Ç÷Ä’Ω, +20% ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥)\n"
        "‚Ä¢ FTN ‚ûî AMD (’¥’´’°’µ’∂ 10% ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥)\n"
        "‚Ä¢ Alipay ’¨’´÷Å÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥ (1 CNY = 58÷è)\n\n"
        "‚ú® ‘±’æ’•’¨’´’∂ ’°÷Ä’§’•’∂ ’∫’°’ø÷Ä’°’Ω’ø’æ’°’Æ ’∏÷Ç ÷Ö’£’ø’æ’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’®’∂’ø÷Ä’•÷Ñ ’∂’•÷Ä÷Ñ÷á’´ ’¢’°’™’´’∂’∂’•÷Ä’® üëá"
    )

# ’∫’°’∞’•’∂÷Ñ ’∫’°÷Ä’¶’ù counter-’® ’∞’´’∑’æ’∏’≤ ÷Ü’°’µ’¨’∏’æ
COUNTER_FILE = os.path.join(DATA_DIR, "counter.json")
def _load_counter():
    if os.path.exists(COUNTER_FILE):
        try:
            return json.load(open(COUNTER_FILE,"r",encoding="utf-8")).get("customer_counter", 1007)
        except:
            return 1007
    return 1007

def _save_counter(v:int):
    try:
        json.dump({"customer_counter": v}, open(COUNTER_FILE,"w",encoding="utf-8"), ensure_ascii=False, indent=2)
    except:
        pass

customer_counter = _load_counter()

@bot.message_handler(commands=['start'])
def on_start(m: types.Message):
    if getattr(m.chat, "type", "") != "private":
        return

    global customer_counter
    customer_counter += 1
    _save_counter(customer_counter)

    # send bunny image if exists
    bunny_path = os.path.join(MEDIA_DIR, "bunny.jpg")
    if os.path.exists(bunny_path):
        try:
            with open(bunny_path, "rb") as ph:
                bot.send_photo(m.chat.id, ph)
        except:
            pass

    # welcome + menu
    bot.send_message(m.chat.id, welcome_text(customer_counter), reply_markup=main_menu_kb())

@bot.message_handler(commands=['menu'])
def on_menu(m: types.Message):
    show_main_menu(m.chat.id)

# ‘≥’¨’≠’°’æ’∏÷Ä’´’∂ ’∞’•’ø
@bot.message_handler(func=lambda m: m.text in (BTN_BACK_MAIN, BTN_MAIN))
def back_main_msg(m: types.Message):
    try:
        CHECKOUT_STATE.pop(m.from_user.id, None)
    except:
        pass
    show_main_menu(m.chat.id, "’é’•÷Ä’°’§’°÷Ä’±’°÷Ñ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç÷â ‚ú®")

# Stub handlers so buttons don't feel broken (’Ø’°’∑’≠’°’ø’•’∂ ’´’Ω’Ø’°’Ø’°’∂’∏’æ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’•÷Ä’∏÷Ç’¥)
@bot.message_handler(func=lambda m: m.text == BTN_EXCHANGE)
def stub_exchange(m: types.Message):
    bot.send_message(m.chat.id, "üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_THOUGHTS)
def stub_thoughts(m: types.Message):
    bot.send_message(m.chat.id, "üí° ‘Ω’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_RATES)
def stub_rates(m: types.Message):
    bot.send_message(m.chat.id, "üìä ’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_PROFILE)
def stub_profile(m: types.Message):
    bot.send_message(m.chat.id, "üßç ‘ª’¥ ’ß’ª’® ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_FEEDBACK)
def stub_feedback(m: types.Message):
    bot.send_message(m.chat.id, "üí¨ ‘ø’°’∫ ’¥’•’¶ ’∞’•’ø ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_PARTNERS)
def stub_partners(m: types.Message):
    bot.send_message(m.chat.id, "ü§ù ‘≤’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_SEARCH)
def stub_search(m: types.Message):
    bot.send_message(m.chat.id, "üîç ‘±’∫÷Ä’°’∂÷Ñ’´ ’∏÷Ä’∏’∂’∏÷Ç’¥ ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_INVITE)
def stub_invite(m: types.Message):
    bot.send_message(m.chat.id, "üë• ’Ä÷Ä’°’æ’•÷Ä’´ ’∞’≤’∏÷Ç’¥’® ÷á referral-’® ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")
# ========== MAIN.PY ‚Äî PART 2/8 (SHOP + 12 PRODUCTS) ==========
# ’Ü’Ø’°÷Ä’∂’•÷Ä’® ‡§Ö‡§™‡•á’∏÷Ç’¥ ’•’∂÷Ñ media/products/ ’¥’•’ª.
# ‘≥’∏÷Ä’£’•÷Ä’´ ’∞’´’¥’∂’°’Ø’°’∂ ’∂’Ø’°÷Ä’∂’•÷Ä’®’ù BA100810.jpg ... BA100820.jpg
# ‘±’µ’¨ ’®’∂’§’∞’°’∂’∏÷Ç÷Ä ’∂’Ø’°÷Ä’∂’•÷Ä (’•’©’• ’∏÷Ç’∂’•’Ω) ’Ø’°÷Ä’∏’≤ ’•’Ω ’§’∂’•’¨ media/products/shared/ care.jpg,layers.jpg,absorb.jpg,universal.jpg,interior.jpg,advantages.jpg
# ‘±’æ’ø’∏’¥’°÷Ñ÷Ä’´’π’´ ’∂’Ø’°÷Ä’®’ù media/products/car_cleaner.jpg (’Ø’°’¥ ÷Ñ’∏ ÷Ü’°’µ’¨’®)

def _p(*parts):
    import os
    return os.path.join(*parts)

PRODUCTS = {
    # 11 ‘≥’à’ê‘≥ ‚Äî BA100810..BA100820
    "BA100810": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì BA100810 (40√ó60’Ω’¥)",
        "price": 1690, "old_price": 2560, "stock": 25,
        "photos": [
            _p("media","products","BA100810.jpg"),
            _p("media","products","shared","care.jpg"),
            _p("media","products","shared","layers.jpg"),
            _p("media","products","shared","absorb.jpg"),
            _p("media","products","shared","interior.jpg"),
        ],
        "desc": "‚úîÔ∏è ’â’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ ‚Ä¢ ‚úîÔ∏è ‘±÷Ä’°’£ ’π’∏÷Ä’°’∂’∏÷Ç’¥ ’ß ‚Ä¢ ‚úîÔ∏è ’Ä’•’∑’ø ’¨’æ’°÷Å’æ’∏’≤"
    },
    "BA100811": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì BA100811 (40√ó60’Ω’¥)",
        "price": 1690, "old_price": 2560, "stock": 24,
        "photos": [
            _p("media","products","BA100811.jpg"),
            _p("media","products","shared","absorb.jpg"),
            _p("media","products","shared","advantages.jpg"),
        ],
        "desc": "‚úîÔ∏è ‘Ω’´’ø ’æ’•÷Ä’´’∂ ’∑’•÷Ä’ø ‚Ä¢ ‚úîÔ∏è ‘≥’∏÷Ç’µ’∂’® ’π’´ ’≠’°’¥÷Ä’∏÷Ç’¥ ‚Ä¢ ‚úîÔ∏è ‘ø’∏’Ø’´’Ø ’•’¶÷Ä’•÷Ä"
    },
    "BA100812": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì BA100812 (40√ó60’Ω’¥)",
        "price": 1690, "old_price": 2560, "stock": 22,
        "photos": [
            _p("media","products","BA100812.jpg"),
            _p("media","products","shared","layers.jpg"),
            _p("media","products","shared","universal.jpg"),
        ],
        "desc": "‚úîÔ∏è ’è’°’∂ ÷Å’°’∂’Ø’°÷Å’°’Æ ’∞’°’ø’æ’°’Æ’´ ’∞’°’¥’°÷Ä ‚Ä¢ ‚úîÔ∏è ‘¥’´’¥’°÷Å’Ø’∏÷Ç’∂"
    },
    "BA100813": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì BA100813 (40√ó60’Ω’¥)",
        "price": 1690, "old_price": 2560, "stock": 26,
        "photos": [
            _p("media","products","BA100813.jpg"),
            _p("media","products","shared","interior.jpg"),
            _p("media","products","shared","advantages.jpg"),
        ],
        "desc": "‚úîÔ∏è ’Ä’°÷Ä’¥’°÷Ä ’´’∂’ø’•’∂’Ω’´’æ ÷Ö’£’ø’°’£’∏÷Ä’Æ’¥’°’∂ ’∞’°’¥’°÷Ä ‚Ä¢ ‚úîÔ∏è ’â’´ ’Ω’°’∞’∏÷Ç’¥"
    },
    "BA100814": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì BA100814 (40√ó60’Ω’¥)",
        "price": 1690, "old_price": 2560, "stock": 20,
        "photos": [
            _p("media","products","BA100814.jpg"),
            _p("media","products","shared","care.jpg"),
            _p("media","products","shared","advantages.jpg"),
        ],
        "desc": "‚úîÔ∏è ’ì’°÷É’∏÷Ç’Ø, ’∞’°’≥’•’¨’´ ’∞’∫’∏÷Ç’¥ ‚Ä¢ ‚úîÔ∏è ‘ø’∏’Ø’´’Ø ’•’¶÷Ä’•÷Ä"
    },
    "BA100815": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì BA100815 (40√ó60’Ω’¥)",
        "price": 1690, "old_price": 2560, "stock": 25,
        "photos": [
            _p("media","products","BA100815.jpg"),
            _p("media","products","shared","absorb.jpg"),
            _p("media","products","shared","interior.jpg"),
        ],
        "desc": "‚úîÔ∏è ‘Ω’´’ø ’∑’•÷Ä’ø ‚Ä¢ ‚úîÔ∏è ’â’´ ’±÷á’°’≠’•’≤’æ’∏÷Ç’¥ ’¨’æ’°÷Å’∏÷Ç’¥’´÷Å ’∞’•’ø’∏"
    },
    "BA100816": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì BA100816 (40√ó60’Ω’¥)",
        "price": 1690, "old_price": 2560, "stock": 18,
        "photos": [
            _p("media","products","BA100816.jpg"),
            _p("media","products","shared","layers.jpg"),
            _p("media","products","shared","advantages.jpg"),
        ],
        "desc": "‚úîÔ∏è ‘∑’¨’•’£’°’∂’ø ’§’´’¶’°’µ’∂ ‚Ä¢ ‚úîÔ∏è ‘¥’´’¥’°÷Å’Ø’∏÷Ç’∂ ’∞’´’¥÷Ñ"
    },
    "BA100817": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì BA100817 (40√ó60’Ω’¥)",
        "price": 1690, "old_price": 2560, "stock": 23,
        "photos": [
            _p("media","products","BA100817.jpg"),
            _p("media","products","shared","universal.jpg"),
            _p("media","products","shared","care.jpg"),
        ],
        "desc": "‚úîÔ∏è ‘Ω’∏’∞’°’∂’∏÷Å/’¥’∏÷Ç’ø÷Ñ ‚Ä¢ ‚úîÔ∏è ‘±÷Ä’°’£ ’π’∏÷Ä’°÷Å’∏÷Ç’¥"
    },
    "BA100818": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì BA100818 (40√ó60’Ω’¥)",
        "price": 1690, "old_price": 2560, "stock": 21,
        "photos": [
            _p("media","products","BA100818.jpg"),
            _p("media","products","shared","advantages.jpg"),
        ],
        "desc": "‚úîÔ∏è ‘π’•’©÷á, ’Ø’∏’¥’∫’°’Ø’ø ‚Ä¢ ‚úîÔ∏è ’Ä’•’∑’ø ’ø’•’≤’°’§÷Ä’æ’∏’≤"
    },
    "BA100819": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì BA100819 (40√ó60’Ω’¥)",
        "price": 1690, "old_price": 2560, "stock": 19,
        "photos": [
            _p("media","products","BA100819.jpg"),
            _p("media","products","shared","interior.jpg"),
            _p("media","products","shared","absorb.jpg"),
        ],
        "desc": "‚úîÔ∏è ‘ø’∏’Ø’´’Ø ’∏÷Ç ’∞’°’¥’°’§÷Ä’æ’∏’≤ ‚Ä¢ ‚úîÔ∏è ’Ä’°’Ø’°’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ"
    },
    "BA100820": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì BA100820 (40√ó60’Ω’¥)",
        "price": 1690, "old_price": 2560, "stock": 20,
        "photos": [
            _p("media","products","BA100820.jpg"),
            _p("media","products","shared","universal.jpg"),
            _p("media","products","shared","advantages.jpg"),
        ],
        "desc": "‚úîÔ∏è ‘π’°÷Ä’¥ ’§’´’¶’°’µ’∂ ‚Ä¢ ‚úîÔ∏è ’Ä’•’∑’ø ’¥’°÷Ñ÷Ä’æ’∏’≤"
    },

    # 1 ‘±’é’è’à’Ñ‘µ’î‘µ’Ü‘±’Ö‘ª ’Ñ‘±’î’ê‘ª’â
    "AUTO001": {
        "title": "üöò ’Ö’∏÷Ç’≤’°’µ’´’∂ ÷Ü’´’¨’¥ ’¥’°÷Ñ÷Ä’´’π (’Ø’°÷Ä’¥’´÷Ä, ’Ω’∫’∏÷Ç’∂’£’∏’æ)",
        "price": 3580, "old_price": 6480, "stock": 25,
        "photos": [
            _p("media","products","car_cleaner.jpg"),  # ‚Üê ’§’´÷Ä ÷Ñ’∏ ÷Ü’°’µ’¨’´ ’°’∂’∏÷Ç’∂’®
            _p("media","products","promo_auto1.jpg"),  # ’•’©’• ’π’Ø’°’ù ’Ø’°’∂÷Å’∂’´ ’°’º’°’∂÷Å ’§÷Ä’°
        ],
        "desc": "‚úîÔ∏è ’Ä’•’º’°÷Å’∂’∏÷Ç’¥ ’ß ’µ’∏÷Ç’≤’°’µ’´’∂ ’Ø’•’≤’ø’® ’°’∫’°’Ø’∏÷Ç÷Å ‚Ä¢ ‚úîÔ∏è ‘≤’°÷Ä’±÷Ä ’©’°÷É’°’∂÷Å’´’Ø’∏÷Ç’©’µ’∏÷Ç’∂ ‚Ä¢ ‚úîÔ∏è ’Ä’•’∑’ø ’Ø’´÷Ä’°’º’∏÷Ç’©’µ’∏÷Ç’∂"
    },
}

# ========== INLINE KEYBOARDS ==========
def product_inline_kb(code: str):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data=f"cart:add:{code}"))
    kb.add(
        types.InlineKeyboardButton("üõí ‘¥’´’ø’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data="cart:show"),
        types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä", callback_data="go_home")
    )
    return kb

# ========== SHOP LIST + PRODUCT VIEW ==========
@bot.message_handler(func=lambda m: m.text == "üõç ‘Ω’°’∂’∏÷Ç’©")
def open_shop(m: types.Message):
    kb = types.InlineKeyboardMarkup()
    # ’ë’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¢’∏’¨’∏÷Ä 12 ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’® inline ’Ω’•’≤’¥’æ’∏’≤ ’Ø’∏’≥’°’Ø’∂’•÷Ä’∏’æ
    for code, prod in PRODUCTS.items():
        kb.add(types.InlineKeyboardButton(prod["title"], callback_data=f"prod:{code}"))
    bot.send_message(m.chat.id, "üõç ‘Ω’°’∂’∏÷Ç’© ‚Äî ‘∏’∂’ø÷Ä’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’® ‚¨áÔ∏è", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("prod:"))
def show_product(c: types.CallbackQuery):
    code = c.data.split(":")[1]
    prod = PRODUCTS.get(code)
    if not prod:
        bot.answer_callback_query(c.id, "‘±’∫÷Ä’°’∂÷Ñ’® ’π’´ ’£’ø’∂’æ’•’¨")
        return

    # ’ç’¨’°’µ’§/’¥’•’§’´’° ’≠’∏÷Ç’¥’¢
    media_paths = [p for p in prod["photos"] if os.path.exists(p)]
    if media_paths:
        try:
            media = [InputMediaPhoto(open(p, "rb")) for p in media_paths]
            bot.send_media_group(c.message.chat.id, media)
        except Exception as e:
            # ’•’©’• media_group ’π’Ω’ø’°÷Å’æ’•÷Å, ’£’∏’∂’• ’°’º’°’ª’´’∂ ’∂’Ø’°÷Ä’® ’∏÷Ç’≤’°÷Ä’Ø’•’∂÷Ñ
            try:
                with open(media_paths[0], "rb") as ph:
                    bot.send_photo(c.message.chat.id, ph)
            except:
                pass

    # ‘±’∫÷Ä’°’∂÷Ñ’´ caption + ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’°’∂ ’Ø’∏’≥’°’Ø’∂’•÷Ä
    caption = (
        f"<b>{prod['title']}</b>\n\n"
        f"{prod['desc']}\n\n"
        f"’Ä’´’∂ ’£’´’∂ ‚Äî {prod['old_price']}÷è\n"
        f"’Ü’∏÷Ä ’£’´’∂ ‚Äî <b>{prod['price']}÷è</b>"
    )
    bot.send_message(c.message.chat.id, caption, reply_markup=product_inline_kb(code), parse_mode="HTML")
    bot.answer_callback_query(c.id)

# ‚¨ÖÔ∏è ‚Äú‘≥’¨’≠’°’æ’∏÷Ä‚Äù inline ’Ø’∏’≥’°’Ø’´’∂ ’°÷Ä’±’°’£’°’∂÷Ñ
@bot.callback_query_handler(func=lambda c: c.data == "go_home")
def cb_go_home(c: types.CallbackQuery):
    show_main_menu(c.message.chat.id)
    bot.answer_callback_query(c.id)

# ========== RUN ==========
if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling(timeout=30, long_polling_timeout=30, skip_pending=True)
# ========== END OF PART 1/8 ==========
