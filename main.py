# -*- coding: utf-8 -*-
import os, json, time, threading, traceback, re
import requests
from datetime import datetime
from collections import defaultdict
from dotenv import load_dotenv, find_dotenv
from telebot import TeleBot, types
from telebot import apihelper
from telebot.types import InputMediaPhoto

# ---------------- TELEGRAM API URL (—Ñ–∏–∫—Å’ù 401/409 ’≠’∂’§’´÷Ä’∂’•÷Ä’´ ’°’º’∏÷Ç’¥’∏’æ) ------------
apihelper.API_URL = "https://api.telegram.org/bot{0}/{1}"

# ---------------- .env / TOKEN ---------------------------------------------------
load_dotenv()
ENV_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or ""
ADMIN_ID = int(os.getenv("ADMIN_ID", "6822052289"))  # ÷Ñ’∏ admin ID

print("dotenv path:", find_dotenv())
print("BOT_TOKEN raw:", repr(ENV_TOKEN))
print("BOT_TOKEN len:", len(ENV_TOKEN))

if not ENV_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is empty. Put it into .env as TELEGRAM_BOT_TOKEN=...")

# ---------------- STORAGE PATHS --------------------------------------------------
DATA_DIR = "data"
MEDIA_DIR = "media"
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(MEDIA_DIR, exist_ok=True)
os.makedirs(os.path.join(MEDIA_DIR, "products"), exist_ok=True)

SETTINGS_FILE = os.path.join(DATA_DIR, "settings.json")
USERS_FILE = os.path.join(DATA_DIR, "users.json")
ORDERS_FILE = os.path.join(DATA_DIR, "orders.json")
THOUGHTS_FILE = os.path.join(DATA_DIR, "thoughts.json")
ADS_FILE = os.path.join(DATA_DIR, "ads.json")
RATES_FILE = os.path.join(DATA_DIR, "rates.json")

def _load_json(path, default):
    try:
        if not os.path.exists(path):
            _save_json(path, default)
            return default
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        print("JSON load error:", path)
        return default

def _save_json(path, data):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except:
        print("JSON save error:", path)
        return False

SETTINGS = _load_json(SETTINGS_FILE, {
    "customer_counter": 1007,
    "bot_username": "YourBotUsernameHere"
})
USERS      = _load_json(USERS_FILE, {})
ORDERS     = _load_json(ORDERS_FILE, [])
THOUGHTS   = _load_json(THOUGHTS_FILE, [])
ADS_STORE  = _load_json(ADS_FILE, [])
RATES_CACHE = _load_json(RATES_FILE, {"rates": {}, "updated_at": None, "error": None})

# ---------------- BOT INIT -------------------------------------------------------
bot = TeleBot(ENV_TOKEN, parse_mode="HTML")

# ---------------- GLOBALS (Runtime) ---------------------------------------------
START_TS = time.time()

def uptime():
    sec = int(time.time() - START_TS)
    d, sec = divmod(sec, 86400)
    h, sec = divmod(sec, 3600)
    m, s  = divmod(sec, 60)
    out = []
    if d: out.append(f"{d} ÷Ö÷Ä")
    if h: out.append(f"{h} ’™")
    if m: out.append(f"{m}  ÷Ä")
    out.append(f"{s} ’æ")
    return " ".join(out)

# =========================
# BUTTON LABELS / MAIN MENU
# =========================
BTN_SHOP     = "üõç ‘Ω’°’∂’∏÷Ç’©"
BTN_CART     = "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤"
BTN_EXCHANGE = "üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä"
BTN_THOUGHTS = "üí° ‘Ω’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä"
BTN_RATES    = "üìà ’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä"
BTN_PROFILE  = "üßç ‘ª’¥ ’ß’ª’®"
BTN_FEEDBACK = "üí¨ ‘ø’°’∫ ’¥’•’¶ ’∞’•’ø"
BTN_PARTNERS = "üì¢ ‘≤’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä"
BTN_SEARCH   = "üîç ‘±’∫÷Ä’°’∂÷Ñ’´ ’∏÷Ä’∏’∂’∏÷Ç’¥"
BTN_INVITE   = "üë• ’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´"
BTN_BACK_MAIN= "‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"
BTN_BACK_SHOP= "‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©"

def build_main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_SHOP, BTN_CART)
    kb.add(BTN_EXCHANGE, BTN_THOUGHTS)
    kb.add(BTN_RATES, BTN_PROFILE)
    kb.add(BTN_FEEDBACK, BTN_PARTNERS)
    kb.add(BTN_SEARCH, BTN_INVITE)
    return kb

def show_main_menu(chat_id, text="‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®"):
    bot.send_message(chat_id, text, reply_markup=build_main_menu())

# =========================
# WELCOME / START
# =========================
def welcome_text(customer_no: int) -> str:
    # ‚ö†Ô∏è ’â‘µ’Ñ ’ì’à‘Ω‘µ‘º ’∏’≥’®’ù ’∫’°’∞’•’¨ ’•’∂÷Ñ ÷Ñ’∏’∂’®
    return (
        "üê∞üå∏ <b>‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø StarLegen</b> üõç‚ú®\n\n"
        "üíñ ’á’∂’∏÷Ä’∞’°’Ø’°’¨ ’•’∂÷Ñ, ’∏÷Ä ’¥’´’°÷Å’•’¨ ’•÷Ñ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’¥’°’µ’∂÷Ñ’´’∂ ‚ù§Ô∏è\n"
        f"‘¥’∏÷Ç÷Ñ ’°’µ’™’¥ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’≥’°’≠’∏÷Ä’§’∂ ’•÷Ñ ‚Ññ{customer_no} ‚ú®\n\n"
        "’Ñ’•÷Ä ’≠’°’∂’∏÷Ç’©’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’£’ø’∂’•’¨ ’°’¥’•’∂ ÷Ö÷Ä ÷Ö’£’ø’°’Ø’°÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’´ ’£’•’≤’•÷Å’´’Ø ’¨’°÷Å’°’Ø’°’¶’¥ ’£’∂’•÷Ä’®÷â\n\n"
        "üéÅ <b>‘±’æ’•’¨’´ ’∑’°’ø’´’ù</b> ’°’º÷Å’°’∂÷Å ’£’∂’¥’°’∂ ’§’•’∫÷Ñ’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ÷Ö’£’ø’æ’•’¨ ’¥’´’∂’π÷á 10% ’¶’•’≤’π ’Ø’∏÷Ç’∫’∏’∂’∂’•÷Ä’´ ’∞’°’¥’°’Ø’°÷Ä’£’´÷Å÷â\n\n"
        "üì¶ ‘ª’û’∂’π ’Ø’£’ø’∂’•÷Ñ ’°’µ’Ω’ø’•’≤‚Ä§\n"
        "‚Ä¢ ‘∫’°’¥’°’∂’°’Ø’°’Ø’´÷Å ÷á ÷Ö’£’ø’°’Ø’°÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä ’°’¥’•’∂ ÷Ö÷Ä’æ’° ’∞’°’¥’°÷Ä\n"
        "‚Ä¢ ‘º’°’æ’°’£’∏÷Ç’µ’∂ ÷á ’ø’°÷Ä’¢’•÷Ä’°’Ø’æ’°’Æ Telegram ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä\n"
        "‚Ä¢ ’Ä’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ÷á ’°÷Ä’°’£ ’°’º’°÷Ñ’∏÷Ç’¥ üöö\n\n"
        "üìä <b>’ì’∏’≠’°÷Ä’™’•÷Ñ’´ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä</b>\n"
        "‚Ä¢ PI ‚ûî USDT (’∑’∏÷Ç’Ø’°’µ’°’Ø’°’∂ ’Ø’∏÷Ç÷Ä’Ω, +20% ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥)\n"
        "‚Ä¢ FTN ‚ûî AMD (’¥’´’°’µ’∂ 10% ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥)\n"
        "‚Ä¢ Alipay ’¨’´÷Å÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥ (1 CNY = 58÷è)\n\n"
        "‚ú® ‘∏’∂’ø÷Ä’•÷Ñ ’∂’•÷Ä÷Ñ÷á’´÷Å ’¢’°’™’´’∂ üëá"
    )

def bot_link_with_ref(user_id: int) -> str:
    uname = SETTINGS.get("bot_username") or "YourBotUsernameHere"
    return f"https://t.me/{uname}?start={user_id}"

@bot.message_handler(commands=["start"])
def cmd_start(m: types.Message):
    # referral
    try:
        parts = (m.text or "").split(maxsplit=1)
        if len(parts) == 2 and parts[1].isdigit():
            uid = m.from_user.id
            ref_id = int(parts[1])
            if uid != ref_id:
                USERS.setdefault(str(uid), {})
                if "referrer_id" not in USERS[str(uid)]:
                    USERS[str(uid)]["referrer_id"] = ref_id
                    _save_json(USERS_FILE, USERS)
    except:
        pass

    SETTINGS["customer_counter"] = int(SETTINGS.get("customer_counter", 1007)) + 1
    _save_json(SETTINGS_FILE, SETTINGS)
    customer_no = SETTINGS["customer_counter"]

    # bunny
    bunny_path = os.path.join(MEDIA_DIR, "bunny.jpg")
    if os.path.exists(bunny_path):
        try:
            with open(bunny_path, "rb") as ph:
                bot.send_photo(m.chat.id, ph)
        except:
            pass

    bot.send_message(m.chat.id, welcome_text(customer_no), reply_markup=build_main_menu())

@bot.message_handler(commands=["menu"])
def cmd_menu(m: types.Message):
    show_main_menu(m.chat.id)

# =========================
# ADMIN PANEL (÷Ñ’•’¶ ’¥’∏’ø ’°÷Ä’§’•’∂ ’Ø’°÷Ä’ù ’∫’°’∞’•’¨ ’•’∂÷Ñ ’¨’°’µ’© ’ø’°÷Ä’¢’•÷Ä’°’Ø)
# =========================
def _is_admin(uid: int) -> bool:
    return int(uid) == int(ADMIN_ID)

@bot.message_handler(commands=["admin"])
def cmd_admin(m: types.Message):
    if not _is_admin(m.from_user.id):
        return bot.reply_to(m, "‚ùå ‘¥’∏÷Ç÷Ñ ’°’§’¥’´’∂ ’π’•÷Ñ÷â")
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üìä ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂", callback_data="adm:stats"))
    kb.add(types.InlineKeyboardButton("üë• ’ï’£’ø’°’ø’•÷Ä’•÷Ä", callback_data="adm:users"))
    kb.add(types.InlineKeyboardButton("‚ôªÔ∏è Reload", callback_data="adm:reload"))
    bot.send_message(m.chat.id, "üõ† ‘±’§’¥’´’∂ ’∫’°’∂’•’¨", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("adm:"))
def on_admin(c: types.CallbackQuery):
    if not _is_admin(c.from_user.id):
        return bot.answer_callback_query(c.id, "’à’π ’°’§’¥’´’∂")
    act = c.data.split(":")[1]
    if act == "stats":
        txt = (f"üìä ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂\n"
               f"Users: {len(USERS)}\n"
               f"Orders: {len(ORDERS)}\n"
               f"Uptime: {uptime()}\n")
        bot.answer_callback_query(c.id)
        bot.edit_message_text(txt, c.message.chat.id, c.message.message_id)
    elif act == "users":
        bot.answer_callback_query(c.id)
        lines = []
        for uid, u in list(USERS.items())[:20]:
            lines.append(f"‚Ä¢ id={uid}, ref={u.get('referrer_id','‚Äî')}")
        if not lines: lines = ["‘¥’•’º ÷Ö’£’ø’°’ø’•÷Ä ’π’Ø’°÷â"]
        bot.edit_message_text("üë• ’é’•÷Ä’ª’´’∂ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä\n" + "\n".join(lines),
                              c.message.chat.id, c.message.message_id)
    elif act == "reload":
        global SETTINGS, USERS, ORDERS, THOUGHTS, ADS_STORE
        SETTINGS = _load_json(SETTINGS_FILE, SETTINGS)
        USERS    = _load_json(USERS_FILE, USERS)
        ORDERS   = _load_json(ORDERS_FILE, ORDERS)
        THOUGHTS = _load_json(THOUGHTS_FILE, THOUGHTS)
        ADS_STORE= _load_json(ADS_FILE, ADS_STORE)
        bot.answer_callback_query(c.id, "Reloaded ‚úÖ")

# =========================
# SHOP / PRODUCTS
# =========================
PRODUCTS = {
    # ÷Ñ’∏ 11 ’£’∏÷Ä’£’•÷Ä’® Í∑∏ÎåÄÎ°ú (BA100810..BA100820)
    "BA100810": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100810","category":"home",
        "images": [
            "media/products/BA100810.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/absorb.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price": 2560, "price": 1690, "size": "40√ó60 ’Ω’¥",
        "sold": 320, "best": True,
        "bullets":[
            "’â’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ’ù ’°’∂’æ’ø’°’∂’£ ÷Ñ’°’µ’¨÷Ñ ’Ω’°’∞’∏÷Ç’∂ ’¥’°’Ø’•÷Ä’•’Ω’∂’•÷Ä’´ ’æ÷Ä’°",
            "‘π’°’∂’±÷Ä, ÷É’°÷É’∏÷Ç’Ø ’∑’•÷Ä’ø’ù ’∞’°÷Ä’¥’°÷Ä’°’æ’•’ø ÷Ñ’°’µ’¨÷Ñ’´ ’¶’£’°÷Å’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂",
            "’Ä’•’∑’ø ’¥’°÷Ñ÷Ä’æ’∏÷Ç’¥’ù ’±’•’º÷Ñ’∏’æ ’Ø’°’¥ ’¨’æ’°÷Å÷Ñ’´ ’¥’•÷Ñ’•’∂’°’µ’∏÷Ç’¥ ’¥’´’∂’π÷á 30¬∞",
            "‘≥’∏÷Ç’µ’∂’´ ’Ø’°’µ’∏÷Ç’∂’∏÷Ç’©’µ’∏÷Ç’∂’ù ’π’´ ’≠’°’¥÷Ä’∏÷Ç’¥ ÷á ’π’´ ’©’°÷É’æ’∏÷Ç’¥",
        ],
        "long_desc":"‘π’´’©’•’º‚Äì’Æ’°’≤’´’Ø 3D ’§’´’¶’°’µ’∂..."
    },
    "BA100811": {
        "title":"‘≥’∏÷Ä’£ ‚Äì BA100811","category":"home",
        "images":[
            "media/products/BA100811.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/absorb.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price":2560,"price":1690,"size":"40√ó60 ’Ω’¥",
        "sold":295,"best":True,
        "bullets":[
            "‘Ω’´’ø ’£’∏÷Ä’Æ’æ’°’Æ÷Ñ’ù ’•÷Ä’Ø’°÷Ä ’Æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä",
            "‘±’∂’∞’∏’ø ÷á ’°’∂’æ’ø’°’∂’£ ’∂’µ’∏÷Ç’©’•÷Ä ’∏’≤’ª ’®’∂’ø’°’∂’´÷Ñ’´ ’∞’°’¥’°÷Ä",
            "‘±÷Ä’°’£ ’π’∏÷Ä’°÷Å’∏÷Ç’¥’ù ’≠’∏’∂’°’æ ’ø’°÷Ä’°’Æ÷Ñ’∂’•÷Ä’´’∂ ’∞’°÷Ä’¥’°÷Ä",
        ],
        "long_desc":"’Ñ’´’∂’´’¥’°’¨’´’Ω’ø’°’Ø’°’∂ ’£’∏÷Ç’µ’∂’•÷Ä..."
    },
    "BA100812": {
        "title":"‘≥’∏÷Ä’£ ‚Äì BA100812","category":"home",
        "images":[
            "media/products/BA100812.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price":2560,"price":1690,"size":"40√ó60 ’Ω’¥",
        "sold":241,"best":False,
        "bullets":[
            "‘ø’∏’Ø’´’Ø ’•’¶÷Ä’•÷Ä’ù ’∫÷Ä’•’¥’´’∏÷Ç’¥ ’ø’•’Ω÷Ñ",
            "’Å÷á’® ’π’´ ÷É’∏’≠’∏÷Ç’¥’ù ’Ø’°’∂’∏’∂’°’æ’∏÷Ä ’¨’æ’°÷Å’∏÷Ç’¥’´÷Å ’∞’•’ø’∏ ’ß’¨",
        ],
        "long_desc":"‘∑’Ω’©’•’ø’´’Ø ’Ø’∏’¥’∫’∏’¶’´÷Å’´’°’ù ’∂’∏÷Ç÷Ä’¢ ’§’•’ø’°’¨’∂’•÷Ä’∏’æ..."
    },
    "BA100813": {
        "title":"‘≥’∏÷Ä’£ ‚Äì BA100813","category":"home",
        "images":[
            "media/products/BA100813.jpg",
            "media/products/shared/absorb.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/interior.jpg",
        ],
        "old_price":2560,"price":1690,"size":"40√ó60 ’Ω’¥",
        "sold":198,"best":False,
        "bullets":[
            "’Ä’°÷Ä’¥’°÷Ä ’Æ’°’∂÷Ä’°’¢’•’º’∂’æ’°’Æ ’°’∂÷Å’∏÷Ç’≤’´’∂’•÷Ä’´ ’∞’°’¥’°÷Ä",
            "’â’´ ’Æ’°’¨’æ’∏÷Ç’¥, ’π’´ ’Ω’°’∞’∏÷Ç’¥’ù ’∑’∂’∏÷Ä’∞’´’æ ’∞’´’¥÷Ñ’´ ’Ø’°’º’∏÷Ç÷Å’æ’°’Æ÷Ñ’´",
        ],
        "long_desc":"‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂ ÷á ’§’´’¥’°÷Å’Ø’∏÷Ç’∂ ’ø’°÷Ä’¢’•÷Ä’°’Ø..."
    },
    "BA100814": {
        "title":"‘≥’∏÷Ä’£ ‚Äì BA100814","category":"home",
        "images":[
            "media/products/BA100814.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price":2560,"price":1690,"size":"40√ó60 ’Ω’¥",
        "sold":175,"best":False,
        "bullets":[
            "’ì’°÷É’∏÷Ç’Ø ’¥’°’Ø’•÷Ä’•’Ω’ù ’∞’°’≥’•’¨’´ ’∞’∫’∏÷Ç’¥",
            "‘≥’∏÷Ç’∂’°’µ’´’∂ ’Ø’°’µ’∏÷Ç’∂’∏÷Ç’©’µ’∏÷Ç’∂’ù ’•÷Ä’Ø’°÷Ä’°’ø÷á ÷Ö’£’ø’°’£’∏÷Ä’Æ’¥’°’∂ ’®’∂’©’°÷Å÷Ñ’∏÷Ç’¥",
        ],
        "long_desc":"‘≤’∂’°’Ø’°’∂ ’•÷Ä’°’∂’£’∂’•÷Ä’ù ’∞’°’∂’£’´’Ω’ø ’¥’´’ª’°’æ’°’µ÷Ä..."
    },
    "BA100815": {
        "title":"‘≥’∏÷Ä’£ ‚Äì BA100815","category":"home",
        "images":[
            "media/products/BA100815.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price":2560,"price":1690,"size":"40√ó60 ’Ω’¥",
        "sold":210,"best":False,
        "bullets":[
            "‘Ω’´’ø ’∑’•÷Ä’ø’ù ’¢’°÷Ä’±÷Ä ’§’´’¥’°÷Å’Ø’∏÷Ç’∂’∏÷Ç’©’µ’∏÷Ç’∂",
            "‘µ’¶÷Ä’•÷Ä’® ’π’•’∂ ÷É’∑÷Ä’æ’∏÷Ç’¥",
        ],
        "long_desc":"’Ä’°÷Ä’¥’°÷Ä ’ß ’´’∂’π’∫’•’Ω ’¢’∂’°’Ø’°÷Ä’°’∂’´, ’°’µ’∂’∫’•’Ω ’ß’¨ ÷Ö÷Ü’´’Ω’´ ’∞’°’¥’°÷Ä..."
    },
    "BA100816": {
        "title":"‘≥’∏÷Ä’£ ‚Äì BA100816","category":"home",
        "images":[
            "media/products/BA100816.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/absorb.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price":2560,"price":1690,"size":"40√ó60 ’Ω’¥",
        "sold":233,"best":False,
        "bullets":[
            "‘¥’•’Ø’∏÷Ä’°’ø’´’æ ’•’¶÷Ä’°’£’Æ’•÷Ä",
            "’â’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ’ù ’°’º’°’æ’•’¨ ’°’∂’æ’ø’°’∂’£’∏÷Ç’©’µ’∏÷Ç’∂",
        ],
        "long_desc":"‘∑’¨’•’£’°’∂’ø ’∑’•’∑’ø’°’§÷Ä’∏÷Ç’¥ ÷Å’°’∂’Ø’°÷Å’°’Æ ’´’∂’ø’•÷Ä’´’•÷Ä’∏÷Ç’¥..."
    },
    "BA100817": {
        "title":"‘≥’∏÷Ä’£ ‚Äì BA100817","category":"home",
        "images":[
            "media/products/BA100817.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/interior.jpg",
        ],
        "old_price":2560,"price":1690,"size":"40√ó60 ’Ω’¥",
        "sold":221,"best":False,
        "bullets":[
            "‘ª’§’•’°’¨ ’ß ’≠’∏’∞’°’∂’∏÷Å’´ ÷á ’¥’∏÷Ç’ø÷Ñ’´ ’∞’°’¥’°÷Ä",
            "‘±÷Ä’°’£ ’π’∏÷Ä’°÷Å’∏÷Ç’¥’ù ’°’º’°’∂÷Å ’∞’•’ø÷Ñ’•÷Ä’´",
        ],
        "long_desc":"‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂ ’¨’∏÷Ç’Æ’∏÷Ç’¥’ù ’£’•’≤’•÷Å’´’Ø ’§’•’ø’°’¨’∂’•÷Ä’∏’æ..."
    },
    "BA100818": {
        "title":"‘≥’∏÷Ä’£ ‚Äì BA100818","category":"home",
        "images":[
            "media/products/BA100818.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price":2560,"price":1690,"size":"40√ó60 ’Ω’¥",
        "sold":187,"best":False,
        "bullets":[
            "‘ø’∏’¥’∫’°’Ø’ø ’π’°÷É’ù ’∞’•’∑’ø ’ø’•’≤’°’§÷Ä’∏÷Ç’¥",
            "‘π’•’©÷á ÷Ñ’°’∑’ù ’∞’°÷Ä’¥’°÷Ä ’ø’•’≤’°÷É’∏’≠’•’¨",
        ],
        "long_desc":"‘ø’∏’Ø’´’Ø ’ø’°÷Ä’¢’•÷Ä’°’Ø ÷É’∏÷Ñ÷Ä ’ø’°÷Ä’°’Æ÷Ñ’∂’•÷Ä’´ ’∞’°’¥’°÷Ä..."
    },
    "BA100819": {
        "title":"‘≥’∏÷Ä’£ ‚Äì BA100819","category":"home",
        "images":[
            "media/products/BA100819.jpg",
            "media/products/shared/absorb.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price":2560,"price":1690,"size":"40√ó60 ’Ω’¥",
        "sold":205,"best":False,
        "bullets":[
            "‘ø’∏’Ø’´’Ø ’ø’•’Ω÷Ñ’ù ’¥’°÷Ñ’∏÷Ç÷Ä ’•’¶÷Ä’•÷Ä’∏’æ",
            "’Ä’°’Ø’°’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ’ù ’Ø’°’µ’∏÷Ç’∂ ’§’´÷Ä÷Ñ",
        ],
        "long_desc":"‘≥’•’≤’•÷Å’´’Ø ’¨’∏÷Ç’Æ’∏÷Ç’¥ ’¥’´’ª’°’∂÷Å÷Ñ’´ ÷á ’¨’∏’£’°÷Ä’°’∂’´ ’∞’°’¥’°÷Ä..."
    },
    "BA100820": {
        "title":"‘≥’∏÷Ä’£ ‚Äì BA100820","category":"home",
        "images":[
            "media/products/BA100820.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price":2560,"price":1690,"size":"40√ó60 ’Ω’¥",
        "sold":199,"best":False,
        "bullets":[
            "‘∑’Ω’©’•’ø’´’Ø ’Ø’∏’¥’∫’∏’¶’´÷Å’´’°’ù ’¢’∂’°’Ø’°’∂ ’•÷Ä’°’∂’£’∂’•÷Ä",
            "‘¥’´’¥’°÷Å’Ø’∏÷Ç’∂ ’∞’´’¥÷Ñ’ù ’•÷Ä’Ø’°÷Ä ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥",
        ],
        "long_desc":"‘π’°÷Ä’¥ ’§’´’¶’°’µ’∂, ’∏÷Ä’® ’∞’•’∑’ø ’ß ’∞’°’¥’°’§÷Ä’•’¨ ÷Å’°’∂’Ø’°÷Å’°’Æ ’´’∂’ø’•÷Ä’´’•÷Ä’´ ’∞’•’ø..."
    },
}

def codes_by_cat(cat):
    return [k for k, p in PRODUCTS.items() if p.get("category") == cat]

# ============== SHOP MENU
@bot.message_handler(func=lambda m: m.text == BTN_SHOP)
def shop_main(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üè† ‘ø’•’∂÷Å’°’≤’°’µ’´’∂ ’∫’°÷Ä’°’£’°’∂’•÷Ä")
    kb.add(BTN_BACK_MAIN)
    bot.send_message(m.chat.id, "üõç ‘Ω’°’∂’∏÷Ç’© ‚Äî ’®’∂’ø÷Ä’•÷Ñ ’Ø’°’ø’•’£’∏÷Ä’´’° üëá", reply_markup=kb)

# ============== HOME category cards
@bot.message_handler(func=lambda m: m.text == "üè† ‘ø’•’∂÷Å’°’≤’°’µ’´’∂ ’∫’°÷Ä’°’£’°’∂’•÷Ä")
def home_category(m: types.Message):
    codes = codes_by_cat("home")
    sent = 0
    for code in codes:
        p = PRODUCTS[code]
        imgs = p.get("images") or []
        main_img = imgs[0] if imgs else None
        discount = int(round(100 - (p["price"] * 100 / p["old_price"])))
        best = "üî• ‘º’°’æ’°’£’∏÷Ç’µ’∂ ’æ’°’≥’°’º’æ’∏’≤\n" if p.get("best") else ""
        caption = (
            f"{best}<b>{p['title']}</b>\n"
            f"’â’°÷É’Ω’ù {p['size']}\n"
            f"’Ä’´’∂ ’£’´’∂ ‚Äî {p['old_price']}÷è (‚àí{discount}%)\n"
            f"’Ü’∏÷Ä ’£’´’∂ ‚Äî <b>{p['price']}÷è</b>\n"
            f"‘ø’∏’§’ù <code>{code}</code>"
        )
        ikb = types.InlineKeyboardMarkup()
        ikb.add(types.InlineKeyboardButton("üëÄ ‘¥’´’ø’•’¨ ’°’¥’¢’∏’≤’ª’∏÷Ç’©’µ’°’¥’¢", callback_data=f"p:{code}"))
        try:
            if main_img and os.path.exists(main_img):
                with open(main_img, "rb") as ph:
                    bot.send_photo(m.chat.id, ph, caption=caption, reply_markup=ikb)
            else:
                bot.send_message(m.chat.id, caption, reply_markup=ikb)
        except Exception:
            bot.send_message(m.chat.id, caption, reply_markup=ikb)
        sent += 1
        time.sleep(0.1)

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_BACK_SHOP, BTN_BACK_MAIN)
    bot.send_message(m.chat.id, "üìé ’é’•÷Ä÷á’∏÷Ç’¥ ’ø’•’Ω’•÷Ñ ’¢’∏’¨’∏÷Ä ÷Ñ’°÷Ä’ø’´’Ø’∂’•÷Ä’®÷â", reply_markup=kb)

# ============== PRODUCT PAGE with SLIDER + CART buttons
def _product_images(code):
    raw = PRODUCTS.get(code, {}).get("images") or []
    return [p for p in raw if os.path.exists(p)]

def _slider_kb(code: str, idx: int, total: int):
    if total <= 0:
        total = 1
    left  = types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"slider:{code}:{(idx-1)%total}")
    right = types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"slider:{code}:{(idx+1)%total}")
    kb = types.InlineKeyboardMarkup()
    kb.row(left, right)
    kb.row(
        types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data=f"cart:add:{code}"),
        types.InlineKeyboardButton("üß∫ ‘¥’´’ø’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data="cart:show")
    )
    kb.row(
        types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ÷Å’∏÷Ç÷Å’°’Ø", callback_data="back:home_list"),
        types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="go_home")
    )
    return kb

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("p:"))
def on_product(c: types.CallbackQuery):
    code = c.data.split(":", 1)[1]
    p = PRODUCTS.get(code)
    if not p:
        return bot.answer_callback_query(c.id, "’â’£’ø’∂’æ’•÷Å")
    discount = int(round(100 - (p["price"] * 100 / p["old_price"])))
    bullets = "\n".join([f"‚úÖ {b}" for b in p.get("bullets", [])])
    caption = (
        f"üå∏ <b>{p['title']}</b>\n"
        f"‚úîÔ∏è ’â’°÷É’Ω’ù {p['size']}\n"
        f"{bullets}\n\n"
        f"{p.get('long_desc','')}\n\n"
        f"’Ä’´’∂ ’£’´’∂ ‚Äî {p['old_price']}÷è (‚àí{discount}%)\n"
        f"’Ü’∏÷Ä ’£’´’∂ ‚Äî <b>{p['price']}÷è</b>\n"
        f"’é’°’≥’°’º’æ’°’Æ ‚Äî {p.get('sold',0)} ’∞’°’ø\n"
        f"‘ø’∏’§’ù <code>{code}</code>"
    )
    imgs = _product_images(code)
    try:
        if imgs:
            with open(imgs[0], "rb") as ph:
                bot.send_photo(c.message.chat.id, ph, caption=caption, reply_markup=_slider_kb(code, 0, len(imgs)))
        else:
            bot.send_message(c.message.chat.id, caption, reply_markup=_slider_kb(code, 0, 1))
    except Exception:
        bot.send_message(c.message.chat.id, caption, reply_markup=_slider_kb(code, 0, max(1, len(imgs))))
    bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("slider:"))
def on_slider(c: types.CallbackQuery):
    try:
        _, code, idx_s = c.data.split(":")
        idx = int(idx_s)
    except:
        return bot.answer_callback_query(c.id)
    p = PRODUCTS.get(code, {})
    discount = int(round(100 - (p.get("price",1) * 100 / p.get("old_price",1))))
    bullets = "\n".join([f"‚úÖ {b}" for b in p.get("bullets", [])])
    caption = (
        f"üå∏ <b>{p.get('title','')}</b>\n"
        f"‚úîÔ∏è ’â’°÷É’Ω’ù {p.get('size','')} \n"
        f"{bullets}\n\n"
        f"{p.get('long_desc','')}\n\n"
        f"’Ä’´’∂ ’£’´’∂ ‚Äî {p.get('old_price',0)}÷è (‚àí{discount}%)\n"
        f"’Ü’∏÷Ä ’£’´’∂ ‚Äî <b>{p.get('price',0)}÷è</b>\n"
        f"’é’°’≥’°’º’æ’°’Æ ‚Äî {p.get('sold',0)} ’∞’°’ø\n"
        f"‘ø’∏’§’ù <code>{code}</code>"
    )
    imgs = _product_images(code)
    total = len(imgs)
    if total == 0:
        # no images: just update caption in a new message
        bot.send_message(c.message.chat.id, caption, reply_markup=_slider_kb(code, 0, 1))
        return bot.answer_callback_query(c.id)
    idx = idx % total
    try:
        with open(imgs[idx], "rb") as ph:
            media = InputMediaPhoto(ph, caption=caption, parse_mode="HTML")
            bot.edit_message_media(media=media,
                                   chat_id=c.message.chat.id,
                                   message_id=c.message.message_id,
                                   reply_markup=_slider_kb(code, idx, total))
    except Exception:
        # fallback ‚Äì send new photo instead of edit (409 safe)
        with open(imgs[idx], "rb") as ph:
            bot.send_photo(c.message.chat.id, ph, caption=caption, reply_markup=_slider_kb(code, idx, total))
    bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data in ("back:home_list", "go_home"))
def on_backs(c: types.CallbackQuery):
    if c.data == "back:home_list":
        msg = c.message
        # ’¢’°÷Å’∏÷Ç’¥ ’•’∂÷Ñ Home category-’®
        home_category(msg)
    else:
        show_main_menu(c.message.chat.id)
    bot.answer_callback_query(c.id)

# =========================
# CART + CHECKOUT
# =========================
CART = defaultdict(dict)  # uid -> {code: qty}
CHECKOUT_STATE = {}       # uid -> {"step":..., "order":{...}}

def cart_text(uid: int) -> str:
    if not CART[uid]:
        return "üß∫ ‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß"
    total = 0
    lines = []
    for code, qty in CART[uid].items():
        p = PRODUCTS[code]
        sub = p["price"] * qty
        total += sub
        lines.append(f"‚Ä¢ {p['title']} √ó {qty} ‚Äî {sub}÷è")
    lines.append(f"\n‘∏’∂’§’°’¥’•’∂’®’ù <b>{total}÷è</b>")
    return "\n".join(lines)

def cart_total(uid: int) -> int:
    return sum(PRODUCTS[c]["price"] * q for c, q in CART[uid].items())

def check_stock(uid: int):
    for code, qty in CART[uid].items():
        st = PRODUCTS[code].get("stock")
        if isinstance(st, int) and qty > st:
            return False, code, st
    return True, None, None

@bot.message_handler(func=lambda m: m.text == BTN_CART)
def open_cart_from_menu(m: types.Message):
    _send_cart_ui(m.chat.id, m.from_user.id)

def _send_cart_ui(chat_id: int, uid: int):
    ikb = types.InlineKeyboardMarkup()
    for code, qty in list(CART[uid].items())[:6]:
        title = PRODUCTS[code]["title"]
        ikb.row(types.InlineKeyboardButton(f"üõí {title} ({qty})", callback_data="noop"))
        ikb.row(
            types.InlineKeyboardButton("‚ûñ", callback_data=f"cart:dec:{code}"),
            types.InlineKeyboardButton("‚ûï", callback_data=f"cart:inc:{code}"),
            types.InlineKeyboardButton("üóë", callback_data=f"cart:rm:{code}"),
        )
    ikb.row(
        types.InlineKeyboardButton("‚ùå ’Ñ’°÷Ñ÷Ä’•’¨", callback_data="cart:clear"),
        types.InlineKeyboardButton("üßæ ’É’°’∂’°’∫’°÷Ä’∞’•’¨ ’∫’°’ø’æ’•÷Ä", callback_data="checkout:start"),
    )
    ikb.row(
        types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ÷Å’∏÷Ç÷Å’°’Ø", callback_data="back:home_list"),
        types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="go_home"),
    )
    bot.send_message(chat_id, cart_text(uid), reply_markup=ikb)

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("cart:"))
def on_cart_cb(c: types.CallbackQuery):
    uid = c.from_user.id
    parts = c.data.split(":")
    action = parts[1]
    code = parts[2] if len(parts) > 2 else None

    if action == "add" and code:
        st = PRODUCTS[code].get("stock")
        new_q = CART[uid].get(code, 0) + 1
        if isinstance(st, int) and new_q > st:
            return bot.answer_callback_query(c.id, "’ä’°’∞’•’Ω’ø’∏÷Ç’¥ ’¢’°’æ’°÷Ä’°÷Ä ÷Ñ’°’∂’°’Ø ’π’Ø’°")
        CART[uid][code] = new_q
        bot.answer_callback_query(c.id, "‘±’æ’•’¨’°÷Å’æ’•÷Å ‚úÖ")

    elif action == "inc" and code:
        st = PRODUCTS[code].get("stock")
        new_q = CART[uid].get(code, 0) + 1
        if isinstance(st, int) and new_q > st:
            return bot.answer_callback_query(c.id, "’ä’°’∞’•’Ω’ø’´ ’Ω’°’∞’¥’°’∂’®")
        CART[uid][code] = new_q
        bot.answer_callback_query(c.id)

    elif action == "dec" and code:
        q = CART[uid].get(code, 0)
        if q <= 1:
            CART[uid].pop(code, None)
        else:
            CART[uid][code] = q - 1
        bot.answer_callback_query(c.id)

    elif action == "rm" and code:
        CART[uid].pop(code, None)
        bot.answer_callback_query(c.id)

    elif action == "clear":
        CART[uid].clear()
        bot.answer_callback_query(c.id, "’Ñ’°÷Ñ÷Ä’æ’•÷Å")

    if action in ("show","add","inc","dec","rm","clear"):
        _send_cart_ui(c.message.chat.id, uid)

# ===== CHECKOUT FLOW =====
NAME_RE  = re.compile(r"^[A-Za-z\u0531-\u0556\u0561-\u0587–Å—ë–™—ä–´—ã–≠—ç–ô–π\s'\-\.]{3,60}$")
PHONE_RE = re.compile(r"^(\+374|0)\d{8}$")

COUNTRIES = ["’Ä’°’µ’°’Ω’ø’°’∂", "’å’∏÷Ç’Ω’°’Ω’ø’°’∂"]
CITIES = ["‘µ÷Ä÷á’°’∂","‘≥’µ’∏÷Ç’¥÷Ä’´","’é’°’∂’°’±’∏÷Ä","‘±’¢’∏’æ’µ’°’∂","‘±÷Ä’ø’°’∑’°’ø","‘±÷Ä’¥’°’æ’´÷Ä","’Ä÷Ä’°’¶’§’°’∂","’Ñ’°’Ω’´’Ω","‘±’∑’ø’°÷Ä’°’Ø","‘µ’≤’æ’°÷Ä’§","’â’°÷Ä’•’∂÷Å’°’æ’°’∂"]

def _order_id():
    return "ORD-" + datetime.now().strftime("%Y%m%d-%H%M%S")

@bot.callback_query_handler(func=lambda c: c.data == "checkout:start")
def checkout_start(c: types.CallbackQuery):
    uid = c.from_user.id
    if not CART[uid]:
        bot.answer_callback_query(c.id, "‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß")
        return
    ok, code, st = check_stock(uid)
    if not ok:
        bot.answer_callback_query(c.id, "’ä’°’∞’•’Ω’ø’∏÷Ç’¥ ’¢’°’æ’°÷Ä’°÷Ä ÷Ñ’°’∂’°’Ø ’π’Ø’°")
        bot.send_message(c.message.chat.id, f"‚ö†Ô∏è {PRODUCTS[code]['title']} ‚Äî ’∞’°’Ω’°’∂’•’¨’´’ù {st} ’∞’°’ø")
        return

    order_id = _order_id()
    CHECKOUT_STATE[uid] = {
        "step": "name",
        "order": {
            "order_id": order_id,
            "user_id": uid,
            "username": c.from_user.username,
            "fullname": "",
            "phone": "",
            "country": "",
            "city": "",
            "address": "",
            "comment": "",
            "items": [{"code": code, "qty": qty} for code, qty in CART[uid].items()],
            "total": cart_total(uid),
            "status": "Draft",
            "created_at": datetime.utcnow().isoformat()
        }
    }
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(BTN_BACK_MAIN)
    bot.answer_callback_query(c.id)
    bot.send_message(c.message.chat.id, f"üßæ ’ä’°’ø’æ’•÷Ä {order_id}\n‚úçÔ∏è ‘≥÷Ä’•÷Ñ ’±’•÷Ä <b>‘±’∂’∏÷Ç’∂ ‘±’¶’£’°’∂’∏÷Ç’∂</b>:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.from_user.id in CHECKOUT_STATE)
def checkout_flow(m: types.Message):
    uid = m.from_user.id
    st = CHECKOUT_STATE.get(uid)
    if not st:
        return
    step  = st["step"]
    order = st["order"]

    # BACK MAIN
    if m.text == BTN_BACK_MAIN:
        CHECKOUT_STATE.pop(uid, None)
        show_main_menu(m.chat.id, "’é’•÷Ä’°’§’°÷Ä’±’°÷Ñ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç÷â")
        return

    if step == "name":
        txt = (m.text or "").strip()
        if not NAME_RE.match(txt):
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            kb.add(BTN_BACK_MAIN)
            return bot.send_message(m.chat.id, "‚ùó ‘±’∂’∏÷Ç’∂/‘±’¶’£’°’∂’∏÷Ç’∂’ù ’¥’´’°’µ’∂ ’ø’°’º’•÷Ä’∏’æ (3‚Äì60).", reply_markup=kb)
        order["fullname"] = txt
        st["step"] = "phone"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(types.KeyboardButton("üì± ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’Ø’∏’∂’ø’°’Ø’ø", request_contact=True))
        kb.add(BTN_BACK_MAIN)
        return bot.send_message(m.chat.id, "üìû ’Ñ’∏÷Ç’ø÷Ñ ’°÷Ä’° ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® (+374xxxxxxxx ’Ø’°’¥ 0xxxxxxxx) ’Ø’°’¥ ’Ω’•’≤’¥’´÷Ä’ù ¬´üì± ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’Ø’∏’∂’ø’°’Ø’ø¬ª.", reply_markup=kb)

    if step == "phone":
        phone = None
        if m.contact and m.contact.phone_number:
            phone = m.contact.phone_number.replace(" ", "")
            if not phone.startswith("+"):
                phone = "+" + phone
        else:
            phone = (m.text or "").replace(" ", "")
        if not PHONE_RE.match(phone):
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            kb.add(types.KeyboardButton("üì± ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’Ø’∏’∂’ø’°’Ø’ø", request_contact=True))
            kb.add(BTN_BACK_MAIN)
            return bot.send_message(m.chat.id, "‚ùó ’ç’≠’°’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä. ÷Ö÷Ä’´’∂’°’Ø’ù +374441112233 ’Ø’°’¥ 0441112233÷â", reply_markup=kb)
        order["phone"] = phone
        st["step"] = "country"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for ctry in COUNTRIES:
            kb.add(ctry)
        kb.add(BTN_BACK_MAIN)
        return bot.send_message(m.chat.id, "üåç ‘∏’∂’ø÷Ä’•÷Ñ ’•÷Ä’Ø’´÷Ä’®’ù", reply_markup=kb)

    if step == "country":
        if m.text not in COUNTRIES:
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for ctry in COUNTRIES: kb.add(ctry)
            kb.add(BTN_BACK_MAIN)
            return bot.send_message(m.chat.id, "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’°’º’°’ª’°÷Ä’Ø’æ’∏’≤ ’Ø’∏’≥’°’Ø’∂’•÷Ä’´÷Å÷â", reply_markup=kb)
        order["country"] = m.text
        st["step"] = "city"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for i in range(0, len(CITIES), 2):
            row = [types.KeyboardButton(x) for x in CITIES[i:i+2]]
            kb.row(*row)
        kb.add(BTN_BACK_MAIN)
        return bot.send_message(m.chat.id, "üèôÔ∏è ‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’°’≤’°÷Ñ’®’ù", reply_markup=kb)

    if step == "city":
        if m.text not in CITIES:
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for i in range(0, len(CITIES), 2):
                kb.row(*[types.KeyboardButton(x) for x in CITIES[i:i+2]])
            kb.add(BTN_BACK_MAIN)
            return bot.send_message(m.chat.id, "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’°’º’°’ª’°÷Ä’Ø’æ’∏’≤ ÷Ñ’°’≤’°÷Ñ’´÷Å÷â", reply_markup=kb)
        order["city"] = m.text
        st["step"] = "address"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(BTN_BACK_MAIN)
        return bot.send_message(m.chat.id, "üè° ‘≥÷Ä’•÷Ñ ’∞’°’Ω÷Å’•’∂ (÷É’∏’≤’∏÷Å, ’ø’∏÷Ç’∂, ’¥’∏÷Ç’ø÷Ñ, ’¢’∂’°’Ø’°÷Ä’°’∂)‚Ä§", reply_markup=kb)

    if step == "address":
        txt = (m.text or "").strip()
        if len(txt) < 5:
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            kb.add(BTN_BACK_MAIN)
            return bot.send_message(m.chat.id, "‚ùó ‘≥÷Ä’•÷Ñ ’°’æ’•’¨’´ ’¥’°’∂÷Ä ’∞’°’Ω÷Å’• (’°’º’∂’æ’°’¶’∂ 5 ’∂’´’∑)÷â", reply_markup=kb)
        order["address"] = txt
        st["step"] = "comment"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("‚Äî")
        kb.add(BTN_BACK_MAIN)
        return bot.send_message(m.chat.id, "üìù ‘º÷Ä’°÷Å’∏÷Ç÷Å’´’π ’¥’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ (’Ø’°’¥ ’£÷Ä’•÷Ñ ¬´‚Äî¬ª, ’•’©’• ’π’Ø’°)÷â", reply_markup=kb)

    if step == "comment":
        order["comment"] = "" if (m.text or "").strip() in {"", "‚Äî", "-"} else (m.text or "").strip()
        order["status"] = "Pending"
        order["created_at"] = datetime.utcnow().isoformat()
        ORDERS.append(order)
        _save_json(ORDERS_FILE, ORDERS)
        CART[uid].clear()
        CHECKOUT_STATE.pop(uid, None)
        bot.send_message(
            m.chat.id,
            f"‚úÖ ’ä’°’ø’æ’•÷Ä’® ’£÷Ä’°’∂÷Å’æ’•÷Å÷â ’Ñ’•÷Ä ÷Ö’∫’•÷Ä’°’ø’∏÷Ä’® ’∑’∏÷Ç’ø’∏’æ ’Ø’Ø’°’∫’æ’´÷â\n’ä’°’ø’æ’•÷Ä’´ ID: {order['order_id']}",
            reply_markup=types.ReplyKeyboardRemove()
        )
        show_main_menu(m.chat.id)  # ’°’æ’ø’∏’¥’°’ø ’¢’°÷Å’∏÷Ç’¥ ’•’∂÷Ñ ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç’∂
        return

# =========================
# RATES (÷Ö÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä) ‚Äî ’©’°÷Ä’¥’°÷Å’∏÷Ç’¥ 10 ÷Ä’∏’∫’•’°’∂’∏÷Å ’©’•’¨’∏’æ
# =========================
def fetch_rates():
    try:
        url = "https://api.exchangerate.host/latest"
        symbols = ["USD", "EUR", "RUB", "GBP", "CNY"]
        r = requests.get(url, params={"base": "AMD", "symbols": ",".join(symbols)}, timeout=10)
        data = r.json()
        raw = data.get("rates", {})
        converted = {}
        for k, v in raw.items():
            if v:
                converted[k] = round(1.0 / v, 4)  # 1 FX = ? AMD
        RATES_CACHE["rates"] = converted
        RATES_CACHE["updated_at"] = datetime.utcnow().isoformat() + "Z"
        RATES_CACHE["error"] = None
        _save_json(RATES_FILE, RATES_CACHE)
    except Exception as e:
        RATES_CACHE["error"] = str(e)
        _save_json(RATES_FILE, RATES_CACHE)

def _rates_thread():
    while True:
        fetch_rates()
        time.sleep(600)

threading.Thread(target=_rates_thread, daemon=True).start()
fetch_rates()

@bot.message_handler(func=lambda m: m.text == BTN_RATES)
def on_rates(m: types.Message):
    cache = _load_json(RATES_FILE, RATES_CACHE)
    err = cache.get("error")
    rates = cache.get("rates", {})
    if err or not rates:
        return bot.send_message(m.chat.id, "‚ùóÔ∏è’î’°’∑’∏÷Ç’¥’® ’±’°’≠’∏’≤’æ’•÷Å, ÷É’∏÷Ä’±’´÷Ä ÷Ñ’´’π ’∞’•’ø’∏÷â")
    flags = {"USD":"üá∫üá∏","EUR":"üá™üá∫","RUB":"üá∑üá∫","GBP":"üá¨üáß","CNY":"üá®üá≥"}
    order = ["USD","EUR","RUB","GBP","CNY"]
    lines = ["üìà <b>’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä</b> (AMD)", ""]
    for ccy in order:
        if ccy in rates:
            lines.append(f"{flags.get(ccy,'')} 1 {ccy} = <b>{rates[ccy]} AMD</b>")
    lines.append("")
    lines.append(f"üïí ‘π’°÷Ä’¥’°÷Å’æ’•’¨ ’ß (UTC): {cache.get('updated_at','-')}")
    bot.send_message(m.chat.id, "\n".join(lines))

# =========================
# ‘Ω’à’Ä’à’í’Ü ’Ñ’è’î‘µ’ê (’¨’°’µ’© ’ø’°÷Ä’¢’•÷Ä’°’Ø’ù approve only admin)
# =========================
PENDING_THOUGHT = {}

@bot.message_handler(func=lambda m: m.text == BTN_THOUGHTS)
def thoughts_menu(m: types.Message):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¥’´’ø÷Ñ", callback_data="t_add"))
    kb.add(types.InlineKeyboardButton("üìö ‘¥’´’ø’•’¨ ’æ’•÷Ä’ª’´’∂’∂’•÷Ä’®", callback_data="t_list"))
    bot.send_message(m.chat.id, "¬´‘Ω’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä¬ª ’¢’°’™’´’∂ ‚ú®", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data in ("t_add","t_list"))
def on_thoughts_cb(c: types.CallbackQuery):
    if c.data == "t_add":
        PENDING_THOUGHT[c.from_user.id] = True
        bot.answer_callback_query(c.id)
        bot.send_message(c.message.chat.id, "‚úçÔ∏è ’à÷Ç’≤’°÷Ä’Ø’•÷Ñ ’±’•÷Ä ’¥’´’ø÷Ñ’® (’ø’•÷Ñ’Ω’ø)÷â ‘±’§’¥’´’∂’® ’∫’•’ø÷Ñ ’ß ’∞’°’Ω’ø’°’ø’´÷â")
    else:
        arr = THOUGHTS or []
        if not arr:
            bot.answer_callback_query(c.id, "‘¥’•’º ’π’Ø’°", show_alert=True); return
        text = "üí° ’é’•÷Ä’ª’´’∂ ’¥’ø÷Ñ’•÷Ä\n\n" + "\n\n".join(arr[-5:])
        bot.answer_callback_query(c.id)
        bot.send_message(c.message.chat.id, text)

@bot.message_handler(func=lambda m: PENDING_THOUGHT.get(m.from_user.id, False))
def t_collect(m: types.Message):
    PENDING_THOUGHT[m.from_user.id] = False
    txt = (m.text or "").strip()
    if not txt:
        return bot.reply_to(m, "‘¥’°’ø’°÷Ä’Ø ’ß ü§î")
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨", callback_data=f"t_ok::{m.chat.id}"),
        types.InlineKeyboardButton("‚ùå ’Ñ’•÷Ä’™’•’¨", callback_data=f"t_no::{m.chat.id}")
    )
    bot.send_message(ADMIN_ID, f"’Ü’∏÷Ä ’¥’´’ø÷Ñ’ù\n\n{txt}", reply_markup=kb)
    bot.reply_to(m, "‚úÖ ’à÷Ç’≤’°÷Ä’Ø’æ’•÷Å ’°’§’¥’´’∂’´’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂÷â")

@bot.callback_query_handler(func=lambda c: c.data.startswith("t_ok::") or c.data.startswith("t_no::"))
def t_moderate(c: types.CallbackQuery):
    if not _is_admin(c.from_user.id):
        return bot.answer_callback_query(c.id, "’Ñ’´’°’µ’∂ ’°’§’¥’´’∂")
    action, chat_id = c.data.split("::", 1)
    chat_id = int(chat_id)
    msg = c.message.text.replace("’Ü’∏÷Ä ’¥’´’ø÷Ñ’ù\n\n", "")
    if action == "t_ok":
        THOUGHTS.append(msg)
        _save_json(THOUGHTS_FILE, THOUGHTS)
        bot.send_message(chat_id, "‚úÖ ’î’∏ ’¥’´’ø÷Ñ’® ’∞÷Ä’°’∫’°÷Ä’°’Ø’æ’•÷Å, ’∑’∂’∏÷Ä’∞’°’Ø’°’¨ ’•’∂÷Ñ!")
    else:
        bot.send_message(chat_id, "‚ùå ‘±’§’¥’´’∂’® ’¥’•÷Ä’™’•÷Å ’°’µ’Ω ’¥’´’ø÷Ñ’®÷â")
    bot.answer_callback_query(c.id, "‘ø’°’ø’°÷Ä’æ’°’Æ ’ß")

# =========================
# ‘≥’à’ê‘æ‘∏’Ü‘ø‘µ’ê’Ü‘µ’ê
# =========================
@bot.message_handler(func=lambda m: m.text == BTN_PARTNERS)
def on_partners(m: types.Message):
    arr = ADS_STORE or []
    if not arr:
        return bot.send_message(m.chat.id, "‘±’µ’Ω ’∫’°’∞’´’∂ ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä’´ ’∞’°’µ’ø’°÷Ä’°÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä ’π’Ø’°’∂÷â")
    lines = ["üì¢ ‘≤’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä\n"]
    for ad in arr[-5:]:
        lines.append(f"üè™ {ad.get('title','')} ‚Äî {ad.get('desc','')}")
    bot.send_message(m.chat.id, "\n".join(lines))

# =========================
# INVITE FRIENDS
# =========================
@bot.message_handler(func=lambda m: m.text == BTN_INVITE)
def on_invite(m: types.Message):
    link = bot_link_with_ref(m.from_user.id)
    bot.send_message(m.chat.id, f"üë• ‘ø’´’Ω’æ’•÷Ñ ’¢’∏’ø’∏’æ ÷á ’Ω’ø’°÷Å’•÷Ñ ’¢’∏’∂’∏÷Ç’Ω’∂’•÷Ä\n\n’Å’•÷Ä ’∞÷Ä’°’æ’•÷Ä’´ ’∞’≤’∏÷Ç’¥’®’ù\n{link}")

# =========================
# BACK TO SHOP / MAIN via reply keys
# =========================
@bot.message_handler(func=lambda m: m.text == BTN_BACK_MAIN)
def back_main(m: types.Message):
    CHECKOUT_STATE.pop(m.from_user.id, None)
    show_main_menu(m.chat.id, "’é’•÷Ä’°’§’°÷Ä’±’°÷Ñ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç÷â")

@bot.message_handler(func=lambda m: m.text == BTN_BACK_SHOP)
def back_shop(m: types.Message):
    shop_main(m)

# =========================
# RUN
# =========================
if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling(skip_pending=True, timeout=30, long_polling_timeout=30)
