### START PART 1/8

import os, json, time, traceback
from datetime import datetime
from telebot import TeleBot, types
from dotenv import load_dotenv, find_dotenv
from telebot.types import InputMediaPhoto
from collections import defaultdict
import re
import requests

# ===== STORAGE =====
CART = defaultdict(dict)         # {user_id: {code: qty}}
CHECKOUT_STATE = {}              # per-user checkout wizard state
ORDERS = []                      # demo storage

# ===== BUTTONS =====
BTN_BACK_MAIN = "‚¨Ö ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"

# ===== MAIN MENU =====
def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üõç ‘Ω’°’∂’∏÷Ç’©", "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤")
    kb.add("üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä", "üí¨ ‘ø’°’∫ ’¥’•’¶ ’∞’•’ø")
    kb.add("üîç ’à÷Ä’∏’∂’•’¨ ’°’∫÷Ä’°’∂÷Ñ", "üßç ‘ª’¥ ’ß’ª’®")
    return kb

def show_main_menu(chat_id, text="‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®"):
    bot.send_message(chat_id, text, reply_markup=main_menu_kb())

# ===== VALIDATION REGEX =====
NAME_RE  = re.compile(r"^[A-Za-z\u0531-\u0556\u0561-\u0587–Å—ë–™—ä–´—ã–≠—ç–ô–π\s'\-\.]{3,60}$")
PHONE_RE = re.compile(r"^(\+374|0)\d{8}$")

def _order_id():
    import time
    return f"BA{int(time.time()) % 1000000}"

def _cart_total(uid: int) -> int:
    return sum(PRODUCTS[c]["price"] * q for c, q in CART[uid].items())

def _check_stock(uid: int):
    for code, qty in CART[uid].items():
        st = PRODUCTS[code].get("stock")
        if isinstance(st, int) and qty > st:
            return False, code, st
    return True, None, None

COUNTRIES = ["’Ä’°’µ’°’Ω’ø’°’∂", "’å’∏÷Ç’Ω’°’Ω’ø’°’∂"]
CITIES = ["‘µ÷Ä÷á’°’∂", "‘≥’µ’∏÷Ç’¥÷Ä’´", "’é’°’∂’°’±’∏÷Ä", "‘±’¢’∏’æ’µ’°’∂", "‘±÷Ä’ø’°’∑’°’ø",
          "‘±÷Ä’¥’°’æ’´÷Ä", "’Ä÷Ä’°’¶’§’°’∂", "’Ñ’°’Ω’´’Ω", "‘±’∑’ø’°÷Ä’°’Ø", "‘µ’≤’æ’°÷Ä’§", "’â’°÷Ä’•’∂÷Å’°’æ’°’∂"]

@bot.message_handler(content_types=['text', 'contact'], func=lambda m: m.from_user.id in CHECKOUT_STATE)
def checkout_flow(m: types.Message):
    uid = m.from_user.id
    st = CHECKOUT_STATE.get(uid)
    if not st:
        return
    step  = st["step"]
    order = st["order"]

    # universal back
    if m.text == BTN_BACK_MAIN:
        CHECKOUT_STATE.pop(uid, None)
        show_main_menu(m.chat.id, "’é’•÷Ä’°’§’°÷Ä’±’°÷Ñ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç÷â")
        return

    # STEP: name
    if step == "name":
        txt = (m.text or "").strip()
        if not NAME_RE.match(txt):
            bot.send_message(m.chat.id, "‚ùó ‘±’∂’∏÷Ç’∂/‘±’¶’£’°’∂’∏÷Ç’∂’ù ’¥’´’°’µ’∂ ’ø’°’º’•÷Ä’∏’æ (3‚Äì60 ’∂’∑’°’∂). ‘ø÷Ä’Ø’´’∂ ÷É’∏÷Ä’±’•÷Ñ÷â")
            return
        order["fullname"] = txt
        st["step"] = "phone"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(types.KeyboardButton("üì± ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’Ø’∏’∂’ø’°’Ø’ø", request_contact=True))
        kb.add(BTN_BACK_MAIN)
        bot.send_message(m.chat.id, "üìû ‘≥÷Ä’•÷Ñ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® (+374xxxxxxxx ’Ø’°’¥ 0xxxxxxxx) ’Ø’°’¥ ’Ω’•’≤’¥’•÷Ñ ¬´üì± ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’Ø’∏’∂’ø’°’Ø’ø¬ª.", reply_markup=kb)
        return

    # STEP: phone
    if step == "phone":
        phone = None
        if m.contact and m.contact.phone_number:
            phone = m.contact.phone_number.replace(" ", "")
            if not phone.startswith("+"):
                phone = "+" + phone
        else:
            phone = (m.text or "").replace(" ", "")
        if not PHONE_RE.match(phone):
            bot.send_message(m.chat.id, "‚ùó ’ç’≠’°’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä. ÷Ö÷Ä’´’∂’°’Ø’ù +374441112233 ’Ø’°’¥ 0441112233÷â ‘ø÷Ä’Ø’´’∂ ’£÷Ä’•÷Ñ÷â")
            return
        order["phone"] = phone
        st["step"] = "country"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for c in COUNTRIES:
            kb.add(c)
        kb.add(BTN_BACK_MAIN)
        bot.send_message(m.chat.id, "üåç ‘∏’∂’ø÷Ä’•÷Ñ ’•÷Ä’Ø’´÷Ä’®’ù", reply_markup=kb)
        return

    # ... ’∑’°÷Ä’∏÷Ç’∂’°’Ø’æ’∏÷Ç’¥ ’ß ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥ ...

### END PART 1/8
### PART 2/8 START

    # STEP: country
    if step == "country":
        if m.text not in COUNTRIES:
            bot.send_message(m.chat.id, "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’°’º’°’ª’°÷Ä’Ø’æ’∏’≤ ’Ø’∏’≥’°’Ø’∂’•÷Ä’´÷Å÷â")
            return
        order["country"] = m.text
        st["step"] = "city"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for i in range(0, len(CITIES), 2):
            row = [types.KeyboardButton(x) for x in CITIES[i:i+2]]
            kb.row(*row)
        kb.add(BTN_BACK_MAIN)
        bot.send_message(m.chat.id, "üèôÔ∏è ‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’°’≤’°÷Ñ’®’ù", reply_markup=kb)
        return

    # STEP: city
    if step == "city":
        if m.text not in CITIES:
            bot.send_message(m.chat.id, "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’°’º’°’ª’°÷Ä’Ø’æ’∏’≤ ÷Ñ’°’≤’°÷Ñ’∂’•÷Ä’´÷Å÷â")
            return
        order["city"] = m.text
        st["step"] = "address"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(BTN_BACK_MAIN)
        bot.send_message(m.chat.id, "üè° ‘≥÷Ä’•÷Ñ ’∞’°’Ω÷Å’•’∂ (÷É’∏’≤’∏÷Å, ’ø’∏÷Ç’∂, ’¥’∏÷Ç’ø÷Ñ, ’¢’∂’°’Ø’°÷Ä’°’∂)‚Ä§", reply_markup=kb)
        return

    # STEP: address
    if step == "address":
        txt = (m.text or "").strip()
        if len(txt) < 5:
            bot.send_message(m.chat.id, "‚ùó ‘≥÷Ä’•÷Ñ ’°’æ’•’¨’´ ’¥’°’∂÷Ä ’∞’°’Ω÷Å’• (’°’º’∂’æ’°’¶’∂ 5 ’∂’∑’°’∂)÷â")
            return
        order["address"] = txt
        st["step"] = "comment"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("‚Äî")
        kb.add(BTN_BACK_MAIN)
        bot.send_message(m.chat.id, "üìù ‘º÷Ä’°÷Å’∏÷Ç÷Å’´’π ’¥’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ (’Ø’°’¥ ’£÷Ä’•÷Ñ ¬´‚Äî¬ª, ’•’©’• ’π’Ø’°)÷â", reply_markup=kb)
        return

    # STEP: comment (final)
    if step == "comment":
        order["comment"] = "" if (m.text or "").strip() in {"", "‚Äî", "-"} else (m.text or "").strip()
        order["status"] = "Pending"
        order["created_at"] = datetime.utcnow().isoformat()

        # ’∫’°’∞’∫’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∫’°’ø’æ’•÷Ä’® (demo)
        ORDERS.append(order)

        # ’¥’°÷Ñ÷Ä’∏÷Ç’¥ ’•’∂÷Ñ state-’® ÷á ’¶’°’¥’¢’µ’∏÷Ç’≤’®
        CART[uid].clear()
        CHECKOUT_STATE.pop(uid, None)

        bot.send_message(
            m.chat.id,
            f"‚úÖ ’ä’°’ø’æ’•÷Ä’® ’£÷Ä’°’∂÷Å’æ’•÷Å÷â ’Ñ’•÷Ä ÷Ö’∫’•÷Ä’°’ø’∏÷Ä’® ’∑’∏÷Ç’ø’∏’æ ’Ø’Ø’°’∫’æ’´÷â\n’ä’°’ø’æ’•÷Ä’´ ID: {order['order_id']}",
            reply_markup=types.ReplyKeyboardRemove()
        )
        # ‚¨áÔ∏è ‘±’æ’ø’∏’¥’°’ø ’¢’°÷Å’∏÷Ç’¥ ’•’∂÷Ñ ‘≥‘º‘Ω‘±’é’à’ê ’Ñ‘µ’Ü’Ö’à÷Ç
        show_main_menu(m.chat.id)
        return


@bot.message_handler(func=lambda m: m.text == BTN_BACK_MAIN)
def back_to_main(m: types.Message):
    CHECKOUT_STATE.pop(m.from_user.id, None)
    show_main_menu(m.chat.id, "’é’•÷Ä’°’§’°÷Ä’±’°÷Ñ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç÷â")


# ===== CART HANDLER =====
def _cart_text(uid: int) -> str:
    if not CART[uid]:
        return "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß÷â"
    out = ["’Å’•÷Ä ’¶’°’¥’¢’µ’∏÷Ç’≤’®:"]
    total = 0
    for code, qty in CART[uid].items():
        p = PRODUCTS[code]
        line = f"‚Ä¢ {p['title']} ({code}) √ó {qty} ‚Äì {p['price']*qty}÷è"
        out.append(line)
        total += p['price'] * qty
    out.append(f"\n‘∏’∂’§’°’¥’•’∂’®’ù {total}÷è")
    return "\n".join(out)


@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("cart:"))
def cart_callbacks(c: types.CallbackQuery):
    uid = c.from_user.id
    parts = c.data.split(":")
    action = parts[1]
    code = parts[2] if len(parts) > 2 else None

    if action == "add" and code:
        CART[uid][code] = CART[uid].get(code, 0) + 1
        bot.answer_callback_query(c.id, "‘±’æ’•’¨’°÷Å’æ’•÷Å ’¶’°’¥’¢’µ’∏÷Ç’≤’∏÷Ç’¥ ‚úÖ")

    elif action == "inc" and code:
        st = PRODUCTS[code].get("stock")
        new_q = CART[uid].get(code, 0) + 1
        if isinstance(st, int) and new_q > st:
            bot.answer_callback_query(c.id, "’é’•÷Ä’ª’°’Ω’°’∞’¥’°’∂’®’ù ’®’Ω’ø ’∫’°’∞’•’Ω’ø’´")
            return
        CART[uid][code] = new_q
        bot.answer_callback_query(c.id)

    elif action == "dec" and code:
        q = CART[uid].get(code, 0)
        if q <= 1:
            CART[uid].pop(code, None)
        else:
            CART[uid][code] = q - 1
        bot.answer_callback_query(c.id)

    elif action == "rm" and code:
        CART[uid].pop(code, None)
        bot.answer_callback_query(c.id)

    elif action == "clear":
        CART[uid].clear()
        bot.answer_callback_query(c.id)

    # show cart again
    if action in ("show", "add", "inc", "dec", "rm", "clear"):
        kb = types.InlineKeyboardMarkup()
        for code, qty in list(CART[uid].items())[:6]:
            title = PRODUCTS[code]["title"]
            kb.row(types.InlineKeyboardButton(f"üõí {title} ({qty})", callback_data="noop"))
            kb.row(
                types.InlineKeyboardButton("‚ûñ", callback_data=f"cart:dec:{code}"),
                types.InlineKeyboardButton("‚ûï", callback_data=f"cart:inc:{code}"),
                types.InlineKeyboardButton("üóë", callback_data=f"cart:rm:{code}"),
            )
        kb.row(
            types.InlineKeyboardButton("‚ùå ’Ñ’°÷Ñ÷Ä’•’¨", callback_data="cart:clear"),
            types.InlineKeyboardButton("‚úÖ ’ä’°’ø’æ’´÷Ä’•’¨", callback_data="checkout:start"),
        )
        bot.send_message(c.message.chat.id, _cart_text(uid), reply_markup=kb, parse_mode="Markdown")

### END PART 2/8
### PART 3/8 START

@bot.callback_query_handler(func=lambda c: c.data == "checkout:start")
def checkout_start(c: types.CallbackQuery):
    uid = c.from_user.id
    if not CART[uid]:
        bot.answer_callback_query(c.id, "‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß")
        return

    ok, code, st = _check_stock(uid)
    if not ok:
        bot.answer_callback_query(c.id, "’ä’°’∞’•’Ω’ø’∏÷Ç’¥ ’¢’°’æ’°÷Ä’°÷Ä ÷Ñ’°’∂’°’Ø ’π’Ø’°")
        bot.send_message(c.message.chat.id, f"‚ö†Ô∏è {PRODUCTS[code]['title']} ‚Äî ’∞’°’Ω’°’∂’•’¨’´’ù {st} ’∞’°’ø")
        return

    order_id = _order_id()
    CHECKOUT_STATE[uid] = {
        "step": "name",
        "order": {
            "order_id": order_id,
            "user_id": uid,
            "username": c.from_user.username,
            "fullname": "",
            "phone": "",
            "country": "",
            "city": "",
            "address": "",
            "comment": "",
            "items": [{"code": code, "qty": qty} for code, qty in CART[uid].items()],
            "total": _cart_total(uid),
            "status": "Draft",
            "payment": {"method": "", "amount": 0, "tx": "", "state": "Pending"},
            "created_at": datetime.utcnow().isoformat()
        }
    }
    bot.answer_callback_query(c.id)
    bot.send_message(c.message.chat.id, f"üßæ ’ä’°’ø’æ’•÷Ä {order_id}\n‘≥÷Ä’•÷Ñ ’±’•÷Ä **‘±’∂’∏÷Ç’∂ ‘±’¶’£’°’∂’∏÷Ç’∂**:")


# ===== PRODUCT SHOW =====
def show_product(call: types.CallbackQuery, code: str):
    p = PRODUCTS[code]
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data=f"cart:add:{code}"))
    kb.add(types.InlineKeyboardButton("üõí ‘¥’´’ø’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data="cart:show"))
    kb.add(
        types.InlineKeyboardButton("‚¨Ö ’é’•÷Ä’°’§’°’º’∂’°’¨ ’¢’°’™’´’∂", callback_data="back:category"),
        types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="back:main")
    )
    caption = (
        f"{p['title']}\n\n"
        f"’Ä’´’∂ ’£’´’∂ ‚Äî {p['old_price']}÷è ({p['discount']}%)\n"
        f"’Ü’∏÷Ä ’£’´’∂ ‚Äî {p['price']}÷è\n"
        f"’é’°’≥’°’º’æ’°’Æ’ù {p['sold']} ’∞’°’ø\n"
        f"‘ø’∏’§’ù {code}"
    )
    bot.send_photo(call.message.chat.id, open(p["img"], "rb"), caption=caption, reply_markup=kb)

### END PART 3/8
### PART 4/8 START

# ===== CART HANDLER =====
@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("cart:"))
def cart_callbacks(c: types.CallbackQuery):
    uid = c.from_user.id
    parts = c.data.split(":")
    action = parts[1]
    code = parts[2] if len(parts) > 2 else None

    if action == "add" and code:
        CART[uid][code] = CART[uid].get(code, 0) + 1
        bot.answer_callback_query(c.id, "‘±’æ’•’¨’°÷Å’æ’•÷Å ’¶’°’¥’¢’µ’∏÷Ç’≤’∏÷Ç’¥ ‚úÖ")

    elif action == "inc" and code:
        st = PRODUCTS[code].get("stock")
        new_q = CART[uid].get(code, 0) + 1
        if isinstance(st, int) and new_q > st:
            bot.answer_callback_query(c.id, "’é’•÷Ä’ª’°’Ω’°’∞’¥’°’∂’®’ù ’®’Ω’ø ’∫’°’∞’•’Ω’ø’´")
            return
        CART[uid][code] = new_q

    elif action == "dec" and code:
        q = CART[uid].get(code, 0)
        if q <= 1:
            CART[uid].pop(code, None)
        else:
            CART[uid][code] = q - 1

    elif action == "rm" and code:
        CART[uid].pop(code, None)

    elif action == "clear":
        CART[uid].clear()

    # show cart
    if action in ("show", "add", "inc", "dec", "rm", "clear"):
        kb = types.InlineKeyboardMarkup()
        for code, qty in list(CART[uid].items())[:6]:
            title = PRODUCTS[code]["title"]
            kb.row(types.InlineKeyboardButton(f"üõí {title} ({qty})", callback_data="noop"))
            kb.row(
                types.InlineKeyboardButton("‚ûñ", callback_data=f"cart:dec:{code}"),
                types.InlineKeyboardButton("‚ûï", callback_data=f"cart:inc:{code}"),
                types.InlineKeyboardButton("üóë", callback_data=f"cart:rm:{code}"),
            )
        if CART[uid]:
            kb.row(
                types.InlineKeyboardButton("‚ùå ’Ñ’°÷Ñ÷Ä’•’¨", callback_data="cart:clear"),
                types.InlineKeyboardButton("‚úÖ ’ä’°’ø’æ’´÷Ä’•’¨", callback_data="checkout:start"),
            )
        kb.row(types.InlineKeyboardButton("‚¨Ö ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="back:main"))
        bot.send_message(c.message.chat.id, _cart_text(uid), reply_markup=kb, parse_mode="Markdown")
        bot.answer_callback_query(c.id)
    else:
        bot.answer_callback_query(c.id)


def _cart_text(uid: int) -> str:
    if not CART[uid]:
        return "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß÷â"
    lines = ["’Å’•÷Ä ’¶’°’¥’¢’µ’∏÷Ç’≤’®:"]
    total = 0
    for code, qty in CART[uid].items():
        p = PRODUCTS[code]
        lines.append(f"‚Ä¢ {p['title']} √ó {qty} ‚Äî {p['price']}÷è")
        total += p['price'] * qty
    lines.append(f"\n‘∏’∂’§’°’¥’•’∂’®’ù {total}÷è")
    return "\n".join(lines)

### END PART 4/8
### PART 5/8 START

# ===== CHECKOUT START =====
@bot.callback_query_handler(func=lambda c: c.data == "checkout:start")
def checkout_start(c: types.CallbackQuery):
    uid = c.from_user.id
    if not CART[uid]:
        bot.answer_callback_query(c.id, "‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß")
        return

    ok, code, st = _check_stock(uid)
    if not ok:
        bot.answer_callback_query(c.id, "’ä’°’∞’•’Ω’ø’∏÷Ç’¥ ’¢’°’æ’°÷Ä’°÷Ä ÷Ñ’°’∂’°’Ø ’π’Ø’°")
        bot.send_message(c.message.chat.id, f"‚ö†Ô∏è {PRODUCTS[code]['title']} ‚Äî ’∞’°’Ω’°’∂’•’¨’´’ù {st} ’∞’°’ø")
        return

    order_id = _order_id()
    CHECKOUT_STATE[uid] = {
        "step": "name",
        "order": {
            "order_id": order_id,
            "user_id": uid,
            "username": c.from_user.username,
            "fullname": "",
            "phone": "",
            "country": "",
            "city": "",
            "address": "",
            "comment": "",
            "items": [{"code": code, "qty": qty} for code, qty in CART[uid].items()],
            "total": _cart_total(uid),
            "status": "Draft",
            "payment": {"method": "", "amount": 0, "tx": "", "state": "Pending"},
            "created_at": datetime.utcnow().isoformat()
        }
    }
    bot.answer_callback_query(c.id)
    bot.send_message(c.message.chat.id, f"üßæ ’ä’°’ø’æ’•÷Ä {order_id}\n‘≥÷Ä’•÷Ñ ’±’•÷Ä **‘±’∂’∏÷Ç’∂ ‘±’¶’£’°’∂’∏÷Ç’∂**:")

### END PART 5/8
### PART 6/8 START

@bot.message_handler(content_types=['text', 'contact'], func=lambda m: m.from_user.id in CHECKOUT_STATE)
def checkout_flow(m: types.Message):
    uid = m.from_user.id
    st = CHECKOUT_STATE.get(uid)
    if not st:
        return
    step  = st["step"]
    order = st["order"]

    # universal back
    if m.text == BTN_BACK_MAIN:
        CHECKOUT_STATE.pop(uid, None)
        show_main_menu(m.chat.id, "’é’•÷Ä’°’§’°÷Ä’±’°÷Ñ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç÷â")
        return

    # STEP: name
    if step == "name":
        txt = (m.text or "").strip()
        if not NAME_RE.match(txt):
            bot.send_message(m.chat.id, "‚ùó ‘±’∂’∏÷Ç’∂/‘±’¶’£’°’∂’∏÷Ç’∂’ù ’¥’´’°’µ’∂ ’ø’°’º’•÷Ä’∏’æ (3‚Äì60 ’∂’∑’°’∂). ‘ø÷Ä’Ø’´’∂ ÷É’∏÷Ä’±’•÷Ñ÷â")
            return
        order["fullname"] = txt
        st["step"] = "phone"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(types.KeyboardButton("üì± ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’Ø’∏’∂’ø’°’Ø’ø", request_contact=True))
        kb.add(BTN_BACK_MAIN)
        bot.send_message(m.chat.id, "üìû ‘≥÷Ä’•÷Ñ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® (+374xxxxxxxx ’Ø’°’¥ 0xxxxxxxx) ’Ø’°’¥ ’Ω’•’≤’¥’•÷Ñ ¬´üì± ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’Ø’∏’∂’ø’°’Ø’ø¬ª.", reply_markup=kb)
        return

    # STEP: phone
    if step == "phone":
        phone = None
        if m.contact and m.contact.phone_number:
            phone = m.contact.phone_number.replace(" ", "")
            if not phone.startswith("+"):
                phone = "+" + phone
        else:
            phone = (m.text or "").replace(" ", "")
        if not PHONE_RE.match(phone):
            bot.send_message(m.chat.id, "‚ùó ’ç’≠’°’¨ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä. ÷Ö÷Ä’´’∂’°’Ø’ù +374441112233 ’Ø’°’¥ 0441112233÷â ‘ø÷Ä’Ø’´’∂ ’£÷Ä’•÷Ñ÷â")
            return
        order["phone"] = phone
        st["step"] = "country"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for c in COUNTRIES:
            kb.add(c)
        kb.add(BTN_BACK_MAIN)
        bot.send_message(m.chat.id, "üåç ‘∏’∂’ø÷Ä’•÷Ñ ’•÷Ä’Ø’´÷Ä’®’ù", reply_markup=kb)
        return

    # STEP: country
    if step == "country":
        if m.text not in COUNTRIES:
            bot.send_message(m.chat.id, "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’°’º’°’ª’°÷Ä’Ø’æ’∏’≤ ’Ø’∏’≥’°’Ø’∂’•÷Ä’´÷Å÷â")
            return
        order["country"] = m.text
        st["step"] = "city"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for i in range(0, len(CITIES), 2):
            row = [types.KeyboardButton(x) for x in CITIES[i:i+2]]
            kb.row(*row)
        kb.add(BTN_BACK_MAIN)
        bot.send_message(m.chat.id, "üèôÔ∏è ‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’°’≤’°÷Ñ’®’ù", reply_markup=kb)
        return

    # STEP: city
    if step == "city":
        if m.text not in CITIES:
            bot.send_message(m.chat.id, "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’°’º’°’ª’°÷Ä’Ø’æ’∏’≤ ÷Ñ’°’≤’°÷Ñ’∂’•÷Ä’´÷Å÷â")
            return
        order["city"] = m.text
        st["step"] = "address"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(BTN_BACK_MAIN)
        bot.send_message(m.chat.id, "üè° ‘≥÷Ä’•÷Ñ ’∞’°’Ω÷Å’•’∂ (÷É’∏’≤’∏÷Å, ’ø’∏÷Ç’∂, ’¥’∏÷Ç’ø÷Ñ, ’¢’∂’°’Ø’°÷Ä’°’∂)‚Ä§", reply_markup=kb)
        return

    # STEP: address
    if step == "address":
        txt = (m.text or "").strip()
        if len(txt) < 5:
            bot.send_message(m.chat.id, "‚ùó ‘≥÷Ä’•÷Ñ ’°’æ’•’¨’´ ’¥’°’∂÷Ä ’∞’°’Ω÷Å’• (’°’º’∂’æ’°’¶’∂ 5 ’∂’∑’°’∂)÷â")
            return
        order["address"] = txt
        st["step"] = "comment"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("‚Äî")
        kb.add(BTN_BACK_MAIN)
        bot.send_message(m.chat.id, "üìù ‘º÷Ä’°÷Å’∏÷Ç÷Å’´’π ’¥’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ (’Ø’°’¥ ’£÷Ä’•÷Ñ ¬´‚Äî¬ª, ’•’©’• ’π’Ø’°)÷â", reply_markup=kb)
        return

    # STEP: comment (final)
    if step == "comment":
        order["comment"] = "" if (m.text or "").strip() in {"", "‚Äî", "-"} else (m.text or "").strip()
        order["status"] = "Pending"
        order["created_at"] = datetime.utcnow().isoformat()

        # ’∫’°’∞’∫’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∫’°’ø’æ’•÷Ä’® (demo)
        ORDERS.append(order)

        # ’¥’°÷Ñ÷Ä’∏÷Ç’¥ ’•’∂÷Ñ state-’® ÷á ’¶’°’¥’¢’µ’∏÷Ç’≤’®
        CART[uid].clear()
        CHECKOUT_STATE.pop(uid, None)

        bot.send_message(
            m.chat.id,
            f"‚úÖ ’ä’°’ø’æ’•÷Ä’® ’£÷Ä’°’∂÷Å’æ’•÷Å÷â ’Ñ’•÷Ä ÷Ö’∫’•÷Ä’°’ø’∏÷Ä’® ’∑’∏÷Ç’ø’∏’æ ’Ø’Ø’°’∫’æ’´÷â\n’ä’°’ø’æ’•÷Ä’´ ID: {order['order_id']}",
            reply_markup=types.ReplyKeyboardRemove()
        )
        # ‚¨áÔ∏è ‘±’æ’ø’∏’¥’°’ø ’¢’°÷Å’∏÷Ç’¥ ’•’∂÷Ñ ‘≥‘º‘Ω‘±’é’à’ê ’Ñ‘µ’Ü’Ö’à÷Ç
        show_main_menu(m.chat.id)
        return

### END PART 6/8
### PART 7/8 START

# ===== MAIN MENU HANDLERS =====
@bot.message_handler(func=lambda m: m.text == "üõç ‘Ω’°’∂’∏÷Ç’©")
def shop_menu(m: types.Message):
    kb = types.InlineKeyboardMarkup()
    for cat in CATEGORIES:
        kb.add(types.InlineKeyboardButton(cat["title"], callback_data=f"cat:{cat['id']}"))
    bot.send_message(m.chat.id, "üè¨ ‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂’® üëá", reply_markup=kb)


@bot.message_handler(func=lambda m: m.text == "üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä")
def exchanges(m: types.Message):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üåê PI ‚ûù USDT", callback_data="ex:pi"))
    kb.add(types.InlineKeyboardButton("üí≥ FTN ‚ûù AMD", callback_data="ex:ftn"))
    kb.add(types.InlineKeyboardButton("üí† AliPay ’¨’´÷Å÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥", callback_data="ex:alipay"))
    kb.add(types.InlineKeyboardButton("‚¨Ö ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="back:main"))
    bot.send_message(m.chat.id, "‘∏’∂’ø÷Ä’•÷Ñ ÷É’∏’≠’°÷Ä’Ø’¥’°’∂ ’ø’•’Ω’°’Ø’® üëá", reply_markup=kb)


@bot.message_handler(func=lambda m: m.text == "üí° ‘Ω’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä")
def good_thoughts(m: types.Message):
    kb = types.InlineKeyboardMarkup()
    for idx, q in enumerate(THOUGHTS, start=1):
        kb.add(types.InlineKeyboardButton(f"{idx}. {q[:20]}...", callback_data=f"thought:{idx}"))
    kb.add(types.InlineKeyboardButton("‚¨Ö ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="back:main"))
    bot.send_message(m.chat.id, "‚ú® ‘Ω’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä ’¢’°’™’´’∂", reply_markup=kb)


@bot.message_handler(func=lambda m: m.text == "üìà ’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä")
def daily_rates(m: types.Message):
    try:
        usd = get_rate("USD")
        rub = get_rate("RUB")
        txt = f"üìä ’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä\n\nüíµ USD = {usd}÷è\nüí¥ RUB = {rub}÷è"
    except:
        txt = "’â’∞’°’ª’∏’≤’æ’•÷Å ’Ω’ø’°’∂’°’¨ ÷Ö÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä’®÷â"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨Ö ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="back:main"))
    bot.send_message(m.chat.id, txt, reply_markup=kb)


@bot.message_handler(func=lambda m: m.text == "üì¢ ‘≤’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä")
def partners(m: types.Message):
    txt = "üì¢ ’Ñ’•÷Ä ’¢’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä’®:\n\n1. Company A\n2. Company B\n3. Company C"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨Ö ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="back:main"))
    bot.send_message(m.chat.id, txt, reply_markup=kb)


@bot.message_handler(func=lambda m: m.text == "üë• ’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´")
def invite_friends(m: types.Message):
    user_id = m.from_user.id
    invite_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨Ö ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="back:main"))
    bot.send_message(m.chat.id, f"üë• ’Ä÷Ä’°’æ’´÷Ä’•÷Ñ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´’∂ ’°’µ’Ω ’∞’≤’∏÷Ç’¥’∏’æ:\n{invite_link}", reply_markup=kb)


# ===== BACK TO MAIN MENU CALLBACK =====
@bot.callback_query_handler(func=lambda c: c.data == "back:main")
def back_main_cb(c: types.CallbackQuery):
    bot.answer_callback_query(c.id)
    show_main_menu(c.message.chat.id)

### END PART 7/8
### PART 8/8 START

# ===== SAMPLE PRODUCTS =====
PRODUCTS = {
    "BA100810": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì ‘æ’°’≤’Ø’°’µ’´’∂ ’§’´’¶’°’µ’∂",
        "old_price": 2560,
        "price": 1690,
        "discount": -34,
        "sold": 320,
        "stock": 50,
        "img": "media/products/BA100810.jpg"
    },
    "BA100811": {
        "title": "üå∏ ‘≥’∏÷Ä’£ ‚Äì ‘π’´’©’•’º’∂’•÷Ä’∏’æ ’§’´’¶’°’µ’∂",
        "old_price": 2560,
        "price": 1690,
        "discount": -34,
        "sold": 250,
        "stock": 30,
        "img": "media/products/BA100811.jpg"
    }
    # ... ’°’µ’Ω’ø’•’≤ ’Ø’°÷Ä’∏’≤ ’•’Ω ’°’æ’•’¨’°÷Å’∂’•’¨ ’¥’∂’°÷Å’°’Æ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’®
}

# ===== SAMPLE CATEGORIES =====
CATEGORIES = [
    {"id": 1, "title": "‘ø’•’∂÷Å’°’≤’°’µ’´’∂ ’∫’°÷Ä’°’£’°’∂’•÷Ä"},
    {"id": 2, "title": "‘Ω’∏’∞’°’∂’∏÷Å’°’µ’´’∂ ’ø’•’≠’∂’´’Ø’°"},
    {"id": 3, "title": "‘±÷Ñ’Ω’•’Ω’∏÷Ç’°÷Ä’∂’•÷Ä"},
]

# ===== GOOD THOUGHTS =====
THOUGHTS = [
    "‘±’¥’•’∂ ÷Ö÷Ä ’¥’´ ’∂’∏÷Ä ’∞’∂’°÷Ä’°’æ’∏÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’ß÷â",
    "‘±÷Ä÷á’® ’¥’´’∑’ø ’∂’∏÷Ä’´÷Å ’Æ’°’£’∏÷Ç’¥ ’ß÷â",
    "’Ä’°’¥’¢’•÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’∂ ’¢’°’∂’°’¨’´’∂ ’ß÷â",
    "’î’°’ª’∏÷Ç’©’µ’∏÷Ç’∂’® ’¥’´’∑’ø ’æ’°÷Ä’±’°’ø÷Ä’æ’∏÷Ç’¥ ’ß÷â",
    "’à÷Ç’™’•’≤ ’¥’°÷Ä’§’´’Ø ’π’•’∂ ’∞’°’∂’±’∂’æ’∏÷Ç’¥÷â",
    "‘ø’µ’°’∂÷Ñ’® ’∂’æ’•÷Ä ’ß’ù ’æ’°’µ’•’¨’´÷Ä ’°’µ’∂÷â",
    "’Ñ’•’Æ ’∞’°’ª’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ’£’°’¨’´’Ω ’•’∂ ÷É’∏÷Ñ÷Ä ÷Ñ’°’µ’¨’•÷Ä’´÷Å÷â",
    "‘∫’∫’´’ø’® ’∞’∏’£’∏÷Ç ’§’•’≤’°’¥’´’ª’∏÷Å’∂ ’ß÷â",
    "’ç’•÷Ä ’ø’°÷Ä’°’Æ’´÷Ä, ’∏’π ’©’• ’°’ø’•’¨’∏÷Ç’©’µ’∏÷Ç’∂÷â",
    "‘µ÷Ä’ª’°’∂’Ø’∏÷Ç’©’µ’∏÷Ç’∂’® ’∂’•÷Ä’Ω’´÷Å ’ß ’Ω’Ø’Ω’æ’∏÷Ç’¥÷â"
]

# ===== RATES FUNCTION =====
def get_rate(symbol: str):
    if symbol == "USD":
        return 390
    if symbol == "RUB":
        return 4.2
    return 0

# ===== BOT START / HELP =====
@bot.message_handler(commands=['start', 'help'])
def send_welcome(m: types.Message):
    kb = main_menu_kb()
    bot.send_message(
        m.chat.id,
        "üê∞ ‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø BabyAngels üõçÔ∏è\n\n"
        "‘¥’∏÷Ç÷Ñ ’°÷Ä’§’•’∂ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’≥’°’≠’∏÷Ä’§’∂ ’•÷Ñ ‚ù§Ô∏è\n\n"
        "‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂’® üëá",
        reply_markup=kb
    )


# ===== POLLING START =====
print("ü§ñ Bot is running 24/7 ...")
bot.infinity_polling(timeout=60, long_polling_timeout=60)

### END PART 8/8
