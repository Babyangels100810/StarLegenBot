# =========================
# StarLegenBot ‚Äî main.py
# PART 1/3  (paste at the very TOP of your file)
# =========================

import os
import re
import json
import time
import random
import threading
import traceback
from datetime import datetime
from collections import defaultdict

import requests
from telebot import TeleBot, types
from telebot import apihelper
from telebot.types import InputMediaPhoto
from dotenv import load_dotenv, find_dotenv

# ---- Telegram API host (’∫’°’∞’∏÷Ç’¥ ’•’∂÷Ñ default) ----
apihelper.API_URL = "https://api.telegram.org/bot{0}/{1}"

# ---- .env ----
load_dotenv()
ENV_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or ""
ADMIN_ID = int(os.getenv("ADMIN_ID", "6822052289"))

print("dotenv path:", find_dotenv())
print("BOT_TOKEN raw:", repr(ENV_TOKEN))
print("BOT_TOKEN len:", len(ENV_TOKEN))

# ------------------- FILES / DIRS -------------------
DATA_DIR   = "data"
MEDIA_DIR  = "media"
SET_FILE   = os.path.join(DATA_DIR, "settings.json")
USERS_FILE = os.path.join(DATA_DIR, "users.json")

THOUGHTS_FILE = os.path.join(DATA_DIR, "thoughts.json")
PARTNERS_FILE = os.path.join(DATA_DIR, "partners.json")
ORDERS_FILE   = os.path.join(DATA_DIR, "orders.json")
RATES_FILE    = os.path.join(DATA_DIR, "rates.json")

def ensure_dirs():
    os.makedirs(DATA_DIR, exist_ok=True)
    os.makedirs(MEDIA_DIR, exist_ok=True)
    os.makedirs(os.path.join(MEDIA_DIR, "products"), exist_ok=True)
    os.makedirs(os.path.join(MEDIA_DIR, "exchange"), exist_ok=True)

ensure_dirs()

# ------------------- JSON helpers -------------------
def load_json(path, default):
    try:
        if not os.path.exists(path):
            with open(path, "w", encoding="utf-8") as f:
                json.dump(default, f, ensure_ascii=False, indent=2)
            return default
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        print("load_json ERROR", path)
        print(traceback.format_exc())
        return default

def save_json(path, data):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception:
        print("save_json ERROR", path)
        print(traceback.format_exc())
        return False

# ------------------- RUNTIME STORE -------------------
SETTINGS = load_json(SET_FILE, {
    "bot_token": ENV_TOKEN or "PASTE_YOUR_BOT_TOKEN_HERE",
    "admin_id": ADMIN_ID,
    "customer_counter": 1007,
    "bot_username": "YourBotUsernameHere",
})

# allow settings override
if isinstance(SETTINGS.get("admin_id"), int):
    ADMIN_ID = SETTINGS["admin_id"]

USERS = load_json(USERS_FILE, {})        # user_id -> {referrer_id, ...}
GOOD_THOUGHTS = load_json(THOUGHTS_FILE, [])
PARTNERS = load_json(PARTNERS_FILE, [])  # text entries
ORDERS = load_json(ORDERS_FILE, [])

def persist_settings():
    save_json(SET_FILE, SETTINGS)

def persist_users():
    save_json(USERS_FILE, USERS)

def persist_thoughts():
    save_json(THOUGHTS_FILE, GOOD_THOUGHTS)

def persist_partners():
    save_json(PARTNERS_FILE, PARTNERS)

def persist_orders():
    save_json(ORDERS_FILE, ORDERS)

# ------------------- BUTTON LABELS -------------------
BTN_SHOP      = "üõç ‘Ω’°’∂’∏÷Ç’©"
BTN_CART      = "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤"
BTN_EXCHANGE  = "üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä"
BTN_THOUGHTS  = "üí° ‘Ω’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä"
BTN_RATES     = "üìà ’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä"
BTN_PROFILE   = "üßç ‘ª’¥ ’ß’ª’®"
BTN_FEEDBACK  = "üí¨ ’Ä’•’ø’°’§’°÷Ä’± ’Ø’°’∫"
BTN_PARTNERS  = "üì¢ ‘≤’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä"
BTN_SEARCH    = "üîç ‘±’∫÷Ä’°’∂÷Ñ’´ ’∏÷Ä’∏’∂’∏÷Ç’¥"
BTN_INVITE    = "üë• ’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´"
BTN_HOME      = "üè† ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"

# ------------------- BOT INIT -------------------
BOT_TOKEN = SETTINGS.get("bot_token") or ENV_TOKEN
if not BOT_TOKEN:
    raise RuntimeError("BOT TOKEN is empty")

bot = TeleBot(BOT_TOKEN, parse_mode=None)

# ------------------- UTILS -------------------
def ts() -> int:
    return int(time.time())

def bot_link_with_ref(user_id: int) -> str:
    uname = SETTINGS.get("bot_username") or "YourBotUsernameHere"
    return f"https://t.me/{uname}?start={user_id}"

def send_home_menu(chat_id: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_SHOP, BTN_CART)
    kb.add(BTN_EXCHANGE, BTN_THOUGHTS)   # ‚Üê ’≥’´’∑’ø ’°’∂’∏÷Ç’∂’®
    kb.add(BTN_RATES, BTN_PROFILE)       # ‚Üê ’≥’´’∑’ø ’°’∂’∏÷Ç’∂’®
    kb.add(BTN_FEEDBACK, BTN_SEARCH)
    kb.add(BTN_HOME)
    bot.send_message(chat_id, "üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", reply_markup=kb)


def welcome_text(customer_no: int) -> str:
    return (
        "üê∞üå∏ <b>‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø StarLegen</b> üõç‚ú®\n\n"
        "üíñ ’á’∂’∏÷Ä’∞’°’Ø’°’¨ ’•’∂÷Ñ, ’∏÷Ä ’¥’´’°÷Å’•’¨ ’•÷Ñ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’¥’°’µ’∂÷Ñ’´’∂ ‚ù§Ô∏è\n"
        f"‘¥’∏÷Ç÷Ñ ’°’µ’™’¥ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’≥’°’≠’∏÷Ä’§’∂ ’•÷Ñ ‚Ññ{customer_no} ‚ú®\n\n"
        "’Ñ’•÷Ä ’≠’°’∂’∏÷Ç’©’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’£’ø’∂’•’¨ ’°’¥’•’∂ ÷Ö÷Ä ÷Ö’£’ø’°’Ø’°÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’´ ’£’•’≤’•÷Å’´’Ø ’¨’°÷Å’°’Ø’°’¶’¥ ’£’∂’•÷Ä’®÷â\n\n"
        "üéÅ <b>‘±’æ’•’¨’´ ’∑’°’ø’´’ù</b> ’°’º÷Å’°’∂÷Å ’£’∂’¥’°’∂ ’§’•’∫÷Ñ’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ÷Ö’£’ø’æ’•’¨ ’¥’´’∂’π÷á 10% ’¶’•’≤’π ’Ø’∏÷Ç’∫’∏’∂’∂’•÷Ä’´ ’∞’°’¥’°’Ø’°÷Ä’£’´÷Å÷â\n\n"
        "üì¶ ‘ª’û’∂’π ’Ø’£’ø’∂’•÷Ñ ’°’µ’Ω’ø’•’≤‚Ä§\n"
        "‚Ä¢ ‘∫’°’¥’°’∂’°’Ø’°’Ø’´÷Å ÷á ÷Ö’£’ø’°’Ø’°÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä ’°’¥’•’∂ ÷Ö÷Ä’æ’° ’∞’°’¥’°÷Ä\n"
        "‚Ä¢ ‘º’°’æ’°’£’∏÷Ç’µ’∂ ÷á ’ø’°÷Ä’¢’•÷Ä’°’Ø’æ’°’Æ Telegram ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä\n"
        "‚Ä¢ ’Ä’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ÷á ’°÷Ä’°’£ ’°’º’°÷Ñ’∏÷Ç’¥ üöö\n\n"
        "üìä <b>’ì’∏’≠’°÷Ä’™’•÷Ñ’´ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä</b>\n"
        "‚Ä¢ PI ‚ûî USDT (’∑’∏÷Ç’Ø’°’µ’°’Ø’°’∂ ’Ø’∏÷Ç÷Ä’Ω, +20% ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥)\n"
        "‚Ä¢ FTN ‚ûî AMD (’¥’´’°’µ’∂ 10% ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥)\n"
        "‚Ä¢ Alipay ’¨’´÷Å÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥ (1 CNY = 58÷è)\n\n"
        "‚ú® ‘±’æ’•’¨’´’∂ ’°÷Ä’§’•’∂ ’∫’°’ø÷Ä’°’Ω’ø’æ’°’Æ ’∏÷Ç ÷Ö’£’ø’æ’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’®’∂’ø÷Ä’•÷Ñ ’∂’•÷Ä÷Ñ÷á’´ ’¢’°’™’´’∂’∂’•÷Ä’® üëá"
    )

# ------------------- /start -------------------
@bot.message_handler(commands=["start"])
def on_start(m: types.Message):
    # only private
    if getattr(m.chat, "type", "") != "private":
        return

    uid = m.from_user.id

    # capture referral
    try:
        parts = (m.text or "").split(maxsplit=1)
        if len(parts) == 2 and parts[1].isdigit():
            ref = int(parts[1])
            if ref != uid:
                rec = USERS.setdefault(str(uid), {})
                rec.setdefault("referrer_id", ref)
                persist_users()
    except Exception:
        pass

    # customer counter
    try:
        SETTINGS["customer_counter"] = int(SETTINGS.get("customer_counter", 1007)) + 1
    except Exception:
        SETTINGS["customer_counter"] = 1008
    persist_settings()
    no = SETTINGS["customer_counter"]

    # bunny image (if exists)
    bunny = os.path.join(MEDIA_DIR, "bunny.jpg")
    if os.path.exists(bunny):
        try:
            with open(bunny, "rb") as ph:
                bot.send_photo(m.chat.id, ph)
        except Exception:
            pass

    bot.send_message(
        m.chat.id,
        welcome_text(no),
        reply_markup=build_main_menu(),
        parse_mode="HTML"
    )

# ------------------- 'üè† ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç' -------------------
@bot.message_handler(func=lambda m: m.text == BTN_HOME or m.text in ("/menu", "‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"))
def go_home(m: types.Message):
    bot.send_message(m.chat.id, "‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®", reply_markup=build_main_menu())

# ------------------- Invite -------------------
@bot.message_handler(func=lambda m: m.text == BTN_INVITE)
def invite_link(m: types.Message):
    link = bot_link_with_ref(m.from_user.id)
    bot.send_message(
        m.chat.id,
        f"üë• <b>‘ø’´’Ω’æ’•÷Ñ ’¢’∏’ø’∏’æ ÷á ’Ω’ø’°÷Å’•÷Ñ ’¢’∏’∂’∏÷Ç’Ω’∂’•÷Ä</b>\n\n’Å’•÷Ä ’∞’≤’∏÷Ç’¥’®’ù\n{link}",
        parse_mode="HTML"
    )

# ------------------- Thoughts (’≠’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä) -------------------
@bot.message_handler(func=lambda m: m.text == BTN_THOUGHTS)
def thoughts_menu(m: types.Message):
    if not GOOD_THOUGHTS:
        bot.send_message(m.chat.id, "‘±’µ’Ω ’∫’°’∞’´’∂ ’∞÷Ä’°’∫’°÷Ä’°’Ø’æ’°’Æ ’¥’ø÷Ñ’•÷Ä ’π’Ø’°’∂÷â")
        return
    text = "üí° <b>’é’•÷Ä’ª’´’∂ ’¥’ø÷Ñ’•÷Ä</b>\n\n" + "\n\n".join(GOOD_THOUGHTS[-5:])
    bot.send_message(m.chat.id, text, parse_mode="HTML")

# ------------------- Partners -------------------
@bot.message_handler(func=lambda m: m.text == BTN_PARTNERS)
def partners_list(m: types.Message):
    if not PARTNERS:
        bot.send_message(m.chat.id, "‘±’µ’Ω ’∫’°’∞’´’∂ ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä’´ ’∞’°’µ’ø’°÷Ä’°÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä ’π’Ø’°’∂÷â")
        return
    text = "üì¢ <b>‘≤’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä</b>\n\n" + "\n\n".join(PARTNERS[-5:])
    bot.send_message(m.chat.id, text, parse_mode="HTML")

# ------------------- Daily Rates (‘±’æ’ø’∏’¥’°’ø ’©’°÷Ä’¥’°÷Å’∏÷Ç’¥) -------------------
RATES_CACHE = {"rates": {}, "updated_at": None, "error": None}

def fetch_rates():
    try:
        url = "https://api.exchangerate.host/latest"
        symbols = ["USD", "EUR", "RUB", "GBP", "CNY"]
        r = requests.get(url, params={"base": "AMD", "symbols": ",".join(symbols)}, timeout=10)
        data = r.json()
        raw = (data or {}).get("rates", {})
        converted = {}
        for k, v in raw.items():
            if v:
                converted[k] = round(1.0 / v, 4)  # 1 FX = ? AMD
        RATES_CACHE["rates"] = converted
        RATES_CACHE["updated_at"] = datetime.utcnow().isoformat() + "Z"
        RATES_CACHE["error"] = None
        save_json(RATES_FILE, RATES_CACHE)
    except Exception as e:
        RATES_CACHE["error"] = str(e)

def rates_loop():
    while True:
        fetch_rates()
        time.sleep(600)  # 10 ÷Ä’∏’∫’•

# start background refresher
threading.Thread(target=rates_loop, daemon=True).start()
fetch_rates()

@bot.message_handler(func=lambda m: m.text == BTN_RATES)
def show_rates(m: types.Message):
    try:
        cache = load_json(RATES_FILE, RATES_CACHE)
    except Exception:
        cache = RATES_CACHE
    err = cache.get("error")
    rates = cache.get("rates", {})
    if err or not rates:
        bot.send_message(m.chat.id, "‚ùóÔ∏è ’â’∞’°’ª’∏’≤’æ’•÷Å ’Ω’ø’°’∂’°’¨ ’Ø’∏÷Ç÷Ä’Ω’•÷Ä’®, ÷É’∏÷Ä’±’•÷Ñ ÷Ñ’´’π ’∞’•’ø’∏÷â")
        return
    flags = {"USD":"üá∫üá∏","EUR":"üá™üá∫","RUB":"üá∑üá∫","GBP":"üá¨üáß","CNY":"üá®üá≥"}
    order = ["USD","EUR","RUB","GBP","CNY"]
    lines = ["üìà <b>’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä</b> (AMD)", ""]
    for ccy in order:
        if ccy in rates:
            lines.append(f"{flags.get(ccy,'')} 1 {ccy} = <b>{rates[ccy]}</b> AMD")
    lines.append("")
    lines.append(f"üïí ‘π’°÷Ä’¥’°÷Å’æ’•’¨ ’ß (UTC): {cache.get('updated_at','-')}")
    bot.send_message(m.chat.id, "\n".join(lines), parse_mode="HTML")

# ------------------- Exchange (stub menu) -------------------
@bot.message_handler(func=lambda m: m.text == BTN_EXCHANGE)
def exchange_menu(m: types.Message):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("PI ‚ûú USDT", callback_data="ex:pi"),
        types.InlineKeyboardButton("FTN ‚ûú AMD", callback_data="ex:ftn"),
    )
    kb.add(types.InlineKeyboardButton("Alipay ’¨’´÷Å÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥", callback_data="ex:ali"))
    bot.send_message(m.chat.id, "üí± ‘∏’∂’ø÷Ä’•÷Ñ ÷É’∏’≠’°÷Ä’Ø’¥’°’∂ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’® üëá", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("ex:"))
def on_exchange_cb(c: types.CallbackQuery):
    typ = c.data.split(":", 1)[1]
    if typ == "pi":
        text = ("üìå PI ‚ûú USDT\n"
                "’Ñ’•’∂÷Ñ ’Ø’°’ø’°÷Ä’∏÷Ç’¥ ’•’∂÷Ñ PI‚Äì’´÷Å USDT ÷É’∏’≠’°÷Ä’Ø’∏÷Ç’¥’ù ’∑’∏÷Ç’Ø’°’µ’°’Ø’°’∂ ’Ø’∏÷Ç÷Ä’Ω + ’Æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ ’æ’≥’°÷Ä÷â\n"
                "‘ø’°’∫’∂’æ’•÷Ñ ’°’§’¥’´’∂’´ ’∞’•’ø’ù ’¥’°’∂÷Ä’°’¥’°’Ω’∂’•÷Ä’´ ’∞’°’¥’°÷Ä÷â")
    elif typ == "ftn":
        text = ("üìå FTN ‚ûú AMD\n"
                "FTN-’® ÷É’∏’≠’°’∂÷Å’∏÷Ç’¥ ’•÷Ñ ’¥’•÷Ä ’∞’°’∑’æ’´’∂, ’Ω’ø’°’∂’∏÷Ç’¥ ’•÷Ñ AMD’ù 10% ’Ω’∫’°’Ω’°÷Ä’Ø’¥’°’∂ ’æ’≥’°÷Ä’∏’æ÷â")
    else:
        text = ("üìå Alipay ’¨’´÷Å÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥\n"
                "1 CNY = 58÷è (’ø’•’≤’•’Ø’°’ø’æ’°’Ø’°’∂), ’¥’°’∂÷Ä’°’¥’°’Ω’∂’•÷Ä’´ ’∞’°’¥’°÷Ä ’£÷Ä’•÷Ñ ’°’§’¥’´’∂’´’∂÷â")
    bot.answer_callback_query(c.id)
    bot.send_message(c.message.chat.id, text)

# ------------------- Shop (Categories) -------------------
@bot.message_handler(func=lambda m: m.text == BTN_SHOP)
def shop_menu(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚åö ’ç’¥’°÷Ä’© ’™’°’¥’°÷Å’∏÷Ç’µ÷Å’∂’•÷Ä", "üíª ’Ä’°’¥’°’Ø’°÷Ä’£’π’°’µ’´’∂ ’°÷Ñ’Ω’•’Ω’∏÷Ç’°÷Ä’∂’•÷Ä")
    kb.add("üöó ‘±’æ’ø’∏’¥’•÷Ñ’•’∂’°’µ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä", "üè† ‘ø’•’∂÷Å’°’≤’°’µ’´’∂ ’∫’°÷Ä’°’£’°’∂’•÷Ä")
    kb.add("üç≥ ‘Ω’∏’∞’°’∂’∏÷Å’°’µ’´’∂ ’ø’•’≠’∂’´’Ø’°", "üíÖ ‘Ω’∂’°’¥÷Ñ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä")
    kb.add("üö¨ ‘∑’¨’•’Ø’ø÷Ä’∏’∂’°’µ’´’∂ ’Æ’≠’°’≠’∏’ø", "üë© ‘ø’°’∂’°÷Å’´ (’∑’∏÷Ç’ø’∏’æ)")
    kb.add("üë® ’è’≤’°’¥’°÷Ä’§’∏÷Ç (’∑’∏÷Ç’ø’∏’æ)", "üßí ’Ñ’°’∂’Ø’°’Ø’°’∂ (’∑’∏÷Ç’ø’∏’æ)")
    kb.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", BTN_HOME)
    bot.send_message(m.chat.id, "üõç ‘Ω’°’∂’∏÷Ç’© ‚Äî ’®’∂’ø÷Ä’•÷Ñ ’Ø’°’ø’•’£’∏÷Ä’´’° üëá", reply_markup=kb)

# back to shop button
@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©")
def back_to_shop(m: types.Message):
    shop_menu(m)

# ------------------- Category stubs (empty) -------------------
@bot.message_handler(func=lambda m: m.text == "‚åö ’ç’¥’°÷Ä’© ’™’°’¥’°÷Å’∏÷Ç’µ÷Å’∂’•÷Ä")
def cat_watches(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", BTN_HOME)
    bot.send_message(m.chat.id, "‚åö ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ’ç’¥’°÷Ä’© ’™’°’¥’°÷Å’∏÷Ç’µ÷Å’∂’•÷Ä’´ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’®÷â", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üíª ’Ä’°’¥’°’Ø’°÷Ä’£’π’°’µ’´’∂ ’°÷Ñ’Ω’•’Ω’∏÷Ç’°÷Ä’∂’•÷Ä")
def cat_pc(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", BTN_HOME)
    bot.send_message(m.chat.id, "üíª ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ’Ä’°’¥’°’Ø’°÷Ä’£’π’°’µ’´’∂ ’°÷Ñ’Ω’•’Ω’∏÷Ç’°÷Ä’∂’•÷Ä’®÷â", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üöó ‘±’æ’ø’∏’¥’•÷Ñ’•’∂’°’µ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä")
def cat_car(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", BTN_HOME)
    bot.send_message(m.chat.id, "üöó ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ‘±’æ’ø’∏’¥’•÷Ñ’•’∂’°’µ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä’®÷â", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üç≥ ‘Ω’∏’∞’°’∂’∏÷Å’°’µ’´’∂ ’ø’•’≠’∂’´’Ø’°")
def cat_kitchen(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", BTN_HOME)
    bot.send_message(m.chat.id, "üç≥ ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ‘Ω’∏’∞’°’∂’∏÷Å’°’µ’´’∂ ’ø’•’≠’∂’´’Ø’°’µ’´ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’®÷â", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üíÖ ‘Ω’∂’°’¥÷Ñ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä")
def cat_care(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", BTN_HOME)
    bot.send_message(m.chat.id, "üíÖ ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ‘Ω’∂’°’¥÷Ñ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä’®÷â", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üö¨ ‘∑’¨’•’Ø’ø÷Ä’∏’∂’°’µ’´’∂ ’Æ’≠’°’≠’∏’ø")
def cat_ecig(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", BTN_HOME)
    bot.send_message(m.chat.id, "üö¨ ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ‘∑’¨’•’Ø’ø÷Ä’∏’∂’°’µ’´’∂ ’Æ’≠’°’≠’∏’ø’´ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’®÷â", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üë© ‘ø’°’∂’°÷Å’´ (’∑’∏÷Ç’ø’∏’æ)")
def cat_women(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", BTN_HOME)
    bot.send_message(m.chat.id, "üë© ‘ø’°’∂’°÷Å’´ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’® ’∞’°’Ω’°’∂’•’¨’´ ’Ø’¨’´’∂’•’∂ ’∑’∏÷Ç’ø’∏’æ÷â", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üë® ’è’≤’°’¥’°÷Ä’§’∏÷Ç (’∑’∏÷Ç’ø’∏’æ)")
def cat_men(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", BTN_HOME)
    bot.send_message(m.chat.id, "üë® ’è’≤’°’¥’°÷Ä’§’∏÷Ç ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’® ’∞’°’Ω’°’∂’•’¨’´ ’Ø’¨’´’∂’•’∂ ’∑’∏÷Ç’ø’∏’æ÷â", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üßí ’Ñ’°’∂’Ø’°’Ø’°’∂ (’∑’∏÷Ç’ø’∏’æ)")
def cat_kids(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", BTN_HOME)
    bot.send_message(m.chat.id, "üßí ’Ñ’°’∂’Ø’°’Ø’°’∂ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’® ’∞’°’Ω’°’∂’•’¨’´ ’Ø’¨’´’∂’•’∂ ’∑’∏÷Ç’ø’∏’æ÷â", reply_markup=kb)

# ------------------- Household (will show 11 cards from PRODUCTS)
# PRODUCTS dict and product handlers will be added in PART 2/3
@bot.message_handler(func=lambda m: m.text == "üè† ‘ø’•’∂÷Å’°’≤’°’µ’´’∂ ’∫’°÷Ä’°’£’°’∂’•÷Ä")
def cat_household(m: types.Message):
    bot.send_message(m.chat.id, "‚è≥ ‘≤’•’º’∂’°’æ’∏÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’®‚Ä¶")
    # Actual listing is in PART 2/3 once PRODUCTS are defined
    # After paste Part 2/3, this handler will send cards automatically.

# =========================
#   END OF PART 1/3
#   (Wait for PART 2/3 ‚Äî products + slider + add-to-cart buttons)
# =========================
# =========================
# StarLegenBot ‚Äî main.py
# PART 2/3  (paste directly below Part 1/3)
# =========================
@bot.message_handler(commands=['debug'])
def cmd_debug(m: types.Message):
    bot.send_message(m.chat.id, f"Products: {len(PRODUCTS)}\nUsers: {len(USERS)}\nOrders: {len(ORDERS)}")

# ------------------- PRODUCTS -------------------
PRODUCTS = {
    "BA100810": {
        "title": "‘≥’∏÷Ä’£ ¬´‘æ’°’≤’Ø’°’µ’´’∂ ’§’´’¶’°’µ’∂¬ª",
        "size": "40√ó60 ’Ω’¥",
        "price": 1690,
        "old_price": 2560,
        "sold": 325,
        "stock": 99,
        "category": "home",
        "img": "media/products/BA100810.jpg",
        "images": [
            "media/products/BA100810.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
        ],
        "bullets": [
            "’Ä’°÷Ä’¥’°÷Ä ’ß ’¥’∏÷Ç’ø÷Ñ’´, ’≠’∏’∞’°’∂’∏÷Å’´ ÷á ’¨’∏’£’°’Ω’•’∂’µ’°’Ø’´ ’∞’°’¥’°÷Ä",
            "’Ä’•’∑’ø ’¨’æ’°÷Å’æ’∏’≤ ÷á ’°÷Ä’°’£ ’π’∏÷Ä’°÷Å’∏’≤",
            "‘≥’•’≤’•÷Å’´’Ø ’©’°÷Ä’¥’°÷Å’æ’°’Æ ’§’´’¶’°’µ’∂"
        ],
        "long_desc": "üå∏ ’Ñ’•÷Ä ’Æ’°’≤’Ø’°’µ’´’∂ ’§’´’¶’°’µ’∂’∏’æ ’£’∏÷Ä’£’® ’Ø’¶’°÷Ä’§’°÷Ä’´ ’±’•÷Ä ’ø’∏÷Ç’∂’®÷â"
    },
    "BA100811": {
        "title": "‘≥’∏÷Ä’£ ¬´‘π’´’©’•’º’∂’•÷Ä’∏’æ¬ª",
        "size": "40√ó60 ’Ω’¥",
        "price": 1690,
        "old_price": 2560,
        "sold": 278,
        "stock": 80,
        "category": "home",
        "img": "media/products/BA100811.jpg",
        "images": [
            "media/products/BA100811.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
        ],
        "bullets": [
            "’Ü’∏÷Ç÷Ä’¢ ’§’´’¶’°’µ’∂ ’©’´’©’•’º’∂’•÷Ä’∏’æ",
            "’Ä’•’∑’ø ’¨’æ’°÷Å’æ’∏’≤ ÷á ’§’´’¥’°÷Å’Ø’∏÷Ç’∂"
        ],
        "long_desc": "ü¶ã ‘π’•’©÷á ’∏÷Ç ’∂’∏÷Ç÷Ä’¢ ’£’∏÷Ä’£, ’∏÷Ä’® ’ª’•÷Ä’¥’∏÷Ç’©’µ’∏÷Ç’∂ ’Ø’∞’°’≤’∏÷Ä’§’´ ’±’•÷Ä ’´’∂’ø’•÷Ä’´’•÷Ä’´’∂÷â"
    },
    "BA100812": {
        "title": "‘≥’∏÷Ä’£ ¬´’é’°÷Ä’§’°’£’∏÷Ç’µ’∂ ÷É’∏÷Ç’∑¬ª",
        "size": "40√ó60 ’Ω’¥",
        "price": 1690,
        "old_price": 2560,
        "sold": 315,
        "stock": 77,
        "category": "home",
        "img": "media/products/BA100812.jpg",
        "images": [
            "media/products/BA100812.jpg",
            "media/products/shared/interior.jpg",
        ],
        "bullets": [
            "‘ø’∏’¥’∫’°’Ø’ø ’π’°÷É’Ω",
            "’Ä’°÷Ä’¥’°÷Ä ’ø’•’≤’°’§÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä"
        ],
        "long_desc": "üå∫ ’Ä’´’°’∂’°’¨’´ ’ø’°÷Ä’¢’•÷Ä’°’Ø’ù ’ø’∏÷Ç’∂’® ’Ø’∏’Ø’´’Ø ’∏÷Ç ’∞’°÷Ä’¥’°÷Ä’°’æ’•’ø ’§’°÷Ä’±’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â"
    },
    "BA100813": {
        "title": "‘≥’∏÷Ä’£ ¬´’Ü’∏÷Ç÷Ä’¢ ’Æ’°’≤’Ø’°’µ’´’∂¬ª",
        "size": "40√ó60 ’Ω’¥",
        "price": 1690,
        "old_price": 2560,
        "sold": 292,
        "stock": 88,
        "category": "home",
        "img": "media/products/BA100813.jpg",
        "images": [
            "media/products/BA100813.jpg",
            "media/products/shared/care.jpg",
        ],
        "bullets": [
            "‘¥’´’¥’°÷Å’Ø’∏÷Ç’∂ ’∑’•÷Ä’ø’°’æ’∏÷Ä ’Ø’°’º’∏÷Ç÷Å’æ’°’Æ÷Ñ",
            "’Ä’•’∑’ø ’¥’°÷Ñ÷Ä’æ’∏’≤"
        ],
        "long_desc": "üå∑ ‘ø’∏’Ø’´’Ø ’£’∏÷Ä’£, ’∏÷Ä’® ’Ø’§’°’º’∂’° ’´’∂’ø’•÷Ä’´’•÷Ä’´ ’£’•’≤’•÷Å’´’Ø ’∞’°’æ’•’¨’∏÷Ç’¥÷â"
    },
    "BA100814": {
        "title": "‘≥’∏÷Ä’£ ¬´‘≤’°÷Å ’¥’°’∂’∏÷Ç’∑’°’Ø’°’£’∏÷Ç’µ’∂¬ª",
        "size": "40√ó60 ’Ω’¥",
        "price": 1690,
        "old_price": 2560,
        "sold": 341,
        "stock": 65,
        "category": "home",
        "img": "media/products/BA100814.jpg",
        "images": [
            "media/products/BA100814.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/layers.jpg",
        ],
        "bullets": [
            "’ç’°’∞’°’§’´’¥’°÷Å’Ø’∏÷Ç’∂ ’∞’´’¥÷Ñ",
            "‘≥’•’≤’•÷Å’´’Ø ’£’∏÷Ç’µ’∂"
        ],
        "long_desc": "üíú ‘π’°÷Ä’¥’°÷Å÷Ä’∏÷Ç ’ø’∏÷Ç’∂’® ’¥’°’∂’∏÷Ç’∑’°’Ø’°’£’∏÷Ç’µ’∂ ’£’•’≤’•÷Å’Ø’∏÷Ç’©’µ’°’¥’¢÷â"
    },
    "BA100815": {
        "title": "‘≥’∏÷Ä’£ ¬´‘æ’°’≤’´’Ø’∂’•÷Ä ÷á ’©’´’©’•’º’∂’•÷Ä¬ª",
        "size": "40√ó60 ’Ω’¥",
        "price": 1690,
        "old_price": 2560,
        "sold": 289,
        "stock": 73,
        "category": "home",
        "img": "media/products/BA100815.jpg",
        "images": [
            "media/products/BA100815.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/interior.jpg",
        ],
        "bullets": [
            "’Ü’∏÷Ç÷Ä’¢ ’§’´’¶’°’µ’∂ ’©’´’©’•’º’∂’•÷Ä’∏’æ",
            "‘ø’•’∂÷Å’°’≤’°’µ’´’∂ ’∞’°÷Ä’¥’°÷Ä’°’æ’•’ø’∏÷Ç’©’µ’∏÷Ç’∂"
        ],
        "long_desc": "ü¶ãüå∏ ‘π’´’©’•’º’∂’•÷Ä’´ ’∏÷Ç ’Æ’°’≤’´’Ø’∂’•÷Ä’´ ’∂’•÷Ä’§’°’∑’∂’°’Ø’∏÷Ç’©’µ’∏÷Ç’∂÷â"
    },
    "BA100816": {
        "title": "‘≥’∏÷Ä’£ ¬´‘π’•’©÷á ’Ω÷á’°’∫’°’ø¬ª",
        "size": "40√ó60 ’Ω’¥",
        "price": 1690,
        "old_price": 2560,
        "sold": 300,
        "stock": 92,
        "category": "home",
        "img": "media/products/BA100816.jpg",
        "images": [
            "media/products/BA100816.jpg",
        ],
        "bullets": [
            "’ç÷á’°’æ’∏÷Ç’∂ ’∂’∏÷Ç÷Ä’¢ ’•÷Ä’°’∂’£",
            "’Ä’•’∑’ø ’¨’æ’°÷Å’æ’∏’≤"
        ],
        "long_desc": "üñ§ ‘ø’∏’∂’ø÷Ä’°’Ω’ø’°’µ’´’∂ ’£’∏÷Ä’£’ù ’™’°’¥’°’∂’°’Ø’°’Ø’´÷Å ’´’∂’ø’•÷Ä’´’•÷Ä’´ ’∞’°’¥’°÷Ä÷â"
    },
    "BA100817": {
        "title": "‘≥’∏÷Ä’£ ¬´’Ü’∏÷Ç÷Ä’¢ ’æ’°÷Ä’§’°’£’∏÷Ç’µ’∂ ’•÷Ä’°’∂’£¬ª",
        "size": "40√ó60 ’Ω’¥",
        "price": 1690,
        "old_price": 2560,
        "sold": 276,
        "stock": 85,
        "category": "home",
        "img": "media/products/BA100817.jpg",
        "images": [
            "media/products/BA100817.jpg",
            "media/products/shared/interior.jpg",
        ],
        "bullets": [
            "‘≥’•’≤’•÷Å’´’Ø ’æ’°÷Ä’§’°’£’∏÷Ç’µ’∂ ’•÷Ä’°’∂’£",
            "’è’°÷Ñ ’∏÷Ç ’∞’°÷Ä’¥’°÷Ä’°’æ’•’ø"
        ],
        "long_desc": "üíï ’ç’´÷Ä’∏÷Ç’∂ ’£’∏÷Ä’£, ’∏÷Ä’® ’ª’•÷Ä’¥’∏÷Ç’©’µ’∏÷Ç’∂ ’Ø’∞’°’≤’∏÷Ä’§’´ ’±’•÷Ä ’Ω’•’∂’µ’°’Ø’´’∂÷â"
    },
    "BA100818": {
        "title": "‘≥’∏÷Ä’£ ¬´’Ü’∏÷Ç÷Ä’¢ ’§’´’¶’°’µ’∂¬ª",
        "size": "40√ó60 ’Ω’¥",
        "price": 1690,
        "old_price": 2560,
        "sold": 310,
        "stock": 79,
        "category": "home",
        "img": "media/products/BA100818.jpg",
        "images": [
            "media/products/BA100818.jpg",
            "media/products/shared/layers.jpg",
        ],
        "bullets": [
            "‘¥’´’¥’°÷Å’Ø’∏÷Ç’∂ ÷á ’£’•’≤’•÷Å’´’Ø",
            "’Ä’•’∑’ø ’¥’°÷Ñ÷Ä’æ’∏’≤"
        ],
        "long_desc": "üå∏ ’Å’•÷Ä ’ø’°’∂ ’∞’°’¥’°÷Ä ’´’§’•’°’¨’°’Ø’°’∂ ’∂’∏÷Ç÷Ä’¢ ’§’´’¶’°’µ’∂’´ ’£’∏÷Ä’£÷â"
    },
    "BA100819": {
        "title": "‘≥’∏÷Ä’£ ¬´‘π’´’©’•’º’∂’•÷Ä’∏’æ ’§’´’¶’°’µ’∂¬ª",
        "size": "40√ó60 ’Ω’¥",
        "price": 1690,
        "old_price": 2560,
        "sold": 298,
        "stock": 88,
        "category": "home",
        "img": "media/products/BA100819.jpg",
        "images": [
            "media/products/BA100819.jpg",
            "media/products/shared/interior.jpg",
        ],
        "bullets": [
            "’Ä’•’∑’ø ’ø’•’≤’°’§÷Ä’æ’∏’≤",
            "’Ä’°÷Ä’¥’°÷Ä’°’æ’•’ø’∏÷Ç’©’µ’∏÷Ç’∂ ’°’¥’•’∂÷Ö÷Ä’µ’° ÷Ö’£’ø’°’£’∏÷Ä’Æ’¥’°’∂ ’∞’°’¥’°÷Ä"
        ],
        "long_desc": "ü¶ã ‘æ’°’≤’Ø’°’µ’´’∂ ’§’´’¶’°’µ’∂ ’©’´’©’•’º’∂’•÷Ä’∏’æ’ù ’£’•’≤’•÷Å’´’Ø ’´’∂’ø’•÷Ä’´’•÷Ä’´ ’∞’°’¥’°÷Ä÷â"
    },
    "BA100820": {
        "title": "‘≥’∏÷Ä’£ ¬´‘≥’∏÷Ç’∂’°’æ’∏÷Ä ’Æ’°’≤’´’Ø’∂’•÷Ä¬ª",
        "size": "40√ó60 ’Ω’¥",
        "price": 1690,
        "old_price": 2560,
        "sold": 350,
        "stock": 70,
        "category": "home",
        "img": "media/products/BA100820.jpg",
        "images": [
            "media/products/BA100820.jpg",
            "media/products/shared/care.jpg",
        ],
        "bullets": [
            "‘≤’°’¶’¥’°’£’∏÷Ç’µ’∂ ’§’´’¶’°’µ’∂",
            "’Ä’°÷Ä’¥’°÷Ä ’ß ÷Å’°’∂’Ø’°÷Å’°’Æ ’Ω’•’∂’µ’°’Ø’´"
        ],
        "long_desc": "üåº ‘≤’°’¶’¥’°’£’∏÷Ç’µ’∂ ’Æ’°’≤’´’Ø’∂’•÷Ä’∏’æ ’£’∏÷Ä’£’ù ’±’•÷Ä ’ø’°’∂ ’∏÷Ç÷Ä’°’≠ ’ø÷Ä’°’¥’°’§÷Ä’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä÷â"
    },
}

# ------------------- PRODUCT SLIDER & CART BUTTONS -------------------
def _product_images(code):
    p = PRODUCTS.get(code, {})
    raw = p.get("images") or [p.get("img")]
    return [x for x in raw if x and os.path.exists(x)]

def _slider_kb(code: str, idx: int, total: int):
    left  = types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"slider:{code}:{(idx-1)%total}")
    right = types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"slider:{code}:{(idx+1)%total}")

    row_cart = [
        types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data=f"cart:add:{code}"),
        types.InlineKeyboardButton("üß∫ ‘¥’´’ø’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data="cart:show"),
    ]
    row_nav = [
        types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ÷Å’∏÷Ç÷Å’°’Ø", callback_data="back:home_list"),
        types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="go_home"),
    ]

    kb = types.InlineKeyboardMarkup()
    kb.row(left, right)
    kb.row(*row_cart)
    kb.row(*row_nav)
    return kb

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("p:"))
def show_product(c: types.CallbackQuery):
    code = c.data.split(":",1)[1]
    p = PRODUCTS.get(code, {})
    if not p:
        return bot.answer_callback_query(c.id, "‘±’∫÷Ä’°’∂÷Ñ’® ’π’´ ’£’ø’∂’æ’•’¨")

    imgs = _product_images(code)
    total = max(1, len(imgs))
    idx = 0

    discount = int(round(100 - (p["price"] * 100 / p["old_price"])))
    bullets = "\n".join([f"‚úÖ {b}" for b in (p.get("bullets") or [])])
    caption = (
        f"üå∏ **{p.get('title','')}**\n"
        f"‚úîÔ∏è ’â’°÷É’Ω’ù {p.get('size','')}\n"
        f"{bullets}\n\n"
        f"{p.get('long_desc','')}\n\n"
        f"’Ä’´’∂ ’£’´’∂ ‚Äî {p.get('old_price',0)}÷è (‚àí{discount}%)\n"
        f"’Ü’∏÷Ä ’£’´’∂ ‚Äî **{p.get('price',0)}÷è**\n"
        f"’é’°’≥’°’º’æ’°’Æ ‚Äî {p.get('sold',0)} ’∞’°’ø\n"
        f"‘ø’∏’§’ù `{code}`"
    )

    if imgs:
        with open(imgs[idx], "rb") as ph:
            bot.send_photo(
                c.message.chat.id, ph, caption=caption, parse_mode="Markdown",
                reply_markup=_slider_kb(code, idx, total)
            )
    else:
        bot.send_message(c.message.chat.id, caption, parse_mode="Markdown", reply_markup=_slider_kb(code, idx, total))

    bot.answer_callback_query(c.id)

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("slider:"))
def product_slider(c: types.CallbackQuery):
    _, code, idx_str = c.data.split(":")
    idx = int(idx_str)
    p = PRODUCTS.get(code, {})
    imgs = _product_images(code)
    total = max(1, len(imgs))
    idx = idx % total

    discount = int(round(100 - (p["price"] * 100 / p["old_price"])))
    bullets = "\n".join([f"‚úÖ {b}" for b in (p.get("bullets") or [])])
    caption = (
        f"üå∏ **{p.get('title','')}**\n"
        f"‚úîÔ∏è ’â’°÷É’Ω’ù {p.get('size','')}\n"
        f"{bullets}\n\n"
        f"{p.get('long_desc','')}\n\n"
        f"’Ä’´’∂ ’£’´’∂ ‚Äî {p.get('old_price',0)}÷è (‚àí{discount}%)\n"
        f"’Ü’∏÷Ä ’£’´’∂ ‚Äî **{p.get('price',0)}÷è**\n"
        f"’é’°’≥’°’º’æ’°’Æ ‚Äî {p.get('sold',0)} ’∞’°’ø\n"
        f"‘ø’∏’§’ù `{code}`"
    )

    if imgs:
        with open(imgs[idx], "rb") as ph:
            media = InputMediaPhoto(ph, caption=caption, parse_mode="Markdown")
            bot.edit_message_media(media, chat_id=c.message.chat.id, message_id=c.message.message_id,
                                   reply_markup=_slider_kb(code, idx, total))
    else:
        bot.edit_message_caption(caption, chat_id=c.message.chat.id,
                                 message_id=c.message.message_id, parse_mode="Markdown",
                                 reply_markup=_slider_kb(code, idx, total))
    bot.answer_callback_query(c.id)

# =========================
#   END OF PART 2/3
#   (Next: Part 3/3 ‚Äî Cart handlers, Checkout, Orders, Admin panel)
# =========================
# =========================
# --------- UNIFIED HOME SENDER (put above MAIN LOOP) ----------
def send_home_menu(chat_id: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_SHOP, BTN_CART)
    kb.add(BTN_EXCHANGE, BTN_IDEAS)
    kb.add(BTN_ORDERS, BTN_PROFILE)
    kb.add(BTN_FEEDBACK, BTN_SEARCH)
    bot.send_message(chat_id, "üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == BTN_BACK_HOME)
def back_home_from_text(m: types.Message):
    send_home_menu(m.chat.id)

@bot.callback_query_handler(func=lambda c: c.data == "go_home")
def back_home_from_cb(c: types.CallbackQuery):
    try:
        # remove inline under previous message to avoid extra clicks
        bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=None)
    except:
        pass
    send_home_menu(c.message.chat.id)
    bot.answer_callback_query(c.id, "‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç")

# StarLegenBot ‚Äî main.py
# PART 3/3  (paste below Part 2/3)
# =========================

# ------------------- CART HANDLERS -------------------
CART = defaultdict(dict)  # user_id -> {code: qty}

def _cart_text(uid: int) -> str:
    items = CART[uid]
    if not items:
        return "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß÷â"
    lines = ["üõí <b>’Å’•÷Ä ’¶’°’¥’¢’µ’∏÷Ç’≤’®</b>", ""]
    total = 0
    for code, qty in items.items():
        p = PRODUCTS[code]
        line = f"{p['title']} ‚Äî {qty} ’∞’°’ø √ó {p['price']}÷è"
        lines.append(line)
        total += p['price'] * qty
    lines.append("")
    lines.append(f"‘∏’∂’§’°’¥’•’∂’®’ù <b>{total}÷è</b>")
    return "\n".join(lines)

@bot.message_handler(func=lambda m: m.text == BTN_CART)
def open_cart_from_menu(m: types.Message):
    uid = m.from_user.id
    kb = types.InlineKeyboardMarkup()
    for code, qty in list(CART[uid].items())[:6]:
        title = PRODUCTS[code]["title"]
        kb.row(types.InlineKeyboardButton(f"üõí {title} ({qty})", callback_data="noop"))
        kb.row(
            types.InlineKeyboardButton("‚ûñ", callback_data=f"cart:dec:{code}"),
            types.InlineKeyboardButton("‚ûï", callback_data=f"cart:inc:{code}"),
            types.InlineKeyboardButton("üóë", callback_data=f"cart:rm:{code}"),
        )
    kb.row(
        types.InlineKeyboardButton("‚ùå ’Ñ’°÷Ñ÷Ä’•’¨", callback_data="cart:clear"),
        types.InlineKeyboardButton("üßæ ‘±’æ’°÷Ä’ø’•’¨ ’∫’°’ø’æ’•÷Ä’®", callback_data="checkout:start"),
    )
    kb.row(
        types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ÷Å’∏÷Ç÷Å’°’Ø", callback_data="back:home_list"),
        types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="go_home"),
    )
    bot.send_message(m.chat.id, _cart_text(uid), reply_markup=kb, parse_mode="HTML")

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("cart:"))
def cart_callbacks(c: types.CallbackQuery):
    uid = c.from_user.id
    parts = c.data.split(":")
    action = parts[1]
    code = parts[2] if len(parts) > 2 else None

    if action == "add" and code:
        CART[uid][code] = CART[uid].get(code, 0) + 1
        bot.answer_callback_query(c.id, "‘±’æ’•’¨’°÷Å’æ’•÷Å ’¶’°’¥’¢’µ’∏÷Ç’≤’∏÷Ç’¥ ‚úÖ")

    elif action == "inc" and code:
        CART[uid][code] = CART[uid].get(code, 0) + 1

    elif action == "dec" and code:
        q = CART[uid].get(code, 0)
        CART[uid][code] = max(0, q - 1)
        if CART[uid][code] == 0:
            CART[uid].pop(code, None)

    elif action == "rm" and code:
        CART[uid].pop(code, None)

    elif action == "clear":
        CART[uid].clear()

    if action in ("show", "add", "inc", "dec", "rm", "clear"):
        kb = types.InlineKeyboardMarkup()
        for code, qty in list(CART[uid].items())[:6]:
            title = PRODUCTS[code]["title"]
            kb.row(types.InlineKeyboardButton(f"üõí {title} ({qty})", callback_data="noop"))
            kb.row(
                types.InlineKeyboardButton("‚ûñ", callback_data=f"cart:dec:{code}"),
                types.InlineKeyboardButton("‚ûï", callback_data=f"cart:inc:{code}"),
                types.InlineKeyboardButton("üóë", callback_data=f"cart:rm:{code}"),
            )
        kb.row(
            types.InlineKeyboardButton("‚ùå ’Ñ’°÷Ñ÷Ä’•’¨", callback_data="cart:clear"),
            types.InlineKeyboardButton("üßæ ‘±’æ’°÷Ä’ø’•’¨ ’∫’°’ø’æ’•÷Ä’®", callback_data="checkout:start"),
        )
        kb.row(
            types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ÷Å’∏÷Ç÷Å’°’Ø", callback_data="back:home_list"),
            types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="go_home"),
        )
        bot.edit_message_text(_cart_text(uid), chat_id=c.message.chat.id,
                              message_id=c.message.message_id,
                              reply_markup=kb, parse_mode="HTML")
        bot.answer_callback_query(c.id)

# ------------------- CHECKOUT -------------------
CHECKOUT_STATE = {}  # uid -> step

@bot.callback_query_handler(func=lambda c: c.data == "checkout:start")
def checkout_start(c: types.CallbackQuery):
    uid = c.from_user.id
    if not CART[uid]:
        return bot.answer_callback_query(c.id, "‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß÷â")
    CHECKOUT_STATE[uid] = {"step": "name", "data": {}}
    bot.send_message(c.message.chat.id, "‚úçÔ∏è ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä ’°’∂’∏÷Ç’∂’®÷â")
    bot.answer_callback_query(c.id)

@bot.message_handler(func=lambda m: m.from_user.id in CHECKOUT_STATE)
def checkout_steps(m: types.Message):
    uid = m.from_user.id
    state = CHECKOUT_STATE[uid]
    step = state["step"]
    if step == "name":
        state["data"]["name"] = m.text.strip()
        state["step"] = "phone"
        return bot.send_message(m.chat.id, "üìû ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®÷â")

    if step == "phone":
        state["data"]["phone"] = m.text.strip()
        state["step"] = "address"
        return bot.send_message(m.chat.id, "üè† ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä ’∞’°’Ω÷Å’•’∂÷â")

    if step == "address":
        state["data"]["address"] = m.text.strip()
        # save order
        order = {
            "user": uid,
            "items": CART[uid],
            "info": state["data"],
            "created": datetime.utcnow().isoformat()+"Z",
        }
        ORDERS.append(order)
        persist_orders()
        # send to admin
        bot.send_message(ADMIN_ID, f"üì¶ ’Ü’∏÷Ä ’∫’°’ø’æ’•÷Ä {uid}\n{json.dumps(order, ensure_ascii=False, indent=2)}")
        # clear
        CART[uid].clear()
        del CHECKOUT_STATE[uid]
        return bot.send_message(m.chat.id, "‚úÖ ’ä’°’ø’æ’•÷Ä’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å ’°’§’¥’´’∂’´’∂÷â ’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂÷â")

# ------------------- PROFILE (‘ª’¥ ’ß’ª’®) -------------------
@bot.message_handler(func=lambda m: m.text == BTN_PROFILE)
def my_profile(m: types.Message):
    uid = m.from_user.id
    orders = [o for o in ORDERS if o["user"] == uid]
    lines = ["üßç <b>‘ª’¥ ’ß’ª’®</b>", ""]
    if orders:
        lines.append("üì¶ ’ä’°’ø’æ’•÷Ä’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø’ù " + str(len(orders)))
        for o in orders[-3:]:
            lines.append(f"- {o['created']} ({len(o['items'])} ’°’∫÷Ä’°’∂÷Ñ)")
    else:
        lines.append("‘¥’•’º ’∫’°’ø’æ’•÷Ä’∂’•÷Ä ’π’∏÷Ç’∂’•÷Ñ÷â")
    bot.send_message(m.chat.id, "\n".join(lines), parse_mode="HTML")

# ------------------- FEEDBACK -------------------
@bot.message_handler(func=lambda m: m.text == BTN_FEEDBACK)
def feedback(m: types.Message):
    bot.send_message(m.chat.id, "‚úçÔ∏è ‘≥÷Ä’•÷Ñ ’±’•÷Ä ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®, ’°’µ’∂ ’Ø’∏÷Ç’≤’°÷Ä’Ø’æ’´ ’°’§’¥’´’∂’´’∂÷â")
    bot.register_next_step_handler(m, feedback_step)

def feedback_step(m: types.Message):
    bot.send_message(ADMIN_ID, f"üí¨ Feedback {m.from_user.id}: {m.text}")
    bot.send_message(m.chat.id, "‚úÖ ’Å’•÷Ä ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å ’°’§’¥’´’∂’´’∂÷â")

# ------------------- SEARCH -------------------
@bot.message_handler(func=lambda m: m.text == BTN_SEARCH)
def product_search(m: types.Message):
    bot.send_message(m.chat.id, "’à÷Ä’∏’∂’¥’°’∂ ’∞’°’¥’°÷Ä ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’´ ’°’∂’æ’°’∂’∏÷Ç’¥ ’Ø’°’¥ ’Ø’∏’§÷â")
    bot.register_next_step_handler(m, do_search)

def do_search(m: types.Message):
    term = m.text.strip().lower()
    found = []
    for code, p in PRODUCTS.items():
        if term in code.lower() or term in p["title"].lower():
            found.append(code)
    if not found:
        return bot.send_message(m.chat.id, "’â’£’ø’∂’æ’•÷Å÷â")
    for code in found[:5]:
        bot.send_message(m.chat.id, f"‘≥’ø’∂’æ’•÷Å’ù {PRODUCTS[code]['title']}", reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üëÄ ‘¥’´’ø’•’¨", callback_data=f"p:{code}")
        ))

# ------------------- ADMIN PANEL -------------------
@bot.message_handler(commands=["admin"])
def admin_panel(m: types.Message):
    if m.from_user.id != ADMIN_ID:
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìä ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂", "üë• ’é’•÷Ä’ª’´’∂ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä")
    kb.add("üßæ ’é’•÷Ä’ª’´’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä", "‚¨áÔ∏è ’Ü’•÷Ä’¢’•’º’∂’•’¨ logs")
    kb.add("üì£ Broadcast", "üîé ’ì’∂’ø÷Ä’•’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª’®")
    kb.add("‚Ü©Ô∏è ’ì’°’Ø’•’¨")
    bot.send_message(m.chat.id, "üîê ‘±’§’¥’´’∂ ’∫’°’∂’•’¨", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üìä ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂" and m.from_user.id == ADMIN_ID)
def admin_stats(m: types.Message):
    bot.send_message(m.chat.id, f"’ï’£’ø’°’ø’•÷Ä’•÷Ä: {len(USERS)}\n’ä’°’ø’æ’•÷Ä’∂’•÷Ä: {len(ORDERS)}")

@bot.message_handler(func=lambda m: m.text == "üë• ’é’•÷Ä’ª’´’∂ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä" and m.from_user.id == ADMIN_ID)
def admin_users(m: types.Message):
    lines = []
    for uid in list(USERS.keys())[-10:]:
        lines.append(uid)
    bot.send_message(m.chat.id, "\n".join(lines))

@bot.message_handler(func=lambda m: m.text == "üßæ ’é’•÷Ä’ª’´’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä" and m.from_user.id == ADMIN_ID)
def admin_msgs(m: types.Message):
    try:
        with open("messages.log","r",encoding="utf-8") as f:
            lines = f.readlines()[-20:]
        bot.send_message(m.chat.id, "".join(lines))
    except Exception as e:
        bot.send_message(m.chat.id, str(e))

@bot.message_handler(func=lambda m: m.text == "‚¨áÔ∏è ’Ü’•÷Ä’¢’•’º’∂’•’¨ logs" and m.from_user.id == ADMIN_ID)
def admin_logs(m: types.Message):
    try:
        with open("messages.log","rb") as f:
            bot.send_document(m.chat.id, f)
    except: pass
    try:
        with open("errors.log","rb") as f:
            bot.send_document(m.chat.id, f)
    except: pass

@bot.message_handler(func=lambda m: m.text == "üì£ Broadcast" and m.from_user.id == ADMIN_ID)
def admin_broadcast(m: types.Message):
    bot.send_message(m.chat.id, "‚úçÔ∏è ‘≥÷Ä’•÷Ñ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’¢’∏’¨’∏÷Ä’´’∂ ’∏÷Ç’≤’°÷Ä’Ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â")
    bot.register_next_step_handler(m, do_broadcast)

def do_broadcast(m: types.Message):
    if m.from_user.id != ADMIN_ID:
        return
    for uid in USERS.keys():
        try:
            bot.send_message(int(uid), m.text)
        except: pass
    bot.send_message(m.chat.id, "‚úÖ ’à÷Ç’≤’°÷Ä’Ø’æ’•÷Å÷â")

# ------------------- MAIN LOOP -------------------
if __name__ == "__main__":
    try:
        bot.remove_webhook()
    except: pass
    print("ü§ñ Bot is running...")
    bot.infinity_polling(skip_pending=True, timeout=30, long_polling_timeout=30)

