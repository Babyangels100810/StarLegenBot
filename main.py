# ========== MAIN.PY ‚Äî PART 1/8 (INIT + /start + MAIN MENU) ==========
import os, time, re, json, threading, traceback, requests, random
from datetime import datetime
from collections import defaultdict
from types import SimpleNamespace as SNS

from telebot import TeleBot, types, apihelper
from telebot.types import InputMediaPhoto
from dotenv import load_dotenv, find_dotenv

# ---------------- ENV & TOKEN ----------------
apihelper.API_URL = "https://api.telegram.org/bot{0}/{1}"

load_dotenv()
ENV_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or ""
print("dotenv path:", find_dotenv())
print("BOT_TOKEN len:", len(ENV_TOKEN))
if not ENV_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is empty. Put it in your .env")

# ---------------- DIRS ----------------
DATA_DIR = "data"
MEDIA_DIR = "media"
def ensure_dirs():
    os.makedirs(DATA_DIR, exist_ok=True)
    os.makedirs(MEDIA_DIR, exist_ok=True)
    os.makedirs(os.path.join(MEDIA_DIR, "products"), exist_ok=True)
    os.makedirs(os.path.join(MEDIA_DIR, "exchange"), exist_ok=True)
ensure_dirs()

# ---------------- BOT ----------------
bot = TeleBot(ENV_TOKEN, parse_mode="HTML")

# ---------------- RUNTIME STORAGE ----------------
CART = defaultdict(dict)      # {user_id: {code: qty}}
CHECKOUT_STATE = {}           # {user_id: {step, order}}
ORDERS = []                   # demo orders

# ---------------- VALIDATION ----------------
NAME_RE  = re.compile(r"^[A-Za-z\u0531-\u0556\u0561-\u0587–Å—ë–™—ä–´—ã–≠—ç–ô–π\s'\-\.]{3,60}$")
PHONE_RE = re.compile(r"^(\+374|0)\d{8}$")

def _order_id():
    return f"BA{int(time.time()) % 1000000}"

def _cart_total(uid: int) -> int:
    try:
        return sum(int(PRODUCTS[c]["price"]) * q for c, q in CART[uid].items())
    except Exception:
        return 0

def _check_stock(uid: int):
    for code, qty in CART[uid].items():
        st = PRODUCTS.get(code, {}).get("stock")
        if isinstance(st, int) and qty > st:
            return False, code, st
    return True, None, None

# ---------------- MENU LABELS (exactly as you asked) ----------------
BTN_SHOP      = "üõç ‘Ω’°’∂’∏÷Ç’©"
BTN_CART      = "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤"
BTN_EXCHANGE  = "üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä"
BTN_THOUGHTS  = "üí° ‘Ω’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä"
BTN_RATES     = "üìä ’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä"
BTN_PROFILE   = "üßç ‘ª’¥ ’ß’ª’®"
BTN_FEEDBACK  = "üí¨ ‘ø’°’∫ ’¥’•’¶ ’∞’•’ø"
BTN_PARTNERS  = "ü§ù ‘≤’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä"
BTN_SEARCH    = "üîç ‘±’∫÷Ä’°’∂÷Ñ’´ ’∏÷Ä’∏’∂’∏÷Ç’¥"
BTN_INVITE    = "üë• ’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´"
BTN_MAIN      = "üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"
BTN_BACK_MAIN = "‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"

def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_SHOP, BTN_CART)
    kb.add(BTN_EXCHANGE, BTN_THOUGHTS)
    kb.add(BTN_RATES, BTN_PROFILE)
    kb.add(BTN_FEEDBACK, BTN_PARTNERS)
    kb.add(BTN_SEARCH, BTN_INVITE)
    kb.add(BTN_MAIN)
    return kb

def show_main_menu(chat_id, text="‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®"):
    bot.send_message(chat_id, text, reply_markup=main_menu_kb())

# ---------------- WELCOME ----------------
def welcome_text(customer_no: int) -> str:
    return (
        "üê∞üå∏ <b>‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø StarLegen</b> üõç‚ú®\n\n"
        "üíñ ’á’∂’∏÷Ä’∞’°’Ø’°’¨ ’•’∂÷Ñ, ’∏÷Ä ’¥’´’°÷Å’•’¨ ’•÷Ñ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’¥’°’µ’∂÷Ñ’´’∂ ‚ù§Ô∏è\n"
        f"‘¥’∏÷Ç÷Ñ ’°’µ’™’¥ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’≥’°’≠’∏÷Ä’§’∂ ’•÷Ñ ‚Ññ{customer_no} ‚ú®\n\n"
        "’Ñ’•÷Ä ’≠’°’∂’∏÷Ç’©’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’£’ø’∂’•’¨ ’°’¥’•’∂ ÷Ö÷Ä ÷Ö’£’ø’°’Ø’°÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’´ ’£’•’≤’•÷Å’´’Ø ÷á ’¥’°’ø’π’•’¨’´ ’°’º’°’ª’°÷Ä’Ø’∂’•÷Ä÷â\n\n"
        "üìä <b>’ì’∏’≠’°÷Ä’™’•÷Ñ’´ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä</b>\n"
        "‚Ä¢ PI ‚ûú USDT (’∑’∏÷Ç’Ø’°’µ’°’Ø’°’∂ ’Ø’∏÷Ç÷Ä’Ω +20% ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥)\n"
        "‚Ä¢ FTN ‚ûú AMD (’¥’´’°’µ’∂ 10% ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥)\n"
        "‚Ä¢ Alipay ’¨’´÷Å÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥ (1 CNY = 58÷è)\n\n"
        "‚ú® ‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂’∂’•÷Ä’® ’∂’•÷Ä÷Ñ÷á’∏÷Ç’¥ üëá"
    )

# ’∫’°’∞’•’∂÷Ñ ’∫’°÷Ä’¶’ù counter-’® ’∞’´’∑’æ’∏’≤ ÷Ü’°’µ’¨’∏’æ
COUNTER_FILE = os.path.join(DATA_DIR, "counter.json")
def _load_counter():
    if os.path.exists(COUNTER_FILE):
        try:
            return json.load(open(COUNTER_FILE,"r",encoding="utf-8")).get("customer_counter", 1007)
        except:
            return 1007
    return 1007

def _save_counter(v:int):
    try:
        json.dump({"customer_counter": v}, open(COUNTER_FILE,"w",encoding="utf-8"), ensure_ascii=False, indent=2)
    except:
        pass

customer_counter = _load_counter()

@bot.message_handler(commands=['start'])
def on_start(m: types.Message):
    if getattr(m.chat, "type", "") != "private":
        return

    global customer_counter
    customer_counter += 1
    _save_counter(customer_counter)

    # send bunny image if exists
    bunny_path = os.path.join(MEDIA_DIR, "bunny.jpg")
    if os.path.exists(bunny_path):
        try:
            with open(bunny_path, "rb") as ph:
                bot.send_photo(m.chat.id, ph)
        except:
            pass

    # welcome + menu
    bot.send_message(m.chat.id, welcome_text(customer_counter), reply_markup=main_menu_kb())

@bot.message_handler(commands=['menu'])
def on_menu(m: types.Message):
    show_main_menu(m.chat.id)

# ‘≥’¨’≠’°’æ’∏÷Ä’´’∂ ’∞’•’ø
@bot.message_handler(func=lambda m: m.text in (BTN_BACK_MAIN, BTN_MAIN))
def back_main_msg(m: types.Message):
    try:
        CHECKOUT_STATE.pop(m.from_user.id, None)
    except:
        pass
    show_main_menu(m.chat.id, "’é’•÷Ä’°’§’°÷Ä’±’°÷Ñ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç÷â ‚ú®")

# Stub handlers so buttons don't feel broken (’Ø’°’∑’≠’°’ø’•’∂ ’´’Ω’Ø’°’Ø’°’∂’∏’æ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’•÷Ä’∏÷Ç’¥)
@bot.message_handler(func=lambda m: m.text == BTN_EXCHANGE)
def stub_exchange(m: types.Message):
    bot.send_message(m.chat.id, "üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_THOUGHTS)
def stub_thoughts(m: types.Message):
    bot.send_message(m.chat.id, "üí° ‘Ω’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_RATES)
def stub_rates(m: types.Message):
    bot.send_message(m.chat.id, "üìä ’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_PROFILE)
def stub_profile(m: types.Message):
    bot.send_message(m.chat.id, "üßç ‘ª’¥ ’ß’ª’® ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_FEEDBACK)
def stub_feedback(m: types.Message):
    bot.send_message(m.chat.id, "üí¨ ‘ø’°’∫ ’¥’•’¶ ’∞’•’ø ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_PARTNERS)
def stub_partners(m: types.Message):
    bot.send_message(m.chat.id, "ü§ù ‘≤’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_SEARCH)
def stub_search(m: types.Message):
    bot.send_message(m.chat.id, "üîç ‘±’∫÷Ä’°’∂÷Ñ’´ ’∏÷Ä’∏’∂’∏÷Ç’¥ ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")

@bot.message_handler(func=lambda m: m.text == BTN_INVITE)
def stub_invite(m: types.Message):
    bot.send_message(m.chat.id, "üë• ’Ä÷Ä’°’æ’•÷Ä’´ ’∞’≤’∏÷Ç’¥’® ÷á referral-’® ‚Äî ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’∏÷Ç’¥÷â")
# ---------------- PRODUCTS (11 ’£’∏÷Ä’£ + ’°’æ’ø’∏) ----------------
PRODUCTS = {
    "BA100810": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100810",
        "price": 1690, "old_price": 2560, "sold": 325,
        "desc": """üåº ‘≤’•÷Ä’•÷Ñ ’©’°÷Ä’¥’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç ’∞’°÷Ä’¥’°÷Ä’°’æ’•’ø’∏÷Ç’©’µ’∏÷Ç’∂ ’ø’∏÷Ç’∂.
‚Ä¢ ’â’°÷É’Ω’®’ù 40√ó60 ’Ω’¥
‚Ä¢ ’Ñ’´’Ø÷Ä’∏÷Ü’´’¢÷Ä’• ÷É’°÷É’∏÷Ç’Ø ’¥’°’Ø’•÷Ä’•’Ω
‚Ä¢ ’â’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ’ù ’°’∂’æ’ø’°’∂’£ ÷Ñ’°’µ’¨÷Ñ
‚Ä¢ ‘±÷Ä’°’£ ’Ø’¨’°’∂’∏÷Ç’¥ ’ß ’ª’∏÷Ç÷Ä’®
‚Ä¢ ’Ä’•’∑’ø ’¨’æ’°÷Å’æ’∏’≤’ù ’¥’•÷Ñ’•’∂’°’µ’∏’æ/’±’•’º÷Ñ’∏’æ
‚Ä¢ ’â’´ ’Ø’∏÷Ä÷Å’∂’∏÷Ç’¥ ’£’∏÷Ç’µ’∂’® ’∞’°’≥’°’≠’°’Ø’°’∂ ’¨’æ’°÷Å’∏÷Ç’¥’´÷Å
‚Ä¢ ’Ä’°÷Ä’¥’°÷Ä ’¥’´’ª’°’∂÷Å÷Ñ, ’≠’∏’∞’°’∂’∏÷Å, ’¨’∏’£’°’Ω’•’∂’µ’°’Ø
‚Ä¢ ‘≤’∂’°’Ø’°’∂, ’∞’°’∂’£’´’Ω’ø ’£’∏÷Ç’µ’∂’•÷Ä
‚Ä¢ ’Ä’°÷Ä’¥’°÷Ä ’∂’æ’•÷Ä’´ ’∞’°’¥’°÷Ä ’ß’¨
‚Ä¢ ’ï÷Ä’´’£’´’∂’°’¨ ÷É’°’©’•’©’°’æ’∏÷Ä’¥’°’¥’¢
""",
        "media": [
            "media/products/BA100810.jpg",
            "media/products/shared/advantages.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/absorb.jpg"
        ]
    },
    "BA100811": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100811",
        "price": 1690, "old_price": 2560, "sold": 287,
        "desc": """üå∏ ’Ñ’´’∂’´’¥’°’¨’´’Ω’ø’°’Ø’°’∂ ’±÷á’°’æ’∏÷Ä’∏÷Ç’¥’ù ’ª’•÷Ä’¥ ’´’∂’ø’•÷Ä’´’•÷Ä’´ ’∞’°’¥’°÷Ä.
‚Ä¢ ’â’°÷É’Ω’ù 40√ó60 ’Ω’¥
‚Ä¢ ’ç’∏÷Ç’∫’•÷Ä ÷É’°÷É’∏÷Ç’Ø ’∏÷Ç ’§’°÷Ä’¢’∂’æ’°’Æ ’Ø’°’º’∏÷Ç÷Å’æ’°’Æ÷Ñ
‚Ä¢ ’ç’°’µ’©’°÷Ñ’∏÷Ç’¥ ’π’´’ù ’∞’°’Ø’°’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ
‚Ä¢ ‘±÷É’Ω’∏÷Ä’¢÷Å’∏÷Ç’¥ ’ß ’≠’∏’∂’°’æ’∏÷Ç’©’µ’∏÷Ç’∂’® ’æ’°’µ÷Ä’Ø’µ’°’∂’∂’•÷Ä’∏÷Ç’¥
‚Ä¢ ’Ä’°÷Ä’¥’°÷Ä ’¥’∏÷Ç’ø÷Ñ’´, ’∂’∂’ª’°’Ω’•’∂’µ’°’Ø’´, ’¨’∏’£’°’Ω’•’∂’µ’°’Ø’´
‚Ä¢ ’â’´ ’¥’°’∑’æ’∏÷Ç’¥ ’•’¶÷Ä’•÷Ä’´÷Å
‚Ä¢ ’Ä’•’∑’ø ’¥’°÷Ñ÷Ä’∏÷Ç’¥’ù ÷É’∏’∑’•’Ø’∏÷Ç’¨/’¨’æ’°÷Å’∏÷Ç’¥
‚Ä¢ ’â’´ ’§’•÷Ü’∏÷Ä’¥’°÷Å’æ’∏÷Ç’¥ ’π’∏÷Ä’°÷Å’∏÷Ç’¥’´÷Å
‚Ä¢ ‘∑’Ø’∏ ’∂’µ’∏÷Ç’©’•÷Ä’ù ’°’∂’æ’ø’°’∂’£ ’•÷Ä’•’≠’°’∂’•÷Ä’´ ’∞’°’¥’°÷Ä
‚Ä¢ ’ï’£’ø’°’£’∏÷Ä’Æ’¥’°’∂ ’•÷Ä’Ø’°÷Ä ’™’°’¥’Ø’•’ø
""",
        "media": [
            "media/products/BA100811.jpg",
            "media/products/shared/advantages.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/absorb.jpg"
        ]
    },
    "BA100812": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100812",
        "price": 1690, "old_price": 2560, "sold": 310,
        "desc": """üåø ‘≤’∂’°’Ø’°’∂ ’•÷Ä’°’∂’£’∂’•÷Ä’ù ’∞’°’∂’£’Ω’ø’°÷Å’∂’∏’≤ ’¥’©’∂’∏’¨’∏÷Ä’ø’´ ’∞’°’¥’°÷Ä.
‚Ä¢ 40√ó60 ’Ω’¥ ’Ø’∏’¥’∫’°’Ø’ø ’π’°÷É
‚Ä¢ ‘Ω’´’ø ’¥’°’∂÷Ä’°’©’•’¨’ù ’∞÷Ä’°’∑’°’¨’´ ’∂’•÷Ä’Æ’Æ’∏÷Ç’¥
‚Ä¢ ’â’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ’ù ’Ω’°’¨’´’Ø/’¨’°’¥’´’∂’°’ø/’∫’°÷Ä’Ø’•’ø
‚Ä¢ ’â’´ ’©’∏’≤’∂’∏÷Ç’¥ ’∞’•’ø÷Ñ ’∞’°’ø’°’Ø’´ ’æ÷Ä’°
‚Ä¢ ’Ñ’•÷Ñ’•’∂’°’µ’∏’æ ’¨’æ’°÷Å’æ’∏’≤’ù 30¬∞C
‚Ä¢ ’á’∏÷Ç’ø ’π’∏÷Ä’°÷Å’∏’≤ ’∞’µ’∏÷Ç’Ω÷Ñ
‚Ä¢ ‘¥’´’¥’°÷Å’Ø’∏÷Ç’∂ ’Ø’°÷Ä’∏÷Ç’¥ ’•’¶÷Ä’•÷Ä’´’∂
‚Ä¢ ’Ä’°÷Ä’¥’°÷Ä ’ß ’Ø’•’∂’§’°’∂’´’∂’•÷Ä ’∏÷Ç’∂’•÷Å’∏’≤ ’ø’∂’•÷Ä’´ ’∞’°’¥’°÷Ä
‚Ä¢ ‘ø’°÷Ä’•’¨’´ ’ß ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨ ’∂’°÷á ’∏÷Ä’∫’•’Ω ’∂’Ω’ø’°’ø’•’≤
‚Ä¢ ’è÷á’°’Ø’°’∂ ’∏÷Ä’°’Ø, ’¨’°’æ ’£’´’∂
""",
        "media": [
            "media/products/BA100812.jpg",
            "media/products/shared/advantages.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/absorb.jpg"
        ]
    },
    "BA100813": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100813",
        "price": 1690, "old_price": 2560, "sold": 298,
        "desc": """‚ú® ‘≥’•’≤’•÷Å’´’Ø ’§’´’¶’°’µ’∂’ù ’°’º’°’ª’´’∂ ’∞’°’µ’°÷Å÷Ñ’´÷Å ’Ω’´÷Ä’æ’•’¨’∏÷Ç.
‚Ä¢ ’â’°÷É’Ω’ù 40√ó60 ’Ω’¥
‚Ä¢ ’Ñ’´’Ø÷Ä’∏÷Ü’´’¢÷Ä’°’ù ’¥’°’∑’Ø’´’∂ ’∞’°’≥’•’¨’´
‚Ä¢ ‘ø’¨’°’∂’∏÷Ç’¥ ’ß ÷É’∏’∑’´’∂ ’∏÷Ç ’Ø’•’≤’ø’®
‚Ä¢ ’â’´ ’Ω’°’∞’∏÷Ç’¥, ’π’´ ’Æ’°’¨’æ’∏÷Ç’¥ ’•’¶÷Ä’•÷Ä’´÷Å
‚Ä¢ ‘º’æ’°÷Å’æ’∏÷Ç’¥ ’ß ’°’º’°’∂÷Å ’£’∏÷Ç’µ’∂ ’Ø’∏÷Ä÷Å’∂’•’¨’∏÷Ç
‚Ä¢ ’Ä’°÷Ä’¥’°÷Ä ’¥’´’ª’°’∂÷Å÷Ñ’∂’•÷Ä’´ ’∞’°’¥’°÷Ä
‚Ä¢ ’è’°÷Ñ’∏÷Ç’©’µ’∏÷Ç’∂ ’ß ’∞’°’≤’∏÷Ä’§’∏÷Ç’¥ ’Ω’•’∂’µ’°’Ø’´’∂
‚Ä¢ ’à’π ’°’¨’•÷Ä’£’•’∂ ’∂’µ’∏÷Ç’©
‚Ä¢ ’Ü’∏÷Ç÷Ä’¢ ’∞’°÷Ä’§’°÷Ä’°’∂÷Ñ’∏’æ ’æ’•÷Ä÷á’´ ’∑’•÷Ä’ø
‚Ä¢ ’è’∂’°’µ’´’∂ ’°’¥’•’∂÷Ö÷Ä’µ’° ÷Ö’£’ø’°’£’∏÷Ä’Æ’¥’°’∂ ’∞’°’¥’°÷Ä
""",
        "media": [
            "media/products/BA100813.jpg",
            "media/products/shared/advantages.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/absorb.jpg"
        ]
    },
    "BA100814": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100814",
        "price": 1690, "old_price": 2560, "sold": 341,
        "desc": """üåº ‘π’•’©÷á, ’∑’∂’π’∏’≤ ÷á ’∫÷Ä’°’Ø’ø’´’Ø ’£’∏÷Ä’£ ’°’¥’•’∂÷Ö÷Ä’µ’° ’æ’°÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä.
‚Ä¢ 40√ó60 ’Ω’¥’ù ’Ø’∏’¥’∫’°’Ø’ø
‚Ä¢ ‘ø’¨’°’∂’∏÷Ç’¥ ’ß ’ª’∏÷Ç÷Ä’®’ù ’∏’ø÷Ñ’•÷Ä’® ’π’∏÷Ä
‚Ä¢ ’Ä’°’Ø’°’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ’ù ’∫’°’∞’∏÷Ç’¥ ’ß ’ø’•’≤’∏÷Ç’¥
‚Ä¢ ’â’´ ’∫’°’∞’°’∂’ª’∏÷Ç’¥ ’∞’°’ø’∏÷Ç’Ø ’≠’∂’°’¥÷Ñ
‚Ä¢ ’Ñ’°’∑’æ’°’Æ’°’Ø’°’µ’∏÷Ç’∂ ’©’•’¨’•÷Ä
‚Ä¢ ‘º’°’æ ’∞’°’¥’°’§÷Ä’æ’∏÷Ç’¥ ’ß ’¢’°÷Å ’£’∏÷Ç’µ’∂’•÷Ä’´ ’∞’•’ø
‚Ä¢ ‘ø’∏’Ø’´’Ø ’•’¶÷Ä’°’µ’´’∂ ’Ø’°÷Ä’•÷Ä
‚Ä¢ ’â’´ ’¢’°÷Ä’°’Ø’∏÷Ç’¥ ’¨’æ’°÷Å’∏÷Ç’¥’´÷Å
‚Ä¢ ‘∏’∂’ø’´÷Ä ’£’´’∂/’∏÷Ä’°’Ø ’∞’°÷Ä’°’¢’•÷Ä’°’Ø÷Å’∏÷Ç’©’µ’∏÷Ç’∂
‚Ä¢ ’ä’°’ø÷Ä’°’Ω’ø ÷Ö’£’ø’°’£’∏÷Ä’Æ’¥’°’∂’ù ’°’º’°’∂÷Å ’∞’∏’ø’•÷Ä’´
""",
        "media": [
            "media/products/BA100814.jpg",
            "media/products/shared/advantages.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/absorb.jpg"
        ]
    },
    "BA100815": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100815",
        "price": 1690, "old_price": 2560, "sold": 260,
        "desc": """üå∏ ’ì’°÷É’∏÷Ç’Ø ’∑’∏÷Ç’º’Ø’°’ù ’∞’°’≥’•’¨’´ ÷Ñ’°’µ’¨÷Ñ’´ ’¶’£’°÷Å’∏’≤’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä.
‚Ä¢ ’â’°÷É’Ω’ù 40√ó60 ’Ω’¥
‚Ä¢ ‘π’°’æ’∑’µ’° ’∑’∏’∑’°÷É’•’¨’´÷Ñ
‚Ä¢ ’ã÷Ä’´ ’°÷Ä’°’£ ’∂’•÷Ä’Æ’Æ’∏÷Ç’¥
‚Ä¢ ’ç’°’∞’•’¨’∏÷Ç÷Å ’∫’°’∑’ø’∫’°’∂’∏’≤ ’∞’´’¥÷Ñ
‚Ä¢ ’Ä’°÷Ä’¥’°÷Ä ’ß ’¨’∏’£’°’Ω’•’∂’µ’°’Ø/’¢’°’¨’Ø’∏’∂/’¥’∏÷Ç’ø÷Ñ
‚Ä¢ ’Ä’•’∑’ø ’¨’æ’°÷Å’æ’∏’≤, ’∑’∏÷Ç’ø ’π’∏÷Ä’°÷Å’∏’≤
‚Ä¢ ’â’´ ’∞’°’æ’°÷Ñ’∏÷Ç’¥ ’∞’∏’ø’•÷Ä
‚Ä¢ ’â’´ ’£’∏÷Ç’∂’°’©’°÷É’æ’∏÷Ç’¥ ’°÷Ä÷á’´÷Å
‚Ä¢ ‘∫’°’¥’°’∂’°’Ø’°’Ø’´÷Å, ’Ω’´÷Ä’∏÷Ç’∂ ’∂’°’≠’∑
‚Ä¢ ’ä’°’ø÷Ä’°’Ω’ø ’∂’æ’•÷Ä’´ ’∞’°’¥’°÷Ä
""",
        "media": [
            "media/products/BA100815.jpg",
            "media/products/shared/advantages.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/absorb.jpg"
        ]
    },
    "BA100816": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100816",
        "price": 1690, "old_price": 2560, "sold": 305,
        "desc": """üçÉ ’ñ’∏÷Ç’∂’Ø÷Å’´’∏’∂’°’¨ ’£’∏÷Ä’£’ù ’¥’°÷Ñ’∏÷Ç÷Ä ’ø’°’∂ ’Ω’´’¥’æ’∏’¨.
‚Ä¢ 40√ó60 ’Ω’¥
‚Ä¢ ‘≤’°÷Ä’±÷Ä ’≠’ø’∏÷Ç’©’µ’°’¥’¢ ’¥’°’∂÷Ä’°’©’•’¨
‚Ä¢ ’Ñ’°÷Ñ÷Ä’∏÷Ç’¥ ’ß ’Ø’∏’∑’´’Ø’´ ’¥’∂’°÷Å’∏÷Ä’§’°’µ’´’∂ ÷É’∏’∑’´’∂
‚Ä¢ ’â’´ ’Ω’°’∞’∏÷Ç’¥’ù ’æ’Ω’ø’°’∞ ÷Ñ’°’µ’¨÷Ñ
‚Ä¢ ‘ø’°÷Ä’•’¨’´ ’ß ’¨’æ’°’∂’°’¨ 30¬∞C ’ª÷Ä’∏÷Ç’¥
‚Ä¢ ’â’´ ’Ø’∏÷Ä÷Å’∂’∏÷Ç’¥ ’±÷á’®
‚Ä¢ ‘ª÷Ä’°’Ø’°’∂ ’§÷Ä’°’¥’°’π’°÷É’ù ’∂’Ø’°÷Ä’´’∂’ù ’∂’∏÷Ç’µ’∂ ’£’∏÷Ç’µ’∂’®
‚Ä¢ ’Ü’∏÷Ç÷Ä’¢ ’Ø’°÷Ä’æ’°’Æ ’•’¶÷Ä’•÷Ä
‚Ä¢ ’Ä’°÷Ä’¥’°÷Ä ’®’∂’ø’°’∂’´ ’Ø’•’∂’§’°’∂’´’∂’•÷Ä’´ ’∞’•’ø
‚Ä¢ ’ï’£’ø’°’Ø’°÷Ä ’°’¥’•’∂ ÷Ö÷Ä
""",
        "media": [
            "media/products/BA100816.jpg",
            "media/products/shared/advantages.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/absorb.jpg"
        ]
    },
    "BA100817": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100817",
        "price": 1690, "old_price": 2560, "sold": 278,
        "desc": """‚ú® ‘∫’°’¥’°’∂’°’Ø’°’Ø’´÷Å ’£’∏÷Ç’µ’∂’´ ’∞’°’¥’°’§÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’ù ’¢’∏’¨’∏÷Ä ’´’∂’ø’•÷Ä’´’•÷Ä’∂’•÷Ä’´ ’∞’°’¥’°÷Ä.
‚Ä¢ 40√ó60 ’Ω’¥ ’π’°÷É
‚Ä¢ ’Ñ’´’Ø÷Ä’∏÷Ü’´’¢÷Ä’°’ù ÷É’°÷É’∏÷Ç’Ø ’∑’∏’∑’°÷É’•’¨’´÷Ñ
‚Ä¢ ’â’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ’ù EVA
‚Ä¢ ‘ø’¨’°’∂’∏÷Ç’¥ ’ß ’≠’∏’∂’°’æ’∏÷Ç’©’µ’∏÷Ç’∂’® ’∏÷Ç ’°÷Ä’°’£ ’π’∏÷Ä’°’∂’∏÷Ç’¥
‚Ä¢ ‘¥’´’¥’°÷Å’Ø’∏÷Ç’∂ ’∞’µ’∏÷Ç’Ω÷Ñ’ù ’•÷Ä’Ø’°÷Ä ’Ø’µ’°’∂÷Ñ
‚Ä¢ ’Ä’•’∑’ø ’≠’∂’°’¥÷Ñ’ù ÷É’∏’∑’•’Ø’∏÷Ç’¨/÷Ñ’Ω’∏÷Ç÷Ñ/’¨’æ’°÷Å’∏÷Ç’¥
‚Ä¢ ’â’´ ’©’∏’≤’∂’∏÷Ç’¥ ’¥’°’¶’´’Ø’∂’•÷Ä
‚Ä¢ ’Ü’∏÷Ç÷Ä’¢ ’£’∏÷Ç’∂’°’µ’´’∂ ÷É’∏’≠’°’∂÷Å’∏÷Ç’¥
‚Ä¢ ‘∏’∂’ø’´÷Ä ’ø’°÷Ä’¢’•÷Ä’°’Ø ’∂’æ’•÷Ä’´
‚Ä¢ ‘±÷Ä’™’•÷Ñ’°’æ’∏÷Ä ’£’∂’∏÷Ç’¥
""",
        "media": [
            "media/products/BA100817.jpg",
            "media/products/shared/advantages.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/absorb.jpg"
        ]
    },
    "BA100818": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100818",
        "price": 1690, "old_price": 2560, "sold": 299,
        "desc": """üå∫ ‘∏’∂’©’•÷Ä÷Å’°’Ω’•’∂’µ’°’Ø, ’∂’∂’ª’°’Ω’•’∂’µ’°’Ø, ’≠’∏’∞’°’∂’∏÷Å ‚Äî ’∞’°’æ’°’Ω’°÷Ä ’∞’°÷Ä’¥’°÷Ä.
‚Ä¢ 40√ó60 ’Ω’¥
‚Ä¢ ’â’´ ’Ω’°’∞’∏÷Ç’¥, ’π’´ ’Æ’°’¨’æ’∏÷Ç’¥
‚Ä¢ ’ã÷Ä’´ ’∂’•÷Ä’Æ’Æ’¥’°’∂ ’¢’°÷Ä’±÷Ä ’¥’°’Ø’°÷Ä’§’°’Ø
‚Ä¢ ’â’´ ’£’∏÷Ç’∂’°’©’°÷É’æ’∏÷Ç’¥ ’¨’æ’°÷Å’∏÷Ç’¥’´÷Å
‚Ä¢ ‘ø’∏’Ø’´’Ø ’•’¶÷Ä’°’£’Æ’°’µ’´’∂ ’Ø’°÷Ä’•÷Ä
‚Ä¢ ’á’∏÷Ç’∂’π’® ’π’´ ÷É’°’Ø’∏÷Ç’¥ ’∞’°’ø’°’Ø’´’∂
‚Ä¢ ’ì’∏’∑’∏’ø ’¥’´’ª’°’æ’°’µ÷Ä’∏÷Ç’¥ ’ß’¨ ’¨’°’æ ’ß ’∫’°’∞’∏÷Ç’¥ ’´÷Ä’•’∂
‚Ä¢ ‘≤’°÷Ä’•’Ø’°÷Ä’£ ’ø’•’Ω÷Ñ ’•÷Ä’Ø’°÷Ä ’™’°’¥’°’∂’°’Ø
‚Ä¢ ’Ñ’°÷Ñ÷Ä’æ’∏÷Ç’¥ ’ß ’¥’•’Ø ’∑’°÷Ä’™’∏÷Ç’¥’∏’æ
‚Ä¢ ‘≥’´’∂’ù ’∏÷Ä’°’Ø ’∞’°’æ’°’Ω’°÷Ä’°’Ø’∑’º’∏÷Ç’©’µ’°’¥’¢
""",
        "media": [
            "media/products/BA100818.jpg",
            "media/products/shared/advantages.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/absorb.jpg"
        ]
    },
    "BA100819": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100819",
        "price": 1690, "old_price": 2560, "sold": 320,
        "desc": """üåº ‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂ ÷á ’£’•’≤’•÷Å’´’Ø’ù ’ø’°’∂ ’∞’°÷Ä’¥’°÷Ä’°’æ’•’ø’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä.
‚Ä¢ ’â’°÷É’Ω’ù 40√ó60 ’Ω’¥
‚Ä¢ ’ì’°÷É’∏÷Ç’Ø, ’¢’°÷Ä’±÷Ä’°’Ø’∑’´’º ’∞’∫’∏÷Ç’¥
‚Ä¢ ’Ä’°’Ø’°’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ’ù EVA
‚Ä¢ ‘ª’§’•’°’¨’°’Ø’°’∂ ’ß ’¨’∏’£’°÷Ä’°’∂’´÷Å ’§’∏÷Ç÷Ä’Ω
‚Ä¢ ’Ä’•’∑’ø ’≠’∂’°’¥÷Ñ’ù ’ª’∏÷Ç÷Ä/÷Ö’≥’°’º
‚Ä¢ ‘±÷Ä’°’£ ’π’∏÷Ä’°÷Å’∏÷Ç’¥’ù ÷Ä’∏’∫’•’∂’•÷Ä’´ ’®’∂’©’°÷Å÷Ñ’∏÷Ç’¥
‚Ä¢ ’â’´ ’¥’∂’∏÷Ç’¥ ’∞’∏’ø
‚Ä¢ ’Ä’°÷Ä’¥’°÷Ä ÷É’∏÷Ñ÷Ä’´’Ø’∂’•÷Ä’´ ’∞’°’¥’°÷Ä
‚Ä¢ ’Ä’´’°’∂’°’¨’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’°’¥’•’∂ ÷Ö÷Ä
‚Ä¢ ’ç’´÷Ä’æ’°’Æ ’¥’∏’§’•’¨ ’¥’•÷Ä ’∞’°’≥’°’≠’∏÷Ä’§’∂’•÷Ä’´ ’Ø’∏’≤’¥’´÷Å
""",
        "media": [
            "media/products/BA100819.jpg",
            "media/products/shared/advantages.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/absorb.jpg"
        ]
    },
    "BA100820": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100820",
        "price": 1690, "old_price": 2560, "sold": 289,
        "desc": """üå∏ ’ç’´÷Ä’∏÷Ç’∂ ’∂’°’≠’∑’•÷Ä’∏’æ ’£’∏÷Ä’£’ù ’∞’°÷Ä’¥’°÷Ä ÷Å’°’∂’Ø’°÷Å’°’Æ ’∏’≥’´ ’∞’°’¥’°÷Ä.
‚Ä¢ 40√ó60 ’Ω’¥
‚Ä¢ ’Ñ’´’Ø÷Ä’∏÷Ü’´’¢÷Ä’• ’¢’∏÷Ç÷Ä’§’°’∂’¥’°’∂ ’∑’•÷Ä’ø
‚Ä¢ ’ç’°’∞’•’¨’® ’¢’°÷Å’°’º’æ’°’Æ ’ß
‚Ä¢ ‘ø’¨’°’∂’∏÷Ç’¥ ’ß ’ª’∏÷Ç÷Ä’® ’∏÷Ç ’Ø’•’≤’ø’®
‚Ä¢ ’ä’°’∞’∫’°’∂’∏÷Ç’¥ ’ß ’£’∏÷Ç’µ’∂’•÷Ä’® ’•÷Ä’Ø’°÷Ä
‚Ä¢ ‘º’æ’°÷Å’æ’∏’≤ ’¥’•÷Ñ’•’∂’°’µ’∏’æ’ù ’°’º’°’∂÷Å ’±÷á’´ ’Ø’∏÷Ä’∏÷Ç’Ω’ø’´
‚Ä¢ ’Ä’°÷Ä’¥’°÷Ä ’∂’°÷á ’¥’∏÷Ç’ø÷Ñ’´ ’∞’°’ø’æ’°’Æ’∏÷Ç’¥
‚Ä¢ ’è’°÷Ñ ’∏÷Ç ’∞’°’≥’•’¨’´ ’∏’ø÷Ñ’•÷Ä’´’∂
‚Ä¢ ’Ü’∏÷Ç÷Ä’¢ ’°’æ’°÷Ä’ø’∏÷Ç’¥ ’•’¶÷Ä’•÷Ä’´’∂
‚Ä¢ ‘≥’∂’∏÷Ç’¥, ’∏÷Ä’´÷Å ’π’•’Ω ’¶’≤’ª’°
""",
        "media": [
            "media/products/BA100820.jpg",
            "media/products/shared/advantages.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/absorb.jpg"
        ]
    },

    "CAR001": {
        "title": "‘±’æ’ø’∏’¥’°÷Ñ÷Ä’∏’≤ ’Ω’∫’∏÷Ç’∂’£ ‚Äì CAR001",
        "price": 3580, "old_price": 6480, "sold": 212,
        "desc": """üöó ’Ñ’°÷Ñ’∏÷Ç÷Ä ’¥’•÷Ñ’•’∂’°’ù ’°’º’°’∂÷Å ’ª’°’∂÷Ñ’´.
‚Ä¢ ‘Ω’•’¨’°÷Å’´ ’Ø’∏’∂’Ω’ø÷Ä’∏÷Ç’Ø÷Å’´’°’ù ’∞’•’≤’∏÷Ç’Ø’´ ’∫’°’∞’•’Ω’ø’∏’æ
‚Ä¢ ’Ä’•’∑’ø ’¥’°÷Ñ÷Ä’∏÷Ç’¥’ù ’°’º’°’∂÷Å ÷Ñ’´’¥’´’°’Ø’°’∂ ’∂’µ’∏÷Ç’©’•÷Ä’´
‚Ä¢ ’â’´ ÷Ñ’•÷Ä’∏÷Ç’¥ ’¨’°÷Ñ’®, ’π’´ ’©’∏’≤’∂’∏÷Ç’¥ ’∞’•’ø÷Ñ
‚Ä¢ ‘¥’´’¥’°÷Å’Ø’∏÷Ç’∂ ’Ω’∫’∏÷Ç’∂’£’ù ’¢’°’¶’¥’°’Ø’´ ÷Ö’£’ø’°’£’∏÷Ä’Æ’¥’°’∂
‚Ä¢ ’Ä’°÷Ä’¥’°÷Ä ’Ω’°’¨’∏’∂/’©’°÷É÷Ñ/’°’∫’°’Ø’´
‚Ä¢ ‘∑÷Ä’£’∏’∂’∏’¥’´’Ø ’¢’º’∂’°’Ø’ù ’π’•’Ω ’∞’∏’£’∂’∏÷Ç’¥
‚Ä¢ ‘±÷Ä’°’£ ’¨’æ’°÷Å’∏÷Ç’¥ ÷á ’π’∏÷Ä’°÷Å’∏÷Ç’¥
‚Ä¢ ‘ø’°÷Ä’•’¨’´ ’ß ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨ ’ø’∂’°’µ’´’∂ ’¥’°’Ø’•÷Ä’•’Ω’∂’•÷Ä’´ ’æ÷Ä’°
‚Ä¢ ’è’•’Ω’°’∂’µ’∏÷Ç’©’®’ù ¬´’è’•’Ω’°’∂’µ’∏÷Ç’©¬ª ’Ø’∏’≥’°’Ø’∏’æ
‚Ä¢ ’ä’°÷Ä’¶, ’∫÷Ä’∏÷Ü’•’Ω’´’∏’∂’°’¨ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ
""",
        "media": [
            "media/products/car_cleaner/CAR001_1.jpg",
            "media/products/car_cleaner/CAR001_2.jpg",
            "media/products/car_cleaner/CAR001_3.jpg",
            "media/products/car_cleaner/CAR001_4.jpg",
            "media/products/car_cleaner/CAR001_5.jpg",
            "media/products/car_cleaner/video.mp4"
        ]
    }
}

# ---------------- CATEGORIES ----------------
CATEGORIES = {
    "household": {
        "title": "üè° ‘ø’•’∂÷Å’°’≤’°’µ’´’∂ ’∫’°÷Ä’°’£’°’∂’•÷Ä",
        "products": [
            "BA100810","BA100811","BA100812","BA100813","BA100814",
            "BA100815","BA100816","BA100817","BA100818","BA100819","BA100820"
        ]
    },
    "auto": {
        "title": "üöó ‘±’æ’ø’∏’¥’•÷Ñ’•’∂’°’µ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä",
        "products": ["CAR001"]
    }
}
# ---------------- CATEGORIES MENU (Reply Keyboard) ----------------
def categories_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(CATEGORIES["household"]["title"], CATEGORIES["auto"]["title"])
    kb.add(BTN_BACK_MAIN, BTN_MAIN)
    return kb

@bot.message_handler(func=lambda m: m.text == BTN_SHOP)
def shop_menu(m: types.Message):
    bot.send_message(m.chat.id, "üõç ‘∏’∂’ø÷Ä’•÷Ñ ’Ø’°’ø’•’£’∏÷Ä’´’°", reply_markup=categories_kb())

def _cat_key_by_title(title: str):
    for k, c in CATEGORIES.items():
        if c["title"] == title:
            return k
    return None

# ---------------- PREVIEW (’¥’´’°’µ’∂ ’£’¨’≠’°’æ’∏÷Ä ’∂’Ø’°÷Ä + ¬´‘¥’´’ø’•’¨ ’¥’°’∂÷Ä’°’¥’°’Ω’∂¬ª) ----------------
def _first_image_path(p: dict) -> str:
    for path in p["media"]:
        if not path.lower().endswith(".mp4"):
            return path
    return None

def _preview_kb(code: str, cat_key: str):
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("üîé ‘¥’´’ø’•’¨ ’¥’°’∂÷Ä’°’¥’°’Ω’∂", callback_data=f"view|{code}|0|{cat_key}"))
    ikb.add(
        types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨", callback_data=f"backcat|{cat_key}"),
        types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="mainmenu")
    )
    return ikb

def send_preview(chat_id: int, code: str, cat_key: str):
    p = PRODUCTS[code]
    cover = _first_image_path(p)
    caption = f"<b>{p['title']}</b>\nüíµ {p['price']}÷è   <s>{p['old_price']}÷è</s>\nüëâ ’ç’•’≤’¥’•÷Ñ ¬´‘¥’´’ø’•’¨ ’¥’°’∂÷Ä’°’¥’°’Ω’∂¬ª"
    if cover and os.path.exists(cover):
        with open(cover, "rb") as ph:
            bot.send_photo(chat_id, ph, caption=caption, parse_mode="HTML", reply_markup=_preview_kb(code, cat_key))
    else:
        bot.send_message(chat_id, caption, reply_markup=_preview_kb(code, cat_key), parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text in [c["title"] for c in CATEGORIES.values()])
def on_category(m: types.Message):
    cat_key = _cat_key_by_title(m.text)
    if not cat_key:
        return
    CHECKOUT_STATE.pop(m.from_user.id, None)
    bot.send_message(m.chat.id, f"{CATEGORIES[cat_key]['title']}\n‚Äî ’®’∂’ø÷Ä’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’® ’∫’°’ø’Ø’•÷Ä’´÷Å÷â")
    for code in CATEGORIES[cat_key]["products"]:
        send_preview(m.chat.id, code, cat_key)

# ---------------- PRODUCT SLIDER (‚¨ÖÔ∏è/‚û°Ô∏è + ‚ñ∂Ô∏è + üõí + ’é’•÷Ä’°’§’°÷Ä’±) ----------------
def product_caption(p: dict, idx: int) -> str:
    total_imgs = sum(1 for x in p["media"] if not x.lower().endswith(".mp4"))
    page = f"\n\nüñº ’Ü’Ø’°÷Ä {idx+1}/{total_imgs}" if total_imgs else ""
    return (
        f"<b>{p['title']}</b>\n\n{p['desc']}\n"
        f"‚Äî ’Ä’´’∂ ’£’´’∂’ù {p['old_price']}÷è (‚àí34%)\n"
        f"‚Äî ’Ü’∏÷Ä ’£’´’∂’ù {p['price']}÷è\n"
        f"‚Äî ’é’°’≥’°’º’æ’°’Æ’ù {p['sold']} ’∞’°’ø{page}"
    )

def _images_only(media_list):
    return [p for p in media_list if not p.lower().endswith(".mp4")]

def _has_video(media_list):
    return any(p.lower().endswith(".mp4") for p in media_list)

def _slider_kb(code: str, idx: int, cat_key: str, has_video: bool):
    ikb = types.InlineKeyboardMarkup()
    ikb.row(
        types.InlineKeyboardButton("‚¨ÖÔ∏è ’Ü’°’≠’∏÷Ä’§", callback_data=f"prev|{code}|{idx}|{cat_key}"),
        types.InlineKeyboardButton("‚û°Ô∏è ’Ä’°’ª’∏÷Ä’§", callback_data=f"next|{code}|{idx}|{cat_key}")
    )
    if has_video:
        ikb.add(types.InlineKeyboardButton("‚ñ∂Ô∏è ’è’•’Ω’°’∂’µ’∏÷Ç’©", callback_data=f"video|{code}|{cat_key}"))
    ikb.add(types.InlineKeyboardButton("üõí ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data=f"add|{code}|{cat_key}|{idx}"))
    ikb.row(
        types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’Ø’°’ø’•’£’∏÷Ä’´’°", callback_data=f"backcat|{cat_key}"),
        types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="mainmenu")
    )
    return ikb

def _edit_photo(call, code: str, idx: int, cat_key: str):
    p = PRODUCTS[code]
    imgs = _images_only(p["media"])
    if not imgs:
        bot.answer_callback_query(call.id, "’Ü’Ø’°÷Ä ’π’´ ’£’ø’∂’æ’•’¨")
        return
    total = len(imgs)
    idx = (idx + total) % total
    with open(imgs[idx], "rb") as ph:
        media = types.InputMediaPhoto(ph, caption=product_caption(p, idx), parse_mode="HTML")
        try:
            bot.edit_message_media(
                media=media,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=_slider_kb(code, idx, cat_key, _has_video(p["media"]))
            )
        except Exception:
            # ‘µ’©’• ’∞’•’º’°÷Å÷Ä’°’Æ/’π÷É’∏÷É’∏’≠’æ’∏’≤ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’ß, ’∏÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä’®
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception:
                pass
            bot.send_photo(call.message.chat.id, open(imgs[idx], "rb"),
                           caption=product_caption(p, idx), parse_mode="HTML",
                           reply_markup=_slider_kb(code, idx, cat_key, _has_video(p["media"])))
    return idx

@bot.callback_query_handler(func=lambda c: c.data.startswith("view|"))
def cb_view(call: types.CallbackQuery):
    _, code, idx, cat_key = call.data.split("|")
    _edit_photo(call, code, int(idx), cat_key)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith("next|"))
def cb_next(call: types.CallbackQuery):
    _, code, idx, cat_key = call.data.split("|")
    _edit_photo(call, code, int(idx) + 1, cat_key)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith("prev|"))
def cb_prev(call: types.CallbackQuery):
    _, code, idx, cat_key = call.data.split("|")
    _edit_photo(call, code, int(idx) - 1, cat_key)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith("video|"))
def cb_video(call: types.CallbackQuery):
    _, code, cat_key = call.data.split("|")
    p = PRODUCTS[code]
    vids = [v for v in p["media"] if v.lower().endswith(".mp4")]
    if vids and os.path.exists(vids[0]):
        with open(vids[0], "rb") as vf:
            bot.send_video(call.message.chat.id, vf, caption=f"{p['title']} ‚Äî ’ø’•’Ω’°’∂’µ’∏÷Ç’©")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith("add|"))
def cb_add_cart(call: types.CallbackQuery):
    _, code, cat_key, idx = call.data.split("|")
    uid = call.from_user.id
    CART[uid][code] = CART[uid].get(code, 0) + 1
    bot.answer_callback_query(call.id, text="‘±’æ’•’¨’°÷Å’æ’•÷Å ’¶’°’¥’¢’µ’∏÷Ç’≤ üõí", show_alert=False)

@bot.callback_query_handler(func=lambda c: c.data == "mainmenu")
def cb_main_menu(call: types.CallbackQuery):
    show_main_menu(call.message.chat.id, "üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith("backcat|"))
def cb_back_cat(call: types.CallbackQuery):
    _, cat_key = call.data.split("|")
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    bot.send_message(call.message.chat.id, f"{CATEGORIES[cat_key]['title']}\n‚Äî ’®’∂’ø÷Ä’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’® ’∫’°’ø’Ø’•÷Ä’´÷Å÷â",
                     reply_markup=categories_kb())
    for code in CATEGORIES[cat_key]["products"]:
        send_preview(call.message.chat.id, code, cat_key)
    bot.answer_callback_query(call.id)
# ========== PART 4/8 ‚Äî CART AS PHOTOS (QTY + VIEW PRODUCT) ==========

# ’∫’°’∞’•’∂÷Ñ ’æ’•÷Ä’ª’´’∂ ’®’∂’§’∞’°’∂’∏÷Ç÷Ä ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’°’∂ id-’®, ’∏÷Ä ’©’°÷Ä’¥’°÷Å’∂’•’∂÷Ñ
CART_SUMMARY_MSG = {}  # {uid: message_id}

def _price_int(code: str) -> int:
    d = PRODUCTS.get(code, {})
    s = str(d.get("price_new", "0"))
    digits = "".join(ch for ch in s if ch.isdigit())
    return int(digits or "0")

def _item_caption(code: str, qty: int) -> str:
    d = PRODUCTS.get(code, {})
    title = d.get("title", code)
    p = _price_int(code)
    subtotal = p * qty
    return (
        f"<b>{title}</b>\n"
        f"{qty} ’∞’°’ø √ó {p}÷è = <b>{subtotal}÷è</b>\n"
        f"‘ø’∏’§’ù <code>{code}</code>"
    )

def _item_kb(code: str, qty: int):
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("‚ûñ", callback_data=f"cart:dec:{code}"),
        types.InlineKeyboardButton(f"{qty} ’∞’°’ø", callback_data="noop"),
        types.InlineKeyboardButton("‚ûï", callback_data=f"cart:inc:{code}"),
    )
    kb.row(
        types.InlineKeyboardButton("üîé ‘¥’´’ø’•’¨ ’°’∫÷Ä’°’∂÷Ñ’®", callback_data=f"detail:{code}"),
        types.InlineKeyboardButton("‚ùå ’Ä’•’º’°÷Å’∂’•’¨", callback_data=f"cart:del:{code}"),
    )
    return kb

def _cart_total(uid: int) -> int:
    total = 0
    for code, qty in CART.get(uid, {}).items():
        total += _price_int(code) * qty
    return total

def _cart_summary_text(uid: int) -> str:
    items = CART.get(uid, {})
    if not items:
        return "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß÷â"
    total = _cart_total(uid)
    lines = ["<b>‘∂’°’¥’¢’µ’∏÷Ç’≤’´ ’°’¥÷É’∏÷É’∏÷Ç’¥</b>"]
    for code, qty in items.items():
        lines.append(f"‚Ä¢ {PRODUCTS.get(code,{}).get('title', code)} ‚Äî {qty} ’∞’°’ø")
    lines.append(f"\n‘∏’∂’§’°’¥’•’∂’®’ù <b>{total}÷è</b>")
    return "\n".join(lines)

def _cart_summary_kb():
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("üßπ ’Ñ’°÷Ñ÷Ä’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤’®", callback_data="cart:clear"),
        types.InlineKeyboardButton("‚¨ÖÔ∏è ‘ø’°’ø’•’£’∏÷Ä’´’°’∂’•÷Ä", callback_data="back:cats"),
    )
    kb.add(types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="mainmenu"))
    kb.add(types.InlineKeyboardButton("‚úÖ ’á’°÷Ä’∏÷Ç’∂’°’Ø’•’¨ ’∫’°’ø’æ’•÷Ä’∏’æ", callback_data="checkout:start"))  # Part 5-’∏÷Ç’¥
    return kb

def _send_or_update_summary(chat_id: int, uid: int):
    text = _cart_summary_text(uid)
    kb = _cart_summary_kb()
    msg_id = CART_SUMMARY_MSG.get(uid)
    try:
        if msg_id:
            bot.edit_message_text(chat_id=chat_id, message_id=msg_id, text=text, reply_markup=kb, parse_mode="HTML")
        else:
            msg = bot.send_message(chat_id, text, reply_markup=kb, parse_mode="HTML")
            CART_SUMMARY_MSG[uid] = msg.message_id
    except Exception:
        # ’•’©’• ’π’´ ’∞’°’ª’∏’≤’æ’∏÷Ç’¥ edit ’°’∂’•’¨ (’ª’∂’ª’æ’•’¨ ’ß), ’∏÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä
        msg = bot.send_message(chat_id, text, reply_markup=kb, parse_mode="HTML")
        CART_SUMMARY_MSG[uid] = msg.message_id

def _product_main_image(code: str):
    d = PRODUCTS.get(code, {})
    media = d.get("media", [])
    for p in media:
        if not p.lower().endswith(".mp4") and os.path.exists(p):
            return p
    return None

# -------- Open Cart from main menu
@bot.message_handler(func=lambda m: m.text == BTN_CART)
def open_cart(m: types.Message):
    uid = m.from_user.id
    items = CART.get(uid, {})
    if not items:
        bot.send_message(m.chat.id, "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß÷â", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(BTN_BACK_MAIN, BTN_MAIN))
        return

    for code, qty in list(items.items()):
        img = _product_main_image(code)
        cap = _item_caption(code, qty)
        kb = _item_kb(code, qty)
        if img:
            with open(img, "rb") as ph:
                bot.send_photo(m.chat.id, ph, caption=cap, reply_markup=kb, parse_mode="HTML")
        else:
            bot.send_message(m.chat.id, cap, reply_markup=kb, parse_mode="HTML")

    _send_or_update_summary(m.chat.id, uid)

# -------- Cart actions (inc/dec/del/clear/open/add)
@bot.callback_query_handler(func=lambda c: c.data.startswith("cart:") or c.data=="noop")
def cart_actions(call: types.CallbackQuery):
    uid = call.from_user.id
    data = call.data
    if data == "noop":
        bot.answer_callback_query(call.id)
        return

    _, action, *rest = data.split(":")
    chat_id = call.message.chat.id
    msg_id = call.message.message_id

    # helpers to refresh this item's caption/keyboard
    def _refresh_item_msg(code):
        qty = CART[uid].get(code, 0)
        if qty <= 0:
            # item removed: delete its message
            try:
                bot.delete_message(chat_id, msg_id)
            except Exception:
                pass
        else:
            try:
                bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=msg_id,
                    caption=_item_caption(code, qty),
                    reply_markup=_item_kb(code, qty),
                    parse_mode="HTML"
                )
            except Exception:
                # if can't edit (e.g., not a photo), send a new message
                bot.send_message(chat_id, _item_caption(code, qty), reply_markup=_item_kb(code, qty), parse_mode="HTML")

        # and update summary
        _send_or_update_summary(chat_id, uid)

    if action == "open":
        bot.answer_callback_query(call.id)
        # resend full cart UI
        fake = types.SimpleNamespace(from_user=types.SimpleNamespace(id=uid), chat=types.SimpleNamespace(id=chat_id), text=BTN_CART)
        open_cart(fake)  # reuse
        return

    if action == "add":
        code = rest[0]
        CART[uid][code] = CART[uid].get(code, 0) + 1
        bot.answer_callback_query(call.id, "‘±’æ’•’¨’°÷Å’æ’•÷Å ’¶’°’¥’¢’µ’∏÷Ç’≤")
        _send_or_update_summary(chat_id, uid)
        return

    if action in ("inc", "dec", "del"):
        code = rest[0]
        if action == "inc":
            CART[uid][code] = CART[uid].get(code, 0) + 1
        elif action == "dec":
            q = CART[uid].get(code, 0) - 1
            if q <= 0:
                CART[uid].pop(code, None)
            else:
                CART[uid][code] = q
        elif action == "del":
            CART[uid].pop(code, None)
        bot.answer_callback_query(call.id)
        _refresh_item_msg(code)
        return

    if action == "clear":
        CART[uid].clear()
        bot.answer_callback_query(call.id, "‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’¥’°÷Ñ÷Ä’æ’•÷Å")
        # ÷É’∏÷Ä’±’•’∂÷Ñ ’©’°÷Ä’¥’°÷Å’∂’•’¨ summary-’∂
        _send_or_update_summary(chat_id, uid)
        return

# -------- Optional: "‘≤’°÷Å’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤’®" detail ’ß’ª’´÷Å
@bot.callback_query_handler(func=lambda c: c.data == "cart:open")
def cart_open_from_detail(call: types.CallbackQuery):
    uid = call.from_user.id
    bot.answer_callback_query(call.id)
    # ’∏÷Ç’≤’°÷Ä’Ø’•’∂÷Ñ ’°’¥’¢’∏’≤’ª ’¶’°’¥’¢’µ’∏÷Ç’≤’®’ù ’∂’Ø’°÷Ä’∂’•÷Ä’∏’æ
    fake = types.SimpleNamespace(from_user=types.SimpleNamespace(id=uid), chat=types.SimpleNamespace(id=call.message.chat.id), text=BTN_CART)
    open_cart(fake)

# ========== RUN ==========
if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling(timeout=30, long_polling_timeout=30, skip_pending=True)
# ========== END OF PART 1/8 ==========
