# -*- coding: utf-8 -*-
# ========== StarLegen ‚Äî CLEAN SKELETON (Start + Menu + Categories + Cart Summary) ==========
import os, json, time
from collections import defaultdict

from telebot import TeleBot, types, apihelper
from dotenv import load_dotenv, find_dotenv

# ---------- API & ENV ----------
apihelper.API_URL = "https://api.telegram.org/bot{0}/{1}"
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or ""
print("dotenv:", find_dotenv())
print("token len:", len(BOT_TOKEN))
if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN ’¢’°÷Å’°’Ø’°’µ’∏÷Ç’¥ ’ß .env-’∏÷Ç’¥")

# ---------- DIRS ----------
DATA_DIR  = "data"
MEDIA_DIR = "media"
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(MEDIA_DIR, exist_ok=True)

# ---------- BOT ----------
bot = TeleBot(BOT_TOKEN, parse_mode="HTML")

# ---------- GLOBAL RUNTIME ----------
CART = defaultdict(dict)      # {uid: {code: qty}}
ORDERS = []                   # future use
CHECKOUT_STATE = {}           # future use

# ---------- MENU LABELS (’π÷É’∏’≠’•’¨) ----------
BTN_SHOP      = "üõç ‘Ω’°’∂’∏÷Ç’©"
BTN_CART      = "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤"
BTN_EXCHANGE  = "üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä"
BTN_THOUGHTS  = "üí° ‘Ω’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä"
BTN_RATES     = "üìä ’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä"
BTN_PROFILE   = "üßç ‘ª’¥ ’ß’ª’®"
BTN_FEEDBACK  = "üí¨ ‘ø’°’∫ ’¥’•’¶ ’∞’•’ø"
BTN_PARTNERS  = "ü§ù ‘≤’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä"
BTN_SEARCH    = "üîç ‘±’∫÷Ä’°’∂÷Ñ’´ ’∏÷Ä’∏’∂’∏÷Ç’¥"
BTN_INVITE    = "üë• ’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´"
BTN_MAIN      = "üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"
BTN_BACK_MAIN = "‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"

def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_SHOP, BTN_CART)
    kb.add(BTN_EXCHANGE, BTN_THOUGHTS)
    kb.add(BTN_RATES, BTN_PROFILE)
    kb.add(BTN_FEEDBACK, BTN_PARTNERS)
    kb.add(BTN_SEARCH, BTN_INVITE)
    kb.add(BTN_MAIN)
    return kb

def show_main_menu(chat_id, text="‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®"):
    bot.send_message(chat_id, text, reply_markup=main_menu_kb())

# ---------- CUSTOMER COUNTER ----------
COUNTER_FILE = os.path.join(DATA_DIR, "counter.json")
def _load_counter():
    try:
        if os.path.exists(COUNTER_FILE):
            return json.load(open(COUNTER_FILE, "r", encoding="utf-8")).get("customer_counter", 1000)
    except: pass
    return 1000

def _save_counter(v:int):
    try:
        json.dump({"customer_counter": v}, open(COUNTER_FILE,"w",encoding="utf-8"), ensure_ascii=False, indent=2)
    except: pass

customer_counter = _load_counter()

# ---------- CALLBACK KEYS (’¥’´ ’°’∂’£’°’¥ ’∏÷Ç ’æ’•÷Ä’ª) ----------
from types import SimpleNamespace
CB = SimpleNamespace(
    product   = "product:",        # f"{CB.product}{code}"
    inc       = "cart:inc:",       # f"{CB.inc}{code}"
    dec       = "cart:dec:",       # f"{CB.dec}{code}"
    open      = "cart:open",       # open cart summary
    clear     = "cart:clear",      # clear cart
    main      = "mainmenu",        # go main
    back_cats = "backcats",        # back to categories
    checkout  = "checkout_start"   # start checkout
)

# ---------- CATEGORIES (’¨’´÷Ñ’®) ----------
CATEGORIES = [
    ("home",     "üè° ‘ø’•’∂÷Å’°’≤’°’µ’´’∂ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä"),
    ("rugs",     "üßº ‘≥’∏÷Ä’£’•÷Ä (’ø’°’∂)"),
    ("auto",     "üöó ‘±’æ’ø’∏’¥’•÷Ñ’•’∂’°’∂’•÷Ä’´ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä"),
    ("car_mats", "üöò ‘±’æ’ø’∏’£’∏÷Ä’£’•÷Ä"),
    ("kitchen",  "üç≥ ‘Ω’∏’∞’°’∂’∏÷Å / ’Ø’•’∂÷Å’°’≤"),
    ("phone",    "üì± ‘≤’ª’ª’°’µ’´’∂ ’°÷Ñ’Ω’•’Ω’∏÷Ç’°÷Ä’∂’•÷Ä"),
    ("smart",    "‚åö ’ç’¥’°÷Ä’© ’™’°’¥’°÷Å’∏÷Ç’µ÷Å’∂’•÷Ä"),
    ("pc",       "üíª ’Ä’°’¥’°’Ø’°÷Ä’£’π’°’µ’´’∂ ’°÷Ñ’Ω’•’Ω’∏÷Ç’°÷Ä’∂’•÷Ä"),
    ("beauty",   "üíÑ ‘≥’•’≤’•÷Å’Ø’∏÷Ç’©’µ’∏÷Ç’∂/’≠’∂’°’¥÷Ñ"),
    ("kids",     "üë∂ ’Ñ’°’∂’Ø’°’Ø’°’∂"),
    ("bags",     "üß≥ ’ä’°’µ’∏÷Ç’Ω’°’Ø’∂’•÷Ä"),
    ("pet",      "üêæ ‘ø’•’∂’§’°’∂’´’∂’•÷Ä’´ ’∞’°’¥’°÷Ä"),
]
CAT_LABELS = {label: key for key, label in CATEGORIES}

def cats_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for _, label in CATEGORIES:
        row.append(label)
        if len(row) == 2:
            kb.add(*row); row = []
    if row: kb.add(*row)
    kb.add(BTN_BACK_MAIN, BTN_MAIN)
    return kb

def show_shop_categories(chat_id, text="‘∏’∂’ø÷Ä’•÷Ñ ’Ø’°’ø’•’£’∏÷Ä’´’°’∂ üëá"):
    bot.send_message(chat_id, text, reply_markup=cats_kb())

# ---------- WELCOME TEXT (÷Ñ’∏ ’ø’•÷Ñ’Ω’ø’∏’æ) ----------
def welcome_text(no:int)->str:
    return (
        "üê∞üå∏ <b>‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø BabyAngels</b> üõçÔ∏è\n\n"
        "üíñ ’á’∂’∏÷Ä’∞’°’Ø’°’¨ ’•’∂÷Ñ, ’∏÷Ä ’®’∂’ø÷Ä’•’¨ ’•÷Ñ ’¥’•’¶ ‚ù§Ô∏è\n"
        f"‘¥’∏÷Ç÷Ñ ’°÷Ä’§’•’∂ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’≥’°’≠’∏÷Ä’§’∂ ’•÷Ñ ‚Ññ{no}÷â\n\n"
        "üéÅ ‘±’º’°’ª’´’∂ ’∫’°’ø’æ’•÷Ä’´ ’∞’°’¥’°÷Ä ’∏÷Ç’∂’•÷Ñ 5% ’¶’•’≤’π ‚Äî ’Ø’ø’•’Ω’∂’•÷Ñ ’æ’≥’°÷Ä’¥’°’∂ ’∫’°’∞’´’∂÷â\n\n"
        "üì¶ ‘ª’∂’π ’Ø’£’ø’∂’•÷Ñ ’¥’•’¶ ’¥’∏’ø‚Ä§\n"
        "‚Ä¢ ‘∫’°’¥’°’∂’°’Ø’°’Ø’´÷Å ’∏÷Ç ÷Ö’£’ø’°’Ø’°÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä ’°’¥’•’∂ ÷Ö÷Ä ’©’°÷Ä’¥’°÷Å’æ’∏’≤ ’ø’•’Ω’°’Ø’°’∂’∏÷Ç ’¥’•’ª\n"
        "‚Ä¢ ‘≥’•’≤’•÷Å’´’Ø ’§’´’¶’°’µ’∂ ÷á ’°’∂’¥’´’ª’°’Ø’°’∂ ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥\n"
        "‚Ä¢ ‘±’∂’æ’≥’°÷Ä ’°’º’°÷Ñ’∏÷Ç’¥ ’°’¥’¢’∏’≤’ª ’Ä’°’µ’°’Ω’ø’°’∂’∏’æ\n\n"
        "üí± ‘≤’°÷Å’´ ’≠’°’∂’∏÷Ç’©’´÷Å’ù ’ø÷Ä’°’¥’°’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∂’°÷á ÷É’∏’≠’°’∂’°’Ø’¥’°’∂ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä‚Ä§\n"
        "PI ‚ûù USDT | FTN ‚ûù AMD | Alipay ‚ûù CNY\n\n"
        "üëá ‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂ ÷á ’Ω’Ø’Ω’•÷Ñ ’£’∂’∏÷Ç’¥’∂’•÷Ä’® ’∞’´’¥’°"
    )

# ---------- CART SUMMARY (’¥’´’∑’ø ’Ø’° ¬´’á’°÷Ä’∏÷Ç’∂’°’Ø’•’¨ ’∫’°’ø’æ’•÷Ä’∏’æ¬ª) ----------
def _cart_summary_text(uid:int)->str:
    items = CART.get(uid, {})
    if not items:
        return "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß÷â\n\n’ç’•’≤’¥’•÷Ñ ¬´‚úÖ ’á’°÷Ä’∏÷Ç’∂’°’Ø’•’¨ ’∫’°’ø’æ’•÷Ä’∏’æ¬ª’ù ÷É’∏÷Ä’±‡±á‡∞Ç‡∞¶‡±Å‡∞ï‡±Å checkout-’® (demo)."
    lines = ["üßæ <b>‘∂’°’¥’¢’µ’∏÷Ç’≤’´ ’°’¥÷É’∏÷É’∏÷Ç’¥</b>"]
    total = 0
    for code, qty in items.items():
        # Skeleton ‚Äî ’∞’´’¥’° ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’´ ’¢’°’¶’° ’π’Ø’°, ’§÷Ä’° ’∞’°’¥’°÷Ä ÷Å’∏÷Ç’µ÷Å ’•’∂÷Ñ ’ø’°’¨’´’Ω ’¥’´’°’µ’∂ ’Ø’∏’§’∂ ’∏÷Ç ÷Ñ’°’∂’°’Ø’®
        lines.append(f"‚Ä¢ ‘ø’∏’§’ù {code} ‚Äî {qty} ’∞’°’ø")
        # total += price*qty  # Part 3/4-’∏÷Ç’¥ ’Ø’°’æ’•’¨’°÷Å’∂’•’Ω ’£’∂’•÷Ä’´ ’∞’°’∑’æ’°÷Ä’Ø’®
    lines.append(f"\n<b>‘∏’∂’§’°’¥’•’∂’®</b>’ù {total}÷è")
    return "\n".join(lines)

def _cart_summary_kb():
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("üßπ ’Ñ’°÷Ñ÷Ä’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤’®", callback_data=CB.clear),
        types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data=CB.main),
    )
    kb.row(types.InlineKeyboardButton("‚úÖ ’á’°÷Ä’∏÷Ç’∂’°’Ø’•’¨ ’∫’°’ø’æ’•÷Ä’∏’æ", callback_data=CB.checkout))
    return kb

def send_cart_summary(chat_id:int, uid:int):
    bot.send_message(chat_id, _cart_summary_text(uid), reply_markup=_cart_summary_kb(), parse_mode="HTML")

# ---------- HANDLERS ----------
@bot.message_handler(commands=["start"])
def on_start(m: types.Message):
    if getattr(m.chat, "type", "") != "private":
        return
    global customer_counter
    customer_counter += 1
    _save_counter(customer_counter)

    bunny = os.path.join(MEDIA_DIR, "bunny.jpg")
    if os.path.exists(bunny):
        try:
            with open(bunny, "rb") as ph:
                bot.send_photo(m.chat.id, ph)
        except: pass

    bot.send_message(m.chat.id, welcome_text(customer_counter), reply_markup=main_menu_kb())

@bot.message_handler(commands=["menu"])
def on_menu(m: types.Message):
    show_main_menu(m.chat.id)

@bot.message_handler(func=lambda m: m.text in (BTN_BACK_MAIN, BTN_MAIN))
def back_main(m: types.Message):
    show_main_menu(m.chat.id, "’é’•÷Ä’°’§’°÷Ä’±’°÷Ñ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®")

# --- SHOP -> Categories ---
@bot.message_handler(func=lambda m: m.text == BTN_SHOP)
def on_shop(m: types.Message):
    show_shop_categories(m.chat.id)

@bot.message_handler(func=lambda m: m.text in CAT_LABELS)
def on_any_category(m: types.Message):
    label = m.text
    bot.send_message(m.chat.id, f"¬´{label}¬ª ’¢’°’™’∂’´ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’® ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ ’∞’°’ª’∏÷Ä’§ ÷Ñ’°’µ’¨’∏÷Ç’¥ (Part 3).", reply_markup=cats_kb())

# --- CART button (always shows summary + checkout button) ---
@bot.message_handler(func=lambda m: m.text == BTN_CART)
def on_cart(m: types.Message):
    uid = m.from_user.id
    send_cart_summary(m.chat.id, uid)

# --- Inline callbacks for cart summary / navigation ---
@bot.callback_query_handler(func=lambda c: c.data == CB.clear)
def cb_clear_cart(c: types.CallbackQuery):
    CART.pop(c.from_user.id, None)
    bot.answer_callback_query(c.id, "‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’¥’°÷Ñ÷Ä’æ’•÷Å üßπ")
    send_cart_summary(c.message.chat.id, c.from_user.id)

@bot.callback_query_handler(func=lambda c: c.data == CB.main)
def cb_main(c: types.CallbackQuery):
    bot.answer_callback_query(c.id)
    show_main_menu(c.message.chat.id)

@bot.callback_query_handler(func=lambda c: c.data == CB.back_cats)
def cb_back_cats(c: types.CallbackQuery):
    bot.answer_callback_query(c.id)
    show_shop_categories(c.message.chat.id, "’é’•÷Ä’°’§’°÷Ä’± ’Ø’°’ø’•’£’∏÷Ä’´’°’∂’•÷Ä üëá")

@bot.callback_query_handler(func=lambda c: c.data == CB.checkout)
def cb_checkout_start(c: types.CallbackQuery):
    bot.answer_callback_query(c.id)
    uid = c.from_user.id
    if not CART.get(uid):
        bot.send_message(c.message.chat.id, "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß, ’¢’°’µ÷Å checkout-’® ’Ø’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ Part 5-’∏÷Ç’¥÷â")
        return
    bot.send_message(c.message.chat.id, "‚úÖ Checkout flow-’® ’Ø’°’æ’•’¨’°÷Å’æ’´ Part 5-’∏÷Ç’¥ (’•÷Ä’Ø’´÷Ä‚Üí÷Ñ’°’≤’°÷Ñ‚Üí’°’∂’∏÷Ç’∂‚Üí’∞’°’Ω÷Å’•‚Üí’æ’≥’°÷Ä’∏÷Ç’¥).")

# --- Stubs for other menu buttons (’π’•’∂ ’≠’°’∂’£’°÷Ä’∏÷Ç’¥) ---
@bot.message_handler(func=lambda m: m.text in (BTN_EXCHANGE, BTN_THOUGHTS, BTN_RATES, BTN_PROFILE,
                                               BTN_FEEDBACK, BTN_PARTNERS, BTN_SEARCH, BTN_INVITE))
def stubs(m: types.Message):
    bot.send_message(m.chat.id, "‘±’µ’Ω ’¢’°’™’´’∂’® ’Ø’°’æ’•’¨’°÷Å’æ’´ ’∞’°’ª’∏÷Ä’§ ’¥’°’Ω’•÷Ä’∏÷Ç’¥ üôÇ", reply_markup=main_menu_kb())

# ---------- RUN ----------
if __name__ == "__main__":
    print("Bot is running‚Ä¶")
    bot.infinity_polling(timeout=30, long_polling_timeout=30, skip_pending=True)
