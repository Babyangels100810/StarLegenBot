import os, re, time, json, glob, random, textwrap, threading, requests, hashlib, logging
from datetime import datetime
from flask import Flask, request, abort
import telebot
from telebot import types

# ==================== BASE INFO ====================
user_carts = {}  # {user_id: {code: qty}}
cart_timers = {}

STARTED_AT = time.strftime("%Y-%m-%d %H:%M:%S")
FILE_PATH  = os.path.abspath(__file__)
try:
    FILE_HASH = hashlib.md5(open(__file__, "rb").read()).hexdigest()[:8]
except Exception:
    FILE_HASH = "nohash"

# Flask + telebot logger
telebot.logger.setLevel(logging.DEBUG)
app = Flask(__name__)

# ==================== ENV & CONFIG ====================
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

# Bot token (prefer BOT_TOKEN, fallback TELEGRAM_BOT_TOKEN)
TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN or ":" not in TOKEN:
    raise Exception("BOT_TOKEN is not set (put it in .env)")

# Admin IDs: ADMIN_IDS="123,456" or ADMIN_ID="123"
_admin_env = os.getenv("ADMIN_IDS") or os.getenv("ADMIN_ID", "")
ADMIN_IDS = {int(x) for x in _admin_env.replace(" ", "").split(",") if x.isdigit()}
admin_list = list(ADMIN_IDS)

# ==================== BOT INSTANCE ====================
bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")
# Make sure we're in polling mode (no webhook leftovers)
bot.delete_webhook(drop_pending_updates=True)

# If you ever use webhook hosting, keep the URL here (not used in polling)
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL  = f"https://babyangelsbot08.onrender.com{WEBHOOK_PATH}"

# ==================== HELPERS ====================
def is_admin(m) -> bool:
    """Single unified admin check."""
    try:
        # custom helper if user had one
        if '_is_admin' in globals():
            try:
                if _is_admin(m):
                    return True
            except:
                pass
        # set of ids
        if 'ADMIN_IDS' in globals():
            if int(m.from_user.id) in set(int(x) for x in ADMIN_IDS):
                return True
        # list of ids
        if 'admin_list' in globals():
            if int(m.from_user.id) in [int(x) for x in admin_list]:
                return True
        # single id compatibility
        if 'ADMIN_ID' in globals():
            if int(m.from_user.id) == int(ADMIN_ID):
                return True
    except:
        pass
    return False

def calculate_cart_total(user_id: int) -> int:
    total = 0
    cart = user_carts.get(user_id, {})
    for code, qty in cart.items():
        price = int(PRODUCTS.get(code, {}).get("price", 0))
        total += price * int(qty)
    return total

# --- quick diagnostics (/version, /where) ---
@bot.message_handler(commands=['version','where'])
def _version(m):
    bot.reply_to(
        m,
        f"üß© path: `{FILE_PATH}`\n"
        f"üì¶ hash: `{FILE_HASH}`\n"
        f"‚è± started: {STARTED_AT}",
        parse_mode="Markdown"
    )

# ==================== files & dirs ====================
BASE_DIR = os.path.dirname(__file__)
DATA_DIR = os.path.join(BASE_DIR, "data")
os.makedirs(DATA_DIR, exist_ok=True)

def calculate_cart_total(user_id: int) -> int:
    total = 0
    cart = user_carts.get(user_id, {})
    for code, qty in cart.items():
        price = int(PRODUCTS.get(code, {}).get("price", 0))
        total += price * int(qty)
    return total


telebot.logger.setLevel(logging.DEBUG)
app = Flask(__name__)

# ---------- ENV & CONFIG ----------
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

# BOT TOKEN from .env (prefer BOT_TOKEN, fallback TELEGRAM_BOT_TOKEN)
TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN or ":" not in TOKEN:
    raise Exception("BOT_TOKEN is not set (use .env)")

# Admin IDs: ADMIN_IDS="123,456" or ADMIN_ID="123"
_admin_env = os.getenv("ADMIN_IDS") or os.getenv("ADMIN_ID", "")
ADMIN_IDS = {int(x) for x in _admin_env.replace(" ", "").split(",") if x.isdigit()}
admin_list = list(ADMIN_IDS)

def is_admin(m) -> bool:
    try:
        return int(m.from_user.id) in ADMIN_IDS
    except Exception:
        return False

# Single bot instance
bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")

# Ensure polling mode (no webhook)
bot.delete_webhook(drop_pending_updates=True)

# Webhook (’¥’∂’°, ’•’©’• ’∫’•’ø÷Ñ ’£’°; polling-’® ’Ø’°’∑’≠’°’ø’´ ’°’º’°’∂÷Å ’§÷Ä’° ’ß’¨)
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL  = f"https://babyangelsbot08.onrender.com{WEBHOOK_PATH}"


# --- Config / Bot ---
def is_admin(m) -> bool:
    try:
        # your own function (if exists)
        if '_is_admin' in globals(): 
            try: 
                return bool(_is_admin(m))
            except: 
                pass
        # set of ids
        if 'ADMIN_IDS' in globals():
            if int(m.from_user.id) in set(int(x) for x in ADMIN_IDS):
                return True
        # list of ids
        if 'admin_list' in globals():
            if int(m.from_user.id) in [int(x) for x in admin_list]:
                return True
        # single id
        if 'ADMIN_ID' in globals():
            if int(m.from_user.id) == int(ADMIN_ID):
                return True
    except:
        pass
    return False

# --- files & dirs ---
BASE_DIR = os.path.dirname(__file__)
DATA_DIR = os.path.join(BASE_DIR, "data")
os.makedirs(DATA_DIR, exist_ok=True)

USERS_FILE   = os.path.join(DATA_DIR, "users.json")      # [ids]
EVENTS_FILE  = os.path.join(DATA_DIR, "events.jsonl")    # json lines
PAY_FILE     = os.path.join(DATA_DIR, "payments.json")   # {pay_id: {...}}
COUPON_FILE  = os.path.join(DATA_DIR, "coupons.json")    # {user_id: balance}
INVITES_FILE = os.path.join(DATA_DIR, "invites.json")    # {"ref_map":{}, "count":{}}

def _load(path, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return default

def _save(path, obj):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(obj, f, ensure_ascii=False, indent=2)

def _append_event(kind, uid=None, meta=None):
    rec = {"ts": int(time.time()), "kind": kind, "user_id": int(uid) if uid else None, "meta": meta or {}}
    try:
        with open(EVENTS_FILE, "a", encoding="utf-8") as f:
            f.write(json.dumps(rec, ensure_ascii=False) + "\n")
    except:
        pass
# --- users registry (for broadcast/stats) ---
def _users() -> set: return set(_load(USERS_FILE, []))
def _users_save(s: set): _save(USERS_FILE, sorted(list(s)))
def _touch_user(uid: int):
    s = _users()
    if uid not in s:
        s.add(uid)
        _users_save(s)
        _append_event("user_new", uid)  # event ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ
@bot.message_handler(content_types=['text','photo','document','video','audio','voice','sticker','location','contact'])
def __seen__(m):
    try:
        _touch_user(int(m.from_user.id))
        _append_event("msg", m.from_user.id, {"type": m.content_type, "text": (m.text or "")[:120]})
    except:
        pass

# --- coupons ---
def _coupons(): return _load(COUPON_FILE, {})
def _coupons_save(d): _save(COUPON_FILE, d)

def add_coupon(uid:int, amount:float):
    d = _coupons()
    bal = float(d.get(str(uid), 0))
    bal = round(bal + float(amount), 2)
    d[str(uid)] = bal
    _coupons_save(d)
    return bal

def get_coupon(uid:int) -> float:
    return float(_coupons().get(str(uid), 0))

# --- invites (via /start <ref>) ---
def _invites():
    d = _load(INVITES_FILE, {})
    d.setdefault("ref_map", {})
    d.setdefault("count", {})
    return d

def _invites_save(d): _save(INVITES_FILE, d)

def register_invite(invitee:int, referrer:int):
    if invitee == referrer: return
    d = _invites()
    if str(invitee) in d["ref_map"]: return
    d["ref_map"][str(invitee)] = int(referrer)
    d["count"][str(referrer)] = int(d["count"].get(str(referrer), 0)) + 1
    _invites_save(d)
    _append_event("invited", invitee, {"referrer": int(referrer)})
@bot.message_handler(commands=['ping'])
def _ping(m):
    print(f"PING from {m.from_user.id}")
    bot.reply_to(m, "pong")
def __capture_ref__(m):
    try:
        parts = m.text.strip().split(maxsplit=1)
        if len(parts) == 2 and parts[1].isdigit():
            register_invite(int(m.from_user.id), int(parts[1]))
    except:
        pass

# --- helpers ---
def _new_id(prefix="p"): return f"{prefix}{int(time.time()*1000)}"

def parse_number(s: str) -> float:
    s = s.strip().upper().replace("AMD","").replace("USD","").replace("÷è","")
    s = s.replace(",", "").replace(" ", "")
    if not re.match(r"^-?\d+(\.\d+)?$", s):
        raise ValueError("number")
    return float(s)

def _today_range():
    dt = datetime.now()
    start = int(datetime(dt.year, dt.month, dt.day).timestamp())
    end   = start + 86400
    return start, end

# --- payments store ---
def _pays(): return _load(PAY_FILE, {})
def _pays_save(d): _save(PAY_FILE, d)

# --------------------------- USER: /pay FLOW ---------------------------
USER_STATE = {}

@bot.message_handler(commands=['pay'])
def pay_start(m):
    USER_STATE[m.from_user.id] = {"mode":"price"}
    bot.reply_to(m, "üßæ ‘≥÷Ä’´÷Ä **’°’∫÷Ä’°’∂÷Ñ’´ ’£’´’∂’®** (AMD). ’ï÷Ä.`1240`÷â\n/cancel’ù ’π’•’≤’°÷Ä’Ø’•’¨")

@bot.message_handler(commands=['cancel'])
def pay_cancel(m):
    if USER_STATE.pop(m.from_user.id, None) is not None:
        bot.reply_to(m, "‚ùé ’â’•’≤’°÷Ä’Ø’æ’•÷Å÷â")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id,{}).get("mode")=="price", content_types=['text'])
def pay_price(m):
    try:
        price = parse_number(m.text)
        USER_STATE[m.from_user.id] = {"mode":"sent", "price": price}
        bot.reply_to(m, "üí∞ ‘≥÷Ä’´÷Ä **÷É’∏’≠’°’∂÷Å’°’Æ ’£’∏÷Ç’¥’°÷Ä’®** (AMD). ’ï÷Ä.`1300`÷â")
    except:
        bot.reply_to(m, "’î’°’∂’°’Ø’® ’£÷Ä’´÷Ä ’©’æ’•÷Ä’∏’æ, ÷Ö÷Ä’´’∂’°’Ø `1240`÷â")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id,{}).get("mode")=="sent", content_types=['text'])
def pay_sent(m):
    st = USER_STATE.get(m.from_user.id, {})
    try:
        sent = parse_number(m.text)
        st["sent"] = sent
        st["mode"] = "receipt"
        USER_STATE[m.from_user.id] = st
        bot.reply_to(m, "üìé ’à÷Ç’≤’°÷Ä’Ø’´÷Ä **’°’∂’§’∏÷Ä’°’£’´÷Ä’®** (÷Ü’∏’ø’∏ ’Ø’°’¥ ÷É’°’Ω’ø’°’©’∏÷Ç’≤’©)÷â\n/cancel’ù ’π’•’≤’°÷Ä’Ø’•’¨")
    except:
        bot.reply_to(m, "’î’°’∂’°’Ø’® ’£÷Ä’´÷Ä ’©’æ’•÷Ä’∏’æ, ÷Ö÷Ä’´’∂’°’Ø `1300`÷â")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id,{}).get("mode")=="receipt", content_types=['photo','document'])
def pay_receipt(m):
    st = USER_STATE.get(m.from_user.id, {})
    price = float(st.get("price",0))
    sent  = float(st.get("sent",0))
    pay_id = _new_id("pay_")
    fkind = m.content_type
    fid   = m.photo[-1].file_id if fkind=='photo' else m.document.file_id

    d = _pays()
    d[pay_id] = {
        "id": pay_id,
        "user_id": int(m.from_user.id),
        "username": m.from_user.username,
        "price": price,
        "sent": sent,
        "overpay": round(max(0, sent-price), 2),
        "file_kind": fkind,
        "file_id": fid,
        "status": "pending",
        "ts": int(time.time())
    }
    _pays_save(d)
    USER_STATE.pop(m.from_user.id, None)
    _append_event("payment_created", m.from_user.id, {"id":pay_id,"price":price,"sent":sent})

    bot.reply_to(m, f"‚úÖ ’é’≥’°÷Ä’¥’°’∂ ’∞’°’µ’ø’® ’£÷Ä’°’∂÷Å’æ’•÷Å ‚Ññ`{pay_id}`÷â ‘±’§’¥’´’∂’® ’Ø’∞’°’Ω’ø’°’ø’´ ’¥’∏’ø’°’Ø’°’µ’∏÷Ç’¥÷â", parse_mode="Markdown")

    # notify admins
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("üëÅ ’è’•’Ω’æ’°’Æ",   callback_data=f"pay:seen:{pay_id}"),
        types.InlineKeyboardButton("‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨", callback_data=f"pay:ok:{pay_id}"),
        types.InlineKeyboardButton("‚ùå ’Ñ’•÷Ä’™’•’¨",   callback_data=f"pay:no:{pay_id}")
    )
    cap = (f"üí≥ ’Ü’∏÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥ #{pay_id}\n"
           f"‚Ä¢ From: @{m.from_user.username or m.from_user.id}\n"
           f"‚Ä¢ Price: {price}÷è | Sent: {sent}÷è\n"
           f"‚Ä¢ Overpay‚ÜíCoupon: {round(max(0, sent-price),2)}÷è")
    # try all admin sources we know
    admin_ids = set()
    try:
        admin_ids |= set(int(x) for x in ADMIN_IDS)  # type: ignore
    except: pass
    try:
        admin_ids |= set(int(x) for x in admin_list)  # type: ignore
    except: pass
    try:
        admin_ids.add(int(ADMIN_ID))  # type: ignore
    except: pass
    for aid in admin_ids:
        try:
            if fkind=='photo':   bot.send_photo(aid, fid, caption=cap, reply_markup=kb)
            else:               bot.send_document(aid, fid, caption=cap, reply_markup=kb)
        except: pass

@bot.callback_query_handler(func=lambda q: q.data.startswith("pay:"))
def cb_pay(q):
    if not is_admin(q): 
        bot.answer_callback_query(q.id, "‚õîÔ∏è"); 
        return
    _, act, pid = q.data.split(":")
    d = _pays(); rec = d.get(pid)
    if not rec:
        bot.answer_callback_query(q.id, "’â’Ø’° ’∞’°’µ’ø’®"); 
        return

    if act=="seen":
        if rec.get("status")=="pending":
            rec["status"]="seen"; _pays_save(d); _append_event("payment_seen", q.from_user.id, {"id":pid})
        bot.answer_callback_query(q.id, "’è’•’Ω’æ’°’Æ üëÅ"); 
        return

    if act=="ok":
        if rec.get("status") in ("pending","seen"):
            rec["status"]="approved"; _pays_save(d)
            _append_event("payment_approved", q.from_user.id, {"id":pid})
            over = float(rec.get("overpay",0))
            if over>0:
                new_bal = add_coupon(int(rec["user_id"]), over)
                try:
                    bot.send_message(rec["user_id"], f"‚úÖ ’é’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•÷Å (‚Ññ{pid}). ‘±’æ’•’¨÷Å’∏÷Ç’Ø {over}÷è ‚Üí ’Ø’∏÷Ç’∫’∏’∂’∂’•÷Ä÷â ’Ü’∏÷Ä ’¥’∂’°÷Å’∏÷Ä’§’ù {new_bal}÷è.")
                except: pass
            else:
                try:
                    bot.send_message(rec["user_id"], f"‚úÖ ’Å’•÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•÷Å (‚Ññ{pid}).")
                except: pass
        bot.answer_callback_query(q.id, "’Ä’°’Ω’ø’°’ø’æ’•÷Å ‚úÖ"); 
        return

    if act=="no":
        if rec.get("status") in ("pending","seen"):
            rec["status"]="declined"; _pays_save(d)
            _append_event("payment_declined", q.from_user.id, {"id":pid})
            try:
                bot.send_message(rec["user_id"], f"‚ùå ’é’≥’°÷Ä’∏÷Ç’¥’® ’¥’•÷Ä’™’æ’•÷Å (‚Ññ{pid}). ‘ø’°’∫ ’∞’°’Ω’ø’°’ø’•÷Ñ ÷Ö’∫’•÷Ä’°’ø’∏÷Ä’´ ’∞’•’ø÷â")
            except: pass
        bot.answer_callback_query(q.id, "’Ñ’•÷Ä’™’æ’•÷Å ‚ùå"); 
        return

# manual admin confirm (optional fallback)
@bot.message_handler(commands=['confirm_payment'])
def confirm_payment(m):
    if not is_admin(m): return
    parts = m.text.split()
    if len(parts)<4:
        bot.reply_to(m, "’ï’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥’ù /confirm_payment user_id amount_sent amount_expected")
        return
    try:
        uid = int(parts[1])
        sent = float(parts[2]); expected = float(parts[3])
    except:
        bot.reply_to(m, "‘π’æ’•÷Ä’® ’≥’´’∑’ø ’∂’∑’´÷Ä‚Ä§ ÷Ö÷Ä’´’∂’°’Ø `/confirm_payment 123 1300 1240`")
        return
    over = max(0.0, sent-expected)
    if over>0:
        new_bal = add_coupon(uid, over)
    else:
        new_bal = get_coupon(uid)
    try:
        txt=(f"‚úÖ ’Å’•÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’æ’•÷Å÷â\n"
             f"üì¶ ‘≥’´’∂’®’ù {expected}÷è | üí∏ ’ì’∏’≠’°’∂÷Å’°’Æ’ù {sent}÷è")
        if over>0: txt+=f"\nüéÅ ‘±’æ’•’¨ {over}÷è ‚Üí ’Ø’∏÷Ç’∫’∏’∂’∂’•÷Ä÷â ’Ü’∏÷Ä ’¥’∂’°÷Å’∏÷Ä’§’ù {new_bal}÷è"
        bot.send_message(uid, txt)
    except: pass
    bot.reply_to(m, f"OK. User {uid} overpay={over}÷è, coupons={new_bal}÷è")

# quick lists
@bot.message_handler(commands=['payments'])
def list_pending(m):
    if not is_admin(m): return
    d=_pays()
    arr=[v for v in d.values() if v.get("status") in ("pending","seen")]
    arr=sorted(arr, key=lambda x:x["ts"], reverse=True)[:20]
    if not arr:
        bot.reply_to(m, "üí≥ ’ç’∫’°’Ω’∏’≤ ’æ’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä ’π’Ø’°’∂÷â"); return
    lines=[f"‚Ä¢ #{p['id']}  {p['price']}‚Üí{p['sent']} (over {p['overpay']})  @{p.get('username') or p['user_id']}" for p in arr]
    bot.reply_to(m, "üí≥ ’é’•÷Ä’ª’´’∂ ’Ω’∫’°’Ω’∏’≤ ’æ’≥’°÷Ä’∂’•÷Ä\n"+"\n".join(lines))

# coupons commands
@bot.message_handler(commands=['my_coupons'])
def my_coupons(m):
    bot.reply_to(m, f"üéü ’Å’•÷Ä ’Ø’∏÷Ç’∫’∏’∂’∂’•÷Ä’´ ’¥’∂’°÷Å’∏÷Ä’§’®’ù {get_coupon(int(m.from_user.id))}÷è")

@bot.message_handler(commands=['coupons'])
def admin_coupons(m):
    if not is_admin(m): return
    parts = m.text.split()
    if len(parts)==1:
        bot.reply_to(m, "’ï’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥’ù `/coupons <user_id> [add X|sub X]`", parse_mode="Markdown"); return
    uid = int(parts[1])
    if len(parts)==2:
        bot.reply_to(m, f"User {uid} ‚Üí {get_coupon(uid)}÷è"); return
    op = parts[2].lower(); amt = float(parts[3])
    if op=="add": nb=add_coupon(uid, amt)
    elif op=="sub": nb=add_coupon(uid, -amt)
    else: bot.reply_to(m, "’ï’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥’ù add/sub"); return
    bot.reply_to(m, f"OK. User {uid} ’∂’∏÷Ä ’¥’∂’°÷Å’∏÷Ä’§’ù {nb}÷è")

# admin ‚Äúsend receipt‚Äù (free message to user)
@bot.message_handler(commands=['send_receipt'])
def admin_send_receipt(m):
    if not is_admin(m): return
    parts = m.text.split(maxsplit=2)
    if len(parts)<3:
        bot.reply_to(m, "’ï’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥’ù /send_receipt USER_ID ’è‘µ‘ø’ç’è")
        return
    try:
        uid=int(parts[1])
    except:
        bot.reply_to(m, "USER_ID-’® ’©’´’æ ’∫’•’ø÷Ñ ’ß ’¨’´’∂’´"); return
    txt = parts[2]
    try:
        bot.send_message(uid, "üì© ‘±’§’¥’´’∂’´ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂\n\n"+txt)
        bot.reply_to(m, "‚úÖ ’à÷Ç’≤’°÷Ä’Ø’æ’•÷Å")
    except Exception as e:
        bot.reply_to(m, f"’â’Ω’ø’°÷Å’æ’•÷Å ’∏÷Ç’≤’°÷Ä’Ø’•’¨’ù {e}")

# --- stats / dashboard ---
BOT_START_TS = time.time()
def _uptime():
    s=int(time.time()-BOT_START_TS); h=s//3600; m=(s%3600)//60; ss=s%60
    return f"{h:02d}:{m:02d}:{ss:02d}"

def _today_stats():
    s,e=_today_range()
    users_new=0; pay_cnt=0; pay_sum=0.0; over_sum=0.0
    try:
        with open(EVENTS_FILE,"r",encoding="utf-8") as f:
            for line in f:
                j=json.loads(line)
                ts=int(j.get("ts",0))
                if not(s<=ts<e): continue
                k=j.get("kind")
                if k=="user_new": users_new+=1
                elif k=="payment_created":
                    pay_cnt+=1
                    meta=j.get("meta",{})
                    pay_sum += float(meta.get("sent",0))
                    over_sum+= max(0.0, float(meta.get("sent",0)) - float(meta.get("price",0)))
    except: pass
    pend=len([1 for v in _pays().values() if v.get("status") in ("pending","seen")])
    return {"users_new":users_new,"pay_cnt":pay_cnt,"pay_sum":round(pay_sum,2),"over_sum":round(over_sum,2),"pending":pend}

def _admin_kb():
    kb=types.ReplyKeyboardMarkup(resize_keyboard=True,row_width=2)
    kb.add("üß≠ ‘¥’•’∑’¢’∏÷Ä’§","üí≥ ’ç’∫’°’Ω’∏’≤ ’æ’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä","üìä ’ï÷Ä’æ’° ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂")
    kb.add("üì¢ Broadcast","üìú ‘º’∏’£’•÷Ä","‚¨ÖÔ∏è ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç")
    return kb

@bot.message_handler(commands=['admin'])
def admin_panel(m):
    if not is_admin(m): return
    bot.send_message(m.chat.id,
        f"üëë Admin panel\n‚Ä¢ Users: {len(_users())}\n‚Ä¢ Uptime: {_uptime()}\n‚Ä¢ Data: ./data/",
        reply_markup=_admin_kb())

@bot.message_handler(func=lambda m: is_admin(m) and m.text=="üìä ’ï÷Ä’æ’° ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂")
def btn_stats_today(m):
    s=_today_stats()
    bot.reply_to(m,
        f"üìä ‘±’µ’Ω÷Ö÷Ä\n‚Ä¢ ’Ü’∏÷Ä user-’∂’•÷Ä: {s['users_new']}\n‚Ä¢ ’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä: {s['pay_cnt']} (’£’∏÷Ç’¥’°÷Ä {s['pay_sum']}÷è)\n"
        f"‚Ä¢ ‘ø’∏÷Ç’∫’∏’∂ ’°’æ’•’¨’°÷Å’∏÷Ç’¥’∂’•÷Ä: {s['over_sum']}÷è\n‚Ä¢ ’ç’∫’°’Ω’∏’≤ ’æ’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä: {s['pending']}")

@bot.message_handler(func=lambda m: is_admin(m) and m.text=="üí≥ ’ç’∫’°’Ω’∏’≤ ’æ’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä")
def btn_pending(m): list_pending(m)

@bot.message_handler(func=lambda m: is_admin(m) and m.text=="üß≠ ‘¥’•’∑’¢’∏÷Ä’§")
def btn_dash(m):
    s=_today_stats()
    bot.reply_to(m,
        f"üß≠ ‘¥’•’∑’¢’∏÷Ä’§\n‚Ä¢ ‘±’µ’Ω÷Ö÷Ä ’∂’∏÷Ä user: {s['users_new']}\n‚Ä¢ ’ç’∫’°’Ω’∏’≤ ’æ’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä: {s['pending']}\n"
        f"‚Ä¢ ’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä (÷Ñ’°’∂’°’Ø/’£’∏÷Ç’¥’°÷Ä): {s['pay_cnt']} / {s['pay_sum']}÷è\n‚Ä¢ ‘ø’∏÷Ç’∫’∏’∂ ’°’æ’•’¨÷Å’∏÷Ç’Ø: {s['over_sum']}÷è\n"
        f"‚Ä¢ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä user-’∂’•÷Ä: {len(_users())}")

# --- broadcast to all users ---
ADMIN_STATE={}
@bot.message_handler(commands=['broadcast'])
def bc_start(m):
    if not is_admin(m): return
    ADMIN_STATE[m.from_user.id]={"mode":"broadcast"}
    bot.reply_to(m, "‚úçÔ∏è ’à÷Ç’≤’°÷Ä’Ø’´÷Ä ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’¢’∏’¨’∏÷Ä user-’∂’•÷Ä’´’∂÷â /cancel’ù ’§’°’§’°÷Ä’•÷Å’∂’•’¨")

@bot.message_handler(func=lambda m: is_admin(m) and ADMIN_STATE.get(m.from_user.id,{}).get("mode")=="broadcast",
                     content_types=['text','photo','video','document','audio','voice','sticker'])
def bc_go(m):
    users=_users(); sent=0; fail=0
    for uid in list(users):
        try:
            if   m.content_type=='text': bot.send_message(uid, m.text)
            elif m.content_type=='photo': bot.send_photo(uid, m.photo[-1].file_id, caption=m.caption or "")
            elif m.content_type=='video': bot.send_video(uid, m.video.file_id, caption=m.caption or "")
            elif m.content_type=='document': bot.send_document(uid, m.document.file_id, caption=m.caption or "")
            elif m.content_type=='audio': bot.send_audio(uid, m.audio.file_id, caption=m.caption or "")
            elif m.content_type=='voice': bot.send_voice(uid, m.voice.file_id)
            elif m.content_type=='sticker': bot.send_sticker(uid, m.sticker.file_id)
            sent+=1; time.sleep(0.03)
        except:
            fail+=1
    ADMIN_STATE.pop(m.from_user.id, None)
    bot.reply_to(m, f"üì¢ ’à÷Ç’≤’°÷Ä’Ø’æ’•÷Å’ù {sent}, ’π’∞’°’Ω’°’æ’ù {fail}")

# --- logs dump (last 300) ---
@bot.message_handler(commands=['logs'])
def send_logs(m):
    if not is_admin(m): return
    N=300; lines=[]
    if os.path.exists(EVENTS_FILE):
        with open(EVENTS_FILE,"r",encoding="utf-8") as f: lines=f.readlines()[-N:]
    path=os.path.join(DATA_DIR,"events_last.txt")
    with open(path,"w",encoding="utf-8") as f: f.writelines(lines)
    with open(path,"rb") as f:
        bot.send_document(m.chat.id,f,visible_file_name="events_last.txt",
                          caption=f"’é’•÷Ä’ª’´’∂ {len(lines)} ’´÷Ä’°’§’°÷Ä’±’∏÷Ç’©’µ’∏÷Ç’∂")
# =================== END ADMIN BLOCK ===================
# --- Webhook setup ---
def set_webhook():
    try:
        # remove old
        requests.get(f"https://api.telegram.org/bot{TOKEN}/deleteWebhook", timeout=10)

        # set new
        r = requests.get(
            f"https://api.telegram.org/bot{TOKEN}/setWebhook",
            params={"url": WEBHOOK_URL, "drop_pending_updates": True},
            timeout=10,
        )
        print("setWebhook:", r.json())
    except Exception as e:
        print("Webhook error:", e)


# ---- helpers: safe int casting (avoid .isdigit on non-strings) ----
def to_int(val):
    try:
        return int(str(val).strip())
    except Exception:
        return None


# --- Config / Bot ---


# ---------------- Products loader ----------------
def load_products(folder="products"):
    """‘ø’°÷Ä’§’∏÷Ç’¥ ’ß products/*.json‚Äì’•÷Ä’®, ’æ’•÷Ä’°’§’°÷Ä’±’∂’∏÷Ç’¥ dict’ù {code: {...}}"""
    products = {}
    for path in glob.glob(os.path.join(folder, "*.json")):
        try:
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception:
            continue
        items = data if isinstance(data, list) else [data]
        for item in items:
            if not isinstance(item, dict):
                continue
            code = str(item.get("code") or os.path.splitext(os.path.basename(path))[0])
            products[code] = {
                "code": code,
                "title": item.get("title", code),
                "price": int(item.get("price", 0)),
                "old_price": int(item.get("old_price", 0)),
                "description": item.get("description", ""),
                "photo": item.get("photo") or item.get("images", [None])[0],
                "sold": int(item.get("sold", 0)),
            }
    return products

# ’∫’°’∞’∏÷Ç’¥ ’•’∂÷Ñ ’∞’´’∑’∏’≤’∏÷Ç’©’µ’°’∂ ’¥’•’ª
PRODUCTS = load_products()

# /reload ‚Äî json-’∂’•÷Ä’´÷Å ’∂’∏÷Ä’´÷Å ’Ø’°÷Ä’§’°’¨’∏÷Ç ’∞’°’¥’°÷Ä
@bot.message_handler(commands=['reload'])
def reload_products(msg):
    global PRODUCTS, CATEGORIES
    PRODUCTS = load_products()
    # ’æ’•÷Ä’°’Ø’°’º’∏÷Ç÷Å’•’∂÷Ñ ’Ø’°’ø’•’£’∏÷Ä’´’°’∂ (’∫’°÷Ä’¶ all-in-one, ’Ø’°÷Ä’∏’≤ ’•’Ω ’≠’¥’¢’°’æ’∏÷Ä’•’¨ ’∞’•’ø’∏)
    CATEGORIES = {"‘≤’∏’¨’∏÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä": list(PRODUCTS.keys())}
    bot.reply_to(msg, f"‘±’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’´ ÷Å’°’∂’Ø’® ’©’°÷Ä’¥’°÷Å’æ’•÷Å ‚úÖ ({len(PRODUCTS)} ’∞’°’ø)")

# ---------------- Utils ----------------
def kb_back(text="‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’∞’´’¥’∂’°’Ø’°’∂ ’¥’•’∂’µ’∏÷Ç", data="back_main_menu"):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text, callback_data=data))
    return kb

def build_caption(p: dict) -> str:
    lines = [f"*{p.get('title', p['code'])}*"]
    if p.get("description"):
        lines.append(p["description"])
        lines.append("")
    old = int(p.get("old_price", 0)); new = int(p.get("price", 0))
    if old > 0:
        disc = f" (-{round((old-new)*100/old)}%)" if new and old>new else ""
        lines.append(f"‚ùå ’Ä’´’∂ ’£’´’∂ ‚Äî ~~{old}÷è~~{disc}")
    lines.append(f"‚úÖ ’Ü’∏÷Ä ’£’´’∂ ‚Äî *{new}÷è*")
    if p.get("sold"):
        lines.append(f"üî• ’é’°’≥’°’º’æ’°’Æ’ù *{p['sold']}+ ’∞’°’ø*")
    return "\n".join(lines)

def send_main_menu(chat_id: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üõç ‘Ω’°’∂’∏÷Ç’©", "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤")
    kb.row("üì¶ ‘ª’¥ ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’®", "üéÅ ‘ø’∏÷Ç’∫’∏’∂’∂’•÷Ä")
    kb.row("üîç ’à÷Ä’∏’∂’•’¨ ’°’∫÷Ä’°’∂÷Ñ", "üé° ‘≤’∏’∂’∏÷Ç’Ω ’°’∂’´’æ")
    kb.row("üë§ ‘ª’¥ ’ß’ª’®", "üèÜ ‘º’°’æ’°’£’∏÷Ç’µ’∂’∂’•÷Ä")
    kb.row("‚öôÔ∏è ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä", "üí¨ ’Ä’•’ø’°’§’°÷Ä’± ’Ø’°’∫")
    bot.send_message(chat_id, "‘∏’∂’ø÷Ä’•÷Ñ ’Ω’•’≤’¥’°’Øüëá", reply_markup=kb)

# ---------------- Categories ----------------
CATEGORIES = {"‘≤’∏’¨’∏÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä": list(PRODUCTS.keys())}

@bot.message_handler(func=lambda m: m.text and "’≠’°’∂’∏÷Ç’©" in m.text.lower())
def open_shop(message):
    if not PRODUCTS:
        bot.send_message(message.chat.id, "üôà ‘±’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’´ ÷Å’°’∂’Ø’® ’∞’´’¥’° ’∞’°’Ω’°’∂’•’¨’´ ’π’ß÷â")
        return
    kb = types.InlineKeyboardMarkup(row_width=2)
    for cat in CATEGORIES.keys():
        kb.add(types.InlineKeyboardButton(cat, callback_data=f"cat::{cat}"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’∞’´’¥’∂’°’Ø’°’∂ ’¥’•’∂’µ’∏÷Ç", callback_data="back_main_menu"))
    bot.send_message(message.chat.id, "üõç ‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂’® ‚¨áÔ∏è", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("cat::"))
def open_category(c):
    _, cat = c.data.split("::", 1)
    codes = CATEGORIES.get(cat, [])
    kb = types.InlineKeyboardMarkup(row_width=1)
    for code in codes:
        title = PRODUCTS.get(code, {}).get("title", f"‘±’∫÷Ä’°’∂÷Ñ ‚Äî {code}")
        kb.add(types.InlineKeyboardButton(title, callback_data=f"prod::{code}"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", callback_data="back_shop"))
    try:
        bot.edit_message_text("‘∏’∂’ø÷Ä’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’® ‚¨áÔ∏è", c.message.chat.id, c.message.message_id, reply_markup=kb)
    except Exception:
        bot.send_message(c.message.chat.id, "‘∏’∂’ø÷Ä’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’® ‚¨áÔ∏è", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data=="back_shop")
def back_shop(c):
    kb = types.InlineKeyboardMarkup(row_width=2)
    for cat in CATEGORIES.keys():
        kb.add(types.InlineKeyboardButton(cat, callback_data=f"cat::{cat}"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’∞’´’¥’∂’°’Ø’°’∂ ’¥’•’∂’µ’∏÷Ç", callback_data="back_main_menu"))
    try:
        bot.edit_message_text("üõç ‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂’® ‚¨áÔ∏è", c.message.chat.id, c.message.message_id, reply_markup=kb)
    except Exception:
        bot.send_message(c.message.chat.id, "üõç ‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂’® ‚¨áÔ∏è", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data=="back_main_menu")
def back_main_menu(c):
    send_main_menu(c.message.chat.id)

# ---------------- Product card ----------------
@bot.callback_query_handler(func=lambda c: c.data.startswith("prod::"))
def show_product(c):
    code = c.data.split("::",1)[1]
    p = PRODUCTS.get(code)
    if not p:
        bot.answer_callback_query(c.id, "’â’£’ø’∂’æ’•÷Å üòï"); return
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data=f"add::{code}"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", callback_data="back_shop"))
    try:
        with open(p["photo"], "rb") as ph:
            bot.send_photo(c.message.chat.id, ph, caption=build_caption(p), parse_mode="Markdown", reply_markup=kb)
    except Exception:
        bot.send_message(c.message.chat.id, build_caption(p), parse_mode="Markdown", reply_markup=kb)

# ---------------- Cart ----------------
user_cart = {}          # {user_id: [{"code": "...", "price": 1690, "qty": 1}]}
checkout_state = {}     # {user_id: {"step":1.., ...}}

def cart_subtotal_amd(user_id:int)->int:
    items = user_cart.get(user_id, [])
    return sum(i["price"]*i["qty"] for i in items)

@bot.callback_query_handler(func=lambda c: c.data.startswith("add::"))
def add_to_cart(c):
    user_id = c.from_user.id
    cart_timers[user_id] = time.time()   # ‚Üê ‘±’Ö’ç ’è’à’Ç‘∏ ‘¥’ê‘ª’ê
    user_id = c.from_user.id
    code = c.data.split("::",1)[1]
    p = PRODUCTS.get(code)
    if not p:
        bot.answer_callback_query(c.id, "’â’£’ø’∂’æ’•÷Å"); return
    user_cart.setdefault(user_id, [])
    for it in user_cart[user_id]:
        if it["code"] == code:
            it["qty"] += 1
            break
    else:
        user_cart[user_id].append({"code": code, "price": int(p.get("price",0)), "qty": 1})
    bot.answer_callback_query(c.id, "‘±’æ’•’¨’°÷Å’æ’•÷Å ‚úÖ")

@bot.message_handler(func=lambda m: m.text and "’¶’°’¥’¢’µ’∏÷Ç’≤" in m.text.lower())
def show_cart(m):
    uid = m.from_user.id
    items = user_cart.get(uid, [])
    if not items:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", callback_data="back_shop"))
        bot.send_message(m.chat.id, "üß∫ ‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß÷â", reply_markup=kb)
        return
    subtotal = cart_subtotal_amd(uid)
    lines = ["üß∫ ’Å’•÷Ä ’¶’°’¥’¢’µ’∏÷Ç’≤’®:\n"]
    for idx,i in enumerate(items,1):
        title = PRODUCTS[i["code"]]["title"]
        lines.append(f"{idx}. {title} ‚Äî {i['price']}÷è √ó {i['qty']} = {i['price']*i['qty']}÷è")
    lines.append(f"\nüíµ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä’ù *{subtotal}÷è*")
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ ’ä’°’ø’æ’´÷Ä’•’¨", callback_data="checkout"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", callback_data="back_shop"))
    first_photo = PRODUCTS[items[0]["code"]].get("photo")
    if first_photo:
        try:
            with open(first_photo,"rb") as ph:
                bot.send_photo(m.chat.id, ph, caption="\n".join(lines), parse_mode="Markdown", reply_markup=kb)
                return
        except: pass
    bot.send_message(m.chat.id, "\n".join(lines), parse_mode="Markdown", reply_markup=kb)

# --------- Checkout steps (name -> phone -> address -> receipt) ----------
@bot.callback_query_handler(func=lambda c: c.data=="checkout")
def start_checkout(c):
    uid = c.from_user.id
    subtotal = cart_subtotal_amd(uid)
    if subtotal<=0:
        bot.answer_callback_query(c.id, "‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß"); return
    checkout_state[uid] = {"step": 1, "subtotal": subtotal}
    bot.send_message(c.message.chat.id, "üë§ ‘≥÷Ä’•÷Ñ ’±’•÷Ä ‘±’Ü’à’í’Ü/‘±‘∂‘≥‘±’Ü’à’í’Ü-’®:")

@bot.message_handler(func=lambda m: m.from_user.id in checkout_state and checkout_state[m.from_user.id]["step"]==1)
def take_name(m):
    st = checkout_state[m.from_user.id]; st["name"]=m.text; st["step"]=2
    bot.reply_to(m, "üìû ‘≥÷Ä’•÷Ñ ’Ä‘µ’å‘±‘Ω’à’ç‘±’Ä‘±’Ñ‘±’ê-’®:")

@bot.message_handler(func=lambda m: m.from_user.id in checkout_state and checkout_state[m.from_user.id]["step"]==2)
def take_phone(m):
    st = checkout_state[m.from_user.id]; st["phone"]=m.text; st["step"]=3
    bot.reply_to(m, "üì¶ ‘≥÷Ä’•÷Ñ ’Ä‘±’ç’ë‘µ/’Ñ‘±’Ü’ê‘±’Ñ‘±’ç’Ü‘µ’ê-’®:")

@bot.message_handler(func=lambda m: m.from_user.id in checkout_state and checkout_state[m.from_user.id]["step"]==3)
def take_address(m):
    st = checkout_state[m.from_user.id]; st["addr"]=m.text; st["step"]=4
    text = (
        "üßæ ’ä’°’ø’æ’•÷Ä’´ ’°’¥÷É’∏÷É’∏÷Ç’¥\n"
        f"‘±’∂’∏÷Ç’∂’ù {st['name']}\n’Ä’•’º‚Ä§ {st['phone']}\n’Ä’°’Ω÷Å’•’ù {st['addr']}\n"
        f"‘≥’∏÷Ç’¥’°÷Ä’ù *{st['subtotal']}÷è*\n\n"
        "üì§ ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’é’É‘±’ê’Ñ‘±’Ü ’ç’è‘±’ë‘±‘ø‘±’Ü‘∏ (÷Ü’∏’ø’∏/÷Ü’°’µ’¨):"
    )
    bot.reply_to(m, text, parse_mode="Markdown")

@bot.message_handler(content_types=['photo','document'])
def take_receipt(m):
    uid = m.from_user.id
    st = checkout_state.get(uid)
    if not st or st.get("step")!=4:
        return
    st["step"]=5
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", callback_data="back_shop"))
    bot.reply_to(m, f"’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ üåü ’ä’°’ø’æ’•÷Ä’´ ’£’∏÷Ç’¥’°÷Ä’ù {st['subtotal']}÷è÷â ’Ñ’•÷Ä ÷Ö’∫’•÷Ä’°’ø’∏÷Ä’® ’Ø’∞’°’Ω’ø’°’ø’´ ’¥’∏’ø’°’Ø’° ’™’°’¥’°’∂’°’Ø’∏÷Ç’¥÷â", reply_markup=kb)
    user_cart[uid] = []  # ’¥’°÷Ñ÷Ä’•’∂÷Ñ ’¶’°’¥’¢’µ’∏÷Ç’≤’®
    checkout_state.pop(uid, None)

# ---------------- Exchanges (3 sub menus) ----------------
@bot.message_handler(func=lambda m: m.text and "÷É’∏’≠’°÷Ä’Ø’∏÷Ç’¥" in m.text.lower())
def exchange_menu(m):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("PI ‚ûú USDT", callback_data="ex::pi_usdt"),
        types.InlineKeyboardButton("FTN ‚ûú AMD", callback_data="ex::ftn_amd"),
        types.InlineKeyboardButton("Alipay ‚ûú CNY", callback_data="ex::alipay_cny"),
    )
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’∞’´’¥’∂’°’Ø’°’∂ ’¥’•’∂’µ’∏÷Ç", callback_data="back_main_menu"))
    bot.send_message(m.chat.id, "‚öôÔ∏è ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä ÷á ’æ’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä‚Ä§ ’®’∂’ø÷Ä’•÷Ñ ’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂’® üëá", reply_markup=kb)

EX_TEXTS = {
    "pi_usdt": "üíé *PI ‚ûú USDT*\n‚Ä¢ ‘±÷Ä’°’£ peer-to-peer ÷É’∏’≠’°÷Ä’Ø’∏÷Ç’¥\n‚Ä¢ ’Ñ’´’∂. ’£’∏÷Ç’¥’°÷Ä ‚Äî 50 PI\n‚Ä¢ ‘≥’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’ù 10‚Äì30 ÷Ä’∏’∫’•\n\n’ä’°’ø’æ’´÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’£÷Ä’•÷Ñ ¬´’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥ PI¬ª ÷á ÷Ö’∫’•÷Ä’°’ø’∏÷Ä’® ’Ø’°’∫ ’Ø’∞’°’Ω’ø’°’ø’´÷â",
    "ftn_amd": "üè¶ *FTN ‚ûú AMD*\n‚Ä¢ ’Ä’°÷Ä’¥’°÷Ä ÷É’∏’≠’°÷Ä’Ø’∏÷Ç’¥’ù ’∫’°’µ’¥’°’∂’°’æ’∏÷Ä’æ’°’Æ ’ø’•’¥’∫’•÷Ä’∏’æ\n\n’ä’°’ø’æ’´÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’£÷Ä’•÷Ñ ¬´’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥ FTN¬ª÷â",
    "alipay_cny": "üá®üá≥ *Alipay ‚ûú CNY*\n‚Ä¢ ’â’´’∂’°’Ω’ø’°’∂ ’∂’•÷Ä’Ω’∏÷Ç’¥ ’°÷Ä’°’£ ’æ’≥’°÷Ä’∏÷Ç’¥ Alipay-’∏’æ\n\n’ä’°’ø’æ’´÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’£÷Ä’•÷Ñ ¬´Alipay ’æ’≥’°÷Ä’∏÷Ç’¥¬ª÷â",
}

@bot.callback_query_handler(func=lambda c: c.data.startswith("ex::"))
def exchange_details(c):
    key = c.data.split("::",1)[1]
    text = EX_TEXTS.get(key, "’è’æ’µ’°’¨ ’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂’® ’∑’∏÷Ç’ø’∏’æ÷â")
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("PI ‚ûú USDT", callback_data="ex::pi_usdt"),
        types.InlineKeyboardButton("FTN ‚ûú AMD", callback_data="ex::ftn_amd"),
        types.InlineKeyboardButton("Alipay ‚ûú CNY", callback_data="ex::alipay_cny"),
    )
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ÷Ü’´’∂’°’∂’Ω’°’Ø’°’∂ ’¥’•’∂’µ’∏÷Ç", callback_data="back_exchange"))
    bot.send_message(c.message.chat.id, text, parse_mode="Markdown", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data=="back_exchange")
def back_exchange(c):
    exchange_menu(c.message)

# ---------------- My page (simple) ----------------
USERS_FILE = "data/users.json"
os.makedirs("data", exist_ok=True)
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, ensure_ascii=False)

def get_user(uid:int)->dict:
    try:
        with open(USERS_FILE,"r",encoding="utf-8") as f:
            d = json.load(f)
    except: d = {}
    u = d.get(str(uid), {})
    u.setdefault("orders_count", 0)
    u.setdefault("coupon_balance", 0)
    return u

def save_user(uid:int, u:dict):
    try:
        with open(USERS_FILE,"r",encoding="utf-8") as f:
            d = json.load(f)
    except: d = {}
    d[str(uid)] = u
    with open(USERS_FILE,"w",encoding="utf-8") as f:
        json.dump(d, f, ensure_ascii=False, indent=2)

@bot.message_handler(func=lambda m: m.text and "’´’¥ ’ß’ª" in m.text.lower())
def my_page(m):
    u = get_user(m.from_user.id)
    text = (
        "üë§ *‘ª’¥ ’ß’ª*\n"
        f"’ä’°’ø’æ’•÷Ä’∂’•÷Ä’ù {u.get('orders_count',0)} ’∞’°’ø\n"
        f"‘ø’∏÷Ç’∫’∏’∂’∂’•÷Ä’´ ’¥’∂’°÷Å’∏÷Ä’§’ù {u.get('coupon_balance',0)}÷è\n"
        "\n‘µ’©’• ’∏÷Ç’∂’•÷Ñ ’∞’°÷Ä÷Å ‚Äî ’£÷Ä’•÷Ñ ¬´’Ä’•’ø’°’§’°÷Ä’± ’Ø’°’∫¬ª ’¢’°’™’∂’∏’æ÷â"
    )
    bot.send_message(m.chat.id, text, parse_mode="Markdown", reply_markup=kb_back())


user_orders = {}
user_invites = {}
user_levels = {}
user_coupons = {}
user_referrers = {}
user_referrals = {}
user_invitation_coupons = {}
user_referral_total = {}
user_referral_used = {}
user_coupon_balance = {} 
user_coupon_used = {} 
user_feedbacks = {}
user_cart_time = {} 
user_markup_add = {}
user_profile_photos = {}
user_data = {}
best_selling_products = ["BA100818", "BA100820", "BA100821"]

def calculate_coupon_discount(user_id, total_price):
    # 1. ’Ü’∏÷Ä ÷Ö’£’ø’°’ø’´÷Ä’∏’ª 5%
    first_login_discount = 0
    if user_first_coupon.get(user_id, True):
        first_login_discount = total_price * 0.05

    # 2. ’Ä÷Ä’°’æ’´÷Ä’æ’°’Æ’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø’∏’æ ’Ø’∏÷Ç’∫’∏’∂ (5% ’Ø’°’¥ 10%)
    invitation_discount = 0
    invitation_percent = user_invitation_coupons.get(user_id, 0)
    if invitation_percent:
        invitation_discount = total_price * (invitation_percent / 100)

    # 3. ’Ä÷Ä’°’æ’´÷Ä’µ’°’¨’∂’•÷Ä’´ ’£’∂’∏÷Ç’¥’´÷Å ’Ø’∏÷Ç’ø’°’Ø’æ’°’Æ ’Ø’∏÷Ç’∫’∏’∂
    total = user_referral_total.get(user_id, 0)
    used = user_referral_used.get(user_id, 0)
    available = total - used

    # ‘ø’°÷Ä’•’¨’´ ’ß ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨’ù ’´÷Ä ’Ø’∏÷Ç’ø’°’Ø’æ’°’Æ’´ 20%, ’¢’°’µ÷Å ’∏’π ’°’æ’•’¨ ’£’∂’¥’°’∂ 10%-’´÷Å
    max_from_accumulated = min(available * 0.20, total_price * 0.10)

    # ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’¶’•’≤’π ÷á ’æ’•÷Ä’ª’∂’°’Ø’°’∂ ’£’´’∂
    total_discount = first_login_discount + invitation_discount + max_from_accumulated
    final_price = total_price - total_discount

    # ’è’•÷Ñ’Ω’ø’ù ’°’¥÷É’∏÷É’∏÷Ç’¥
    breakdown = f"""üí∏ ‘∂’•’≤’π’•÷Ä’´ ’°’¥÷É’∏÷É’∏÷Ç’¥:
üîπ ’Ü’∏÷Ä ’∞’°’≥’°’≠’∏÷Ä’§’´ ’¶’•’≤’π ‚Äî {int(first_login_discount)}÷è
üîπ ’Ä÷Ä’°’æ’•÷Ä’°’µ’´’∂ ’¶’•’≤’π ‚Äî {int(invitation_discount)}÷è
üîπ ‘ø’∏÷Ç’ø’°’Ø’æ’°’Æ’´÷Å ’Ø’´÷Ä’°’º’æ’°’Æ ‚Äî {int(max_from_accumulated)}÷è
üìâ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’¶’•’≤’π ‚Äî {int(total_discount)}÷è
üí∞ ’é’•÷Ä’ª’∂’°’Ø’°’∂ ’£’´’∂ ‚Äî {int(final_price)}÷è
"""

    return int(final_price), breakdown, {
        "first_login_discount": first_login_discount,
        "invitation_discount": invitation_discount,
        "accumulated_used": max_from_accumulated
    }

def apply_coupon_usage(user_id, discount_details):
    if discount_details["first_login_discount"] > 0:
        user_first_coupon[user_id] = False

    if discount_details["invitation_discount"] > 0:
        user_invitation_coupons[user_id] = 0

    if discount_details["accumulated_used"] > 0:
        used = user_referral_used.get(user_id, 0)
        user_referral_used[user_id] = used + int(discount_details["accumulated_used"])
def reward_referrer_on_purchase(buyer_id, order_amount):
    referrer_id = user_referrers.get(buyer_id)
    if referrer_id:
        bonus = int(order_amount * 0.05)
        current = user_referral_total.get(referrer_id, 0)
        user_referral_total[referrer_id] = current + bonus


def register_referrer(new_user_id, referrer_id):
    if new_user_id == referrer_id:
        return  # ’â’´ ’Ø’°÷Ä’•’¨’´ ’´’∂÷Ñ’∂ ’´÷Ä’•’∂ ’∞÷Ä’°’æ’´÷Ä’•’¨

    if new_user_id not in user_referrers:
        user_referrers[new_user_id] = referrer_id

        if referrer_id not in user_referrals:
            user_referrals[referrer_id] = []
        if new_user_id not in user_referrals[referrer_id]:
            user_referrals[referrer_id].append(new_user_id)

            if referrer_id not in user_coupon_balance:
                user_coupon_balance[referrer_id] = 0
            user_coupon_balance[referrer_id] += 5  # ’Ö’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’£÷Ä’°’∂÷Å’æ’°’Æ’´ ’∞’°’¥’°÷Ä 5%

            count = len(user_referrals[referrer_id])
            if count % 10 == 0:
                user_invitation_coupons[referrer_id] = 10
            elif count % 5 == 0:
                user_invitation_coupons[referrer_id] = 5
    if count == 10:
        user_loyalty[user_id] = user_loyalty.get(user_id, 0) + 10

    if referrer_id not in user_referral_used:
        user_referral_used[referrer_id] = 0

    if referrer_id not in user_referral_total:
        user_referral_total[referrer_id] = 0

    user_referral_total[referrer_id] += 5

def get_user_discount(user_id):
    total = user_referral_total.get(user_id, 0)
    used = user_referral_used.get(user_id, 0)
    return max(0, total - used)

@bot.message_handler(func=lambda message: message.text == "üîñ ‘ø’´÷Ä’°’º’•’¨ ’Ø’∏÷Ç’∫’∏’∂")
def apply_coupon(message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, {})
    if not cart:
        bot.send_message(user_id, "üõí ’Å’•÷Ä ’¶’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß÷â")
        return

    total_price = calculate_cart_total(user_id)
    final_price, breakdown, discount_details = calculate_coupon_discount(user_id, total_price)

    apply_coupon_usage(user_id, discount_details)

    bot.send_message(user_id, f"""
üí∞ ‘∂’•’≤’π’•÷Ä ’Ø’´÷Ä’°’º’æ’°’Æ ’•’∂.

‘±’º’°’ª’´’∂ ’£’∂’∏÷Ç’¥’´ ’¶’•’≤’π’ù {breakdown['first_login_discount']}÷è  
’Ä÷Ä’°’æ’•÷Ä’´ ’Ø’∏÷Ç’∫’∏’∂’ù {breakdown['invitation_discount']}÷è  
‘ø’∏÷Ç’ø’°’Ø’æ’°’Æ ’Ø’∏÷Ç’∫’∏’∂’ù {breakdown['accumulated_used']}÷è  

üíµ ’é’≥’°÷Ä’•’¨’∏÷Ç ’•÷Ñ’ù {final_price}÷è
""")

    show_cart(message)
@bot.message_handler(func=lambda message: message.text == "üíå ’Ä÷Ä’°’æ’´÷Ä’´÷Ä ’®’∂’Ø’•÷Ä’∏’ª’§")
def invite_friend(message):
    user_id = message.from_user.id
    invite_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    bot.send_message(user_id, f"""
üì£ ’à÷Ç’¶’∏÷Ç’û’¥ ’•÷Ñ ’¶’•’≤’π ’Ω’ø’°’∂’°’¨÷â  
üöÄ ’à÷Ç’≤’°÷Ä’Ø’•÷Ñ ’°’µ’Ω ’∞’≤’∏÷Ç’¥’® ’±’•÷Ä ’®’∂’Ø’•÷Ä’∂’•÷Ä’´’∂ ÷á ’Ω’ø’°÷Å’•÷Ñ ’Ø’∏÷Ç’∫’∏’∂ ’µ’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’£÷Ä’°’∂÷Å’¥’°’∂ ’∞’°’¥’°÷Ä÷â

üîó ’Å’•÷Ä ’∞÷Ä’°’æ’•÷Ä’´ ’∞’≤’∏÷Ç’¥’®’ù  
{invite_link}
""")

# --- Persistent customer counter (stored on disk) ---
import os
DATA_DIR = os.path.join(os.path.dirname(__file__), "data")
os.makedirs(DATA_DIR, exist_ok=True)
COUNTER_FILE = os.path.join(DATA_DIR, "customer_counter.txt")

def load_counter():
    try:
        with open(COUNTER_FILE, "r", encoding="utf-8") as f:
            return int(f.read().strip() or "0")
    except Exception:
        return 0

def save_counter(v: int):
    try:
        with open(COUNTER_FILE, "w", encoding="utf-8") as f:
            f.write(str(v))
    except Exception:
        pass

customer_counter = load_counter()

# ================== START + WELCOME (FINAL) ==================

@bot.message_handler(commands=['start'])
def start_handler(m: types.Message):
    # ’¥’´’°’µ’∂ private chat-’∏÷Ç’¥ ’°÷Ä’±’°’£’°’∂÷Ñ’•’∂÷Ñ (’≠’¥’¢’∏÷Ç’¥ /start-’® ’π’°’∂’•’∂÷Ñ)
    if getattr(m.chat, "type", "") != "private":
        return

    print(f"START from {m.from_user.id}")

    # referral parameter (÷Ö÷Ä. /start 12345)
    try:
        parts = (m.text or "").strip().split(maxsplit=1)
        if len(parts) == 2 and parts[1].isdigit():
            register_invite(m.from_user.id, int(parts[1]))
    except Exception:
        pass

    # Welcome UI
    try:
        send_welcome(m)
    except Exception as e:
        import traceback
        print("send_welcome ERROR:", e)
        print(traceback.format_exc())     

def send_welcome(message: types.Message):
    # Í≥†Í∞ù ’∞’°’¥’°÷Ä (customer_no) ‚Äî ’°’∫’°’∞’∏’æ ’°’≥’•÷Å’∏÷Ç’¥, ’•’©’• ’∏÷Ç’∂’•’Ω counter
    customer_no = 0
    try:
        global customer_counter
        customer_counter += 1
        try:
            save_counter(customer_counter)
        except Exception:
            pass
        customer_no = customer_counter
    except Exception:
        # ’•’©’• ’π’∏÷Ç’∂’•’Ω ’æ’•÷Ä÷á’´ counter-’®, ÷É’∏÷Ä’±’´ ÷Ñ’∏ helper-’®
        try:
            customer_no = get_next_customer_no()
        except Exception:
            customer_no = 0

    # ---- ÷Ñ’∏ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç’∂
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõç ‘Ω’°’∂’∏÷Ç’©", "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤")
    markup.add("üì¶ ‘ª’¥ ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’®", "üéÅ ‘ø’∏÷Ç’∫’∏’∂’∂’•÷Ä")
    markup.add("üîç ’à÷Ä’∏’∂’•’¨ ’°’∫÷Ä’°’∂÷Ñ", "üé° ‘≤’∏’∂’∏÷Ç’Ω ’°’∂’´’æ")
    markup.add("üßç ‘ª’¥ ’ß’ª’®", "üèÜ ‘º’°’æ’°’£’∏÷Ç’µ’∂’∂’•÷Ä")
    markup.add("üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä", "üí¨ ’Ä’•’ø’°’§’°÷Ä’± ’Ø’°’∫")
    markup.add("’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´")

    # ---- ’î’∏ ‘±’Ü’â’ì’à‘Ω ’à’Ç’ã’à’í’Ö’Ü‘ª ’è‘µ’î’ç’è‘∏ (’≥’´’∑’ø Í∑∏ÎåÄÎ°ú) ----
    welcome_text = (
        "üê∞üå∏ ‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø BabyAngels üõçÔ∏è‚ú®\n\n"
        "üíñ ’á’∂’∏÷Ä’∞’°’Ø’°’¨ ’•’∂÷Ñ, ’∏÷Ä ’¥’´’°÷Å’•’¨ ’•÷Ñ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’®’∂’ø’°’∂’´÷Ñ’´’∂ ‚ù§Ô∏è\n"
        f"‘¥’∏÷Ç÷Ñ ’°’µ’™’¥ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’≥’°’≠’∏÷Ä’§’∂ ’•÷Ñ ‚Ññ{customer_no} ‚ú®\n"
        "’Ñ’•÷Ä ’≠’°’∂’∏÷Ç’©’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’£’ø’∂’•’¨ ’°’¥’•’∂ ÷Ö÷Ä ÷Ö’£’ø’°’Ø’°÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’´ ’£’Æ’∏’æ ’¨’°’æ’°’£’∏÷Ç’µ’∂ ’£’∂’•÷Ä’®÷â\n\n"
        "üéÅ ‘±’Ø’ø’´’æ ’∑’°’∂’Ω’ù ’°’º’°’ª’´’∂ ’£’∂’¥’°’∂÷Å ’∞’•’ø’∏ ’Ø’Ω’ø’°’∂’°÷Ñ 10% ’¶’•’≤’π ’∞’°’ª’∏÷Ä’§ ’∫’°’ø’æ’•÷Ä’´ ’∞’°’¥’°÷Ä÷â\n\n"
        "üì¶ ‘ª’û’∂’π ’Ø’£’ø’∂’•÷Ñ ’°’µ’Ω’ø’•’≤\n"
        "‚Ä¢ ‘∫’°’¥’°’∂’°’Ø’´’∂ ÷á ÷Ö’£’ø’°’Ø’°÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’ù ’°’¥’•’∂ ÷Ö÷Ä ’©’°÷Ä’¥’°÷Å’æ’∏’≤ ’ø’•’Ω’°’Ø’°’∂’´’∏’æ\n"
        "‚Ä¢ ‘º’∏’µ’°’¨ ’°’Ø÷Å’´’°’∂’•÷Ä ÷á ’°÷Ä’°’£ ’°÷Ä’±’°’£’°’∂÷Ñ Telegram ’°’ª’°’Ø÷Å’∏÷Ç’©’µ’°’¥’¢\n"
        "‚Ä¢ ’Ä’°÷Ä’¥’°÷Ä’•÷Å’æ’°’Æ ÷á ’°÷Ä’°’£ ’°’º’°÷Ñ’∏÷Ç’¥ üöö\n\n"
        "üí≥ ’ì’∏’≠’°÷Ä’Ø’¥’°’∂ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä\n"
        "‚Ä¢ PI ‚ûú USDT (’∑’∏÷Ç’Ø’°’µ’°’Ø’°’∂ ’Ø’∏÷Ç÷Ä’Ω, +20% ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥)\n"
        "‚Ä¢ FTN ‚ûú AMD (’¥’´’°’µ’∂ 10% ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥)\n"
        "‚Ä¢ Alipay ’¨’´÷Å÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥ (1 CNY = 58÷è)\n\n"
        "‚ú® ‘±’æ’•’¨’´ ’°÷Ä’°’£’ù ’∫’°÷Ä’¶’°’∫’•’Ω ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ ’∞’°÷Ä÷Å’® ’∂’•÷Ä÷Ñ÷á’∏÷Ç’¥ üëá"
    )

    # ---- ’∏÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’¨’∏÷Ç’Ω’°’∂’Ø’°÷Ä’∏’æ (’•’©’• ’Ø’°), ’°’µ’¨’°’∫’•’Ω’ù ’ø’•÷Ñ’Ω’ø’∏’æ
    try:
        img_path = os.path.join(os.path.dirname(__file__), "media", "bunny.jpg")
        if os.path.exists(img_path):
            with open(img_path, "rb") as ph:
                bot.send_photo(
                    message.chat.id,
                    ph,
                    caption=welcome_text,
                    reply_markup=markup
                )
        else:
            bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
    except Exception:
        bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

    # ’®’Ω’ø ÷Å’°’∂’Ø’∏÷Ç’©’µ’°’∂’ù ’°’º’°’ª’´’∂ ’£’∂’∏÷Ç’¥’´ ’¢’∏’∂’∏÷Ç’Ω/÷Ö’£’ø’°’ø’´÷Ä’∏’ª state
    try:
        if 'ensure_first_order_bonus' in globals():
            ensure_first_order_bonus(message.from_user.id)
    except Exception:
        pass

# ================== /END START + WELCOME ==================

        
@bot.message_handler(func=lambda m: m.text and m.text.strip().endswith("‘Ω’°’∂’∏÷Ç’©"))
def open_shop(message):
    try:
        kb = household_menu()  # ÷Ñ’∏ ’°÷Ä’§’•’∂ ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’•÷Å’∏’≤ InlineKeyboardMarkup-’∂
        bot.send_message(
            message.chat.id,
            "üõç ‘∏’∂’ø÷Ä’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’® ‚¨áÔ∏è",
            reply_markup=kb
        )
    except Exception as e:
        bot.send_message(message.chat.id, "üôà ‘±’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’´ ÷Å’°’∂’Ø’® ’∞’´’¥’° ’∞’°’Ω’°’∂’•’¨’´ ’π’ß÷â")
# --- ‘≤’à‘º’à’ê ‘ø’à’É‘±‘ø’Ü‘µ’ê‘ª ’å’à’í’è‘µ’ê (’¥’´ ’ø’•’≤’´÷Å ’Ø’°’º’°’æ’°÷Ä’∏÷Ç’¥) ---
def _norm(t: str) -> str:
    if not t:
        return ""
    return t.replace("\u200d", "").replace("\ufe0f", "").strip()

MENU_HANDLERS = {
    "üõç ‘Ω’°’∂’∏÷Ç’©": lambda m: open_shop(m),  # ’î‘±’Ö‘º 1-’∏’æ ’°÷Ä’§’•’∂ ’∏÷Ç’∂’•’Ω open_shop
    "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤": lambda m: bot.send_message(m.chat.id, "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’¢’°÷Å’æ’•÷Å"),
    "üì¶ ‘ª’¥ ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’®": lambda m: bot.send_message(m.chat.id, "üì¶ ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ’±’•÷Ä ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’®"),
    "üéÅ ‘ø’∏÷Ç’∫’∏’∂’∂’•÷Ä": lambda m: bot.send_message(m.chat.id, "üéÅ ‘ø’∏÷Ç’∫’∏’∂’∂’•÷Ä’´ ’¢’°’™’´’∂"),
    "üîç ’à÷Ä’∏’∂’•’¨ ’°’∫÷Ä’°’∂÷Ñ": lambda m: bot.send_message(m.chat.id, "üîé ‘≥÷Ä’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’´ ’°’∂’∏÷Ç’∂’®"),
    "üé° ‘≤’∏’∂’∏÷Ç’Ω ’°’∂’´’æ": lambda m: bot.send_message(m.chat.id, "üé° ’á’∏÷Ç’ø’∏’æ ’Ø’°’Ø’ø’´’æ’°÷Å’∂’•’∂÷Ñ"),
    "üßç ‘ª’¥ ’ß’ª’®": lambda m: bot.send_message(m.chat.id, "üë§ ’Å’•÷Ä ’∫÷Ä’∏÷Ü’´’¨’®"),
    "üèÜ ‘º’°’æ’°’£’∏÷Ç’µ’∂’∂’•÷Ä": lambda m: bot.send_message(m.chat.id, "üèÜ ‘π’∏÷É ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä"),
    "üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä": lambda m: bot.send_message(m.chat.id, "üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä’´ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂"),
    "üí¨ ’Ä’•’ø’°’§’°÷Ä’± ’Ø’°’∫": lambda m: bot.send_message(m.chat.id, "üí¨ ‘≥÷Ä’•÷Ñ ’±’•÷Ä ’∞’°÷Ä÷Å’®"),
    "’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´": lambda m: bot.send_message(m.chat.id, "ü§ù ’Ä÷Ä’°’æ’´÷Ä’•’¨’∏÷Ç ’∞’≤’∏÷Ç’¥’® ’∑’∏÷Ç’ø’∏’æ"),
}
def start(m):
    # referral (÷Ö’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’•’∂÷Ñ ÷Ñ’∏ ’°÷Ä’§’•’∂ ’£÷Ä’°’Æ helper-’®)
    __capture_ref__(m)

    # debug ’±÷á, ’∏÷Ä ’ø’•’Ω’∂’•’Ω ’∞’°’Ω’∂’∏÷Ç’¥ ’ß
    _dbg_start(m)

    # welcome UI ÷á ’¥’∂’°÷Å’°’Æ’®
    send_welcome(m)

@bot.message_handler(func=lambda m: _norm(m.text) in {_norm(k) for k in MENU_HANDLERS})
def _route_menu(message):
    key = [k for k in MENU_HANDLERS if _norm(k) == _norm(message.text)][0]
    MENU_HANDLERS[key](message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("prod_"))
def show_product(call):
    # ’°’µ’Ω’ø’•’≤ ’¢’°÷Å’∏÷Ç’¥ ’•’Ω prod ÷Ñ’°÷Ä’ø’®. ’∞’´’¥’°’ù ’∫’°÷Ä’¶ ’∞’°’Ω’ø’°’ø’∏÷Ç’¥
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, f"üì¶ ‘≤’°÷Å’•’¨ ’•’Ω ’°’∫÷Ä’°’∂÷Ñ’®’ù {call.data}")

# ========== ‘≤‘∏‘∫‘±‘ø’Ü‘µ’ê‘ª ’Ä‘±’Ü‘¥‘º‘µ’ê’Ü‘µ’ê (ReplyKeyboard) ==========
def send_pretty(chat_id: int, title: str, body: str = "", kb=None):
    text = f"{title}\n\n{body}" if body else title
    bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üõç ‘Ω’°’∂’∏÷Ç’©")
def open_shop(message):
    body = (
        "‚ú® ‘π’•÷Ä’©’´÷Ä ’ø’•’Ω’°’Ø’°’∂’´’∂, ’Ω’•’≤’¥’´÷Ä ’°’∫÷Ä’°’∂÷Ñ’´ ’æ÷Ä’° ÷á ’°’æ’•’¨’°÷Å÷Ä’∏÷Ç **‘∂’°’¥’¢’µ’∏÷Ç’≤**÷â\n"
        "üì¶ ‘±’º’°÷Ñ’∏÷Ç’¥’®’ù ’Ä’Ä ’°’¥’¢’∏’≤’ª ’ø’°÷Ä’°’Æ÷Ñ’∏÷Ç’¥, ’∞’°’≥’°’≠’ù *’°’∂’æ’≥’°÷Ä*÷â\n"
        "üëá ’ç’Ø’Ω’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’£÷Ä’´÷Ä’ù *’à÷Ä’∏’∂’•’¨ ’°’∫÷Ä’°’∂÷Ñ* ’Ø’°’¥ ’°’∂÷Å’´÷Ä ’¢’°’™’´’∂’∂’•÷Ä’´’∂÷â"
    )
    send_pretty(message.chat.id, "üõç **‘Ω’°’∂’∏÷Ç’© ‚Äî ’∂’∏÷Ä ’ø’•’Ω’°’Ø’°’∂’´**", body)

@bot.message_handler(func=lambda m: m.text == "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤")
def open_cart(message):
    try:
        show_cart(message)  # ’•’©’• ’∏÷Ç’∂’•’Ω ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂
    except NameError:
        send_pretty(message.chat.id, "üõí **‘∂’°’¥’¢’µ’∏÷Ç’≤**", "‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’™’°’¥’°’∂’°’Ø’°’æ’∏÷Ä’°’∫’•’Ω ’§’°’ø’°÷Ä’Ø ’ß üôà")

@bot.message_handler(func=lambda m: m.text == "üì¶ ‘ª’¥ ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’®")
def my_orders(message):
    body = "‘ø’ø’•’Ω’∂’•’Ω ÷Ñ’∏ ’¢’∏’¨’∏÷Ä ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’´ ’Ø’°÷Ä’£’°’æ’´’≥’°’Ø’∂’•÷Ä’®÷â ’á’∏÷Ç’ø’∏’æ’ù ’Æ’°’∂’∏÷Ç÷Å’∏÷Ç’¥’∂’•÷Ä üì¨"
    send_pretty(message.chat.id, "üì¶ **‘ª’¥ ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’®**", body)

@bot.message_handler(func=lambda m: m.text == "üéÅ ‘ø’∏÷Ç’∫’∏’∂’∂’•÷Ä")
def coupons(message):
    body = (
        "üè∑ ‘±’µ’Ω’ø’•’≤ ’Ø’∞’°’µ’ø’∂’æ’•’∂ ÷Ñ’∏ ’Ø’∏÷Ç’∫’∏’∂’∂’•÷Ä’∂ ’∏÷Ç ’¢’∏’∂’∏÷Ç’Ω ’¥’´’°’æ’∏÷Ä’∂’•÷Ä’®÷â\n"
        "üí° ‘±’º’°’ª’´’∂ ’∫’°’ø’æ’•÷Ä’´’∂ ’∞’°’≥’°’≠’∏÷Ä’§’∂’•÷Ä’® ’∏÷Ç’∂’•’∂ **5% ’¶’•’≤’π**÷â"
    )
    send_pretty(message.chat.id, "üéÅ **‘ø’∏÷Ç’∫’∏’∂’∂’•÷Ä ÷á ’¢’∏’∂’∏÷Ç’Ω’∂’•÷Ä**", body)

@bot.message_handler(func=lambda m: m.text == "üîç ’à÷Ä’∏’∂’•’¨ ’°’∫÷Ä’°’∂÷Ñ")
def search_product(message):
    body = "‘≥÷Ä’´’õ÷Ä ’°’∫÷Ä’°’∂÷Ñ’´ ’°’∂’∏÷Ç’∂’® ’Ø’°’¥ ’¢’°’∂’°’¨’´ ’¢’°’º (÷Ö÷Ä‚Ä§ *’∑’∏÷Ä, ’≠’°’≤’°’¨’´÷Ñ, ’Ø÷Ä’•’¥*)."
    send_pretty(message.chat.id, "üîç **’à÷Ä’∏’∂’•’¨ ’°’∫÷Ä’°’∂÷Ñ**", body)

@bot.message_handler(func=lambda m: m.text == "üé° ‘≤’∏’∂’∏÷Ç’Ω ’°’∂’´’æ")
def bonus_wheel(message):
    body = "’á’∏÷Ç’ø’∏’æ ’Ø’∞’°’µ’ø’∂’æ’´ üé° ’≠’°’≤’°÷Ä’Ø’°’µ’´’∂ ’°’∂’´’æ’®’ù ’∂’æ’•÷Ä’∂’•÷Ä’∏’æ ’∏÷Ç ’¶’•’≤’π’•÷Ä’∏’æ÷â ’Ñ’∂’°’õ ’∞’•’ø’°’∫’∂’§’¥’°’∂ ’¥’•’ª üòâ"
    send_pretty(message.chat.id, "üé° **‘≤’∏’∂’∏÷Ç’Ω ’°’∂’´’æ**", body)

@bot.message_handler(func=lambda m: m.text == "üßç ‘ª’¥ ’ß’ª’®")
def my_profile(message):
    body = "‘±’µ’Ω’ø’•’≤ ’Ø’∞’°’æ’°÷Ñ’æ’•’∂ ÷Ñ’∏ ’ø’æ’µ’°’¨’∂’•÷Ä’®, ’¢’∏’∂’∏÷Ç’Ω’∂’•÷Ä’® ÷á ’∂’°’≠’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®÷â"
    send_pretty(message.chat.id, "üßç **‘ª’¥ ’ß’ª’®**", body)

@bot.message_handler(func=lambda m: m.text == "üèÜ ‘º’°’æ’°’£’∏÷Ç’µ’∂’∂’•÷Ä")
def bestsellers(message):
    body = "’è’•’Ω ’¥’•÷Ä ’°’¥’•’∂’°’∫’°’∞’°’∂’ª’æ’°’Æ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’® ‚≠êÔ∏è ’é’Ω’ø’°’∞’æ’°’Æ ’∏÷Ä’°’Ø, ’Ω’´÷Ä’•’¨’´ ’£’∂’•÷Ä÷â"
    send_pretty(message.chat.id, "üèÜ **‘º’°’æ’°’£’∏÷Ç’µ’∂’∂’•÷Ä**", body)

@bot.message_handler(func=lambda m: m.text == "üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä")
def exchange_menu(message):
    body = (
        "’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’°÷Ä’°’£ ’∏÷Ç ’∞’∏÷Ç’Ω’°’¨’´’ù\n"
        "‚Ä¢ PI ‚ûú USDT\n‚Ä¢ FTN ‚ûú AMD\n‚Ä¢ Alipay ‚ûú CNY\n\n"
        "‚úçÔ∏è ’à÷Ç’≤’°÷Ä’Ø’´’õ÷Ä ’£’∏÷Ç’¥’°÷Ä’®/’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂’®, ’Å‘µ‘∂ ’Ø’æ’•÷Ä’°’§’°÷Ä’±’∂’•’¥ ’∞’Ω’ø’°’Ø ’°’º’°’ª’°÷Ä’Ø’∏’æ÷â"
    )
    send_pretty(message.chat.id, "üí± **’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä**", body)

@bot.message_handler(func=lambda m: m.text == "üí¨ ’Ä’•’ø’°’§’°÷Ä’± ’Ø’°’∫")
def feedback_menu(message):
    body = "‘≥÷Ä’•÷Ñ ’±’•÷Ä ’∞’°÷Ä÷Å’®/’¥’ø’°’∞’∏’£’∏÷Ç’©’µ’∏÷Ç’∂’®, ’∫’°’ø’°’Ω’≠’°’∂ ’•’¥ ’ø’°’¨’´’Ω ’∞’∂’°÷Ä’°’æ’∏÷Ä’´’∂’Ω ’°÷Ä’°’£ üôå"
    send_pretty(message.chat.id, "üí¨ **’Ä’•’ø’°’§’°÷Ä’± ’Ø’°’∫**", body)

@bot.message_handler(func=lambda m: m.text == "’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´")
def invite_friends_btn(message):
    try:
        invite_friend(message)  # ’•’©’• ’∏÷Ç’∂’•’Ω ’°’µ’Ω ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂
    except Exception:
        send_pretty(message.chat.id, "ü§ù **’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´**",
                    "’ç’ø’°÷Å’´÷Ä ’∞’≤’∏÷Ç’¥ ÷á ’ø’°÷Ä’°’Æ’´÷Ä‚Ä§ ’µ’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’°’Ø’ø’´’æ ’∞÷Ä’°’æ’•÷Ä’´ ’∞’°’¥’°÷Ä’ù ’¢’∏’∂’∏÷Ç’Ω üéÅ")


# ---------- ‘Ω’°’∂’∏÷Ç’©’´ ’¥’•’∂’µ’∏÷Ç’∂ (÷Ñ’∏ ’ø’°÷Ä’¢’•÷Ä’°’Ø’® ’¨’°’æ’∂ ’ß, ’©’∏’≤ Í∑∏ÎåÄÎ°ú ’¥’∂’°)
# ===================== PRODUCTS: Load/Save + Show (FULL) =====================
import os, json, random
from telebot import types

PRODUCTS_DIR = "products"           # JSON-’∂’•÷Ä’´ ’∫’°’∂’°’Ø’®
MEDIA_DIR    = "media/products"     # ’Ü’Ø’°÷Ä’∂’•÷Ä’´ ’∫’°’∂’°’Ø’®
PRODUCTS     = {}                   # { "BA100810": {...}, ... }

def _ensure_dirs():
    os.makedirs(PRODUCTS_DIR, exist_ok=True)
    os.makedirs(MEDIA_DIR, exist_ok=True)

from telebot import types

@bot.callback_query_handler(func=lambda c: c.data in PRODUCTS)
def show_product(c):
    p = PRODUCTS[c.data]
    bot.answer_callback_query(c.id)
    try:
        with open(p["photo"], "rb") as ph:
            kb = types.InlineKeyboardMarkup()
            kb.add(
                types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data=f"add_{p['code']}"),
                types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", callback_data="back_shop"),
            )
            bot.send_photo(c.message.chat.id, ph, caption=build_caption(p),
                           parse_mode="Markdown", reply_markup=kb)
    except Exception:
        kb = types.InlineKeyboardMarkup()
        kb.add(
            types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data=f"add_{p['code']}"),
            types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", callback_data="back_shop"),
        )
        bot.send_message(c.message.chat.id, build_caption(p), parse_mode="Markdown", reply_markup=kb)


def save_product(p):
    """’ä’°’∞’∫’°’∂’∏÷Ç’¥ ’ß ’¥’•’Ø ’°’∫÷Ä’°’∂÷Ñ’´ json-’® products/ ’∫’°’∂’°’Ø’∏÷Ç’¥"""
    _ensure_dirs()
    path = os.path.join(PRODUCTS_DIR, f"{p['code']}.json")
    with open(path, "w", encoding="utf-8") as f:
        json.dump(p, f, ensure_ascii=False, indent=2)

def build_caption(p):
    """‘ø’°’¶’¥’∏÷Ç’¥ ’ß ’°’∫÷Ä’°’∂÷Ñ’´ ÷Ñ’°÷Ä’ø’´ ’∂’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®"""
    lines = []
    lines.append(f"**{p['title']}**")
    if p.get("description"):
        lines.append(p["description"])
        lines.append("")  # ’§’°’ø’°÷Ä’Ø ’ø’∏’≤
    # ’£’∂’´ ’¥’°’Ω’∂
    try:
        discount = 0
        if p["old_price"] and p["old_price"] > p["price"]:
            discount = round((p["old_price"] - p["price"]) * 100 / p["old_price"])
        old_line = f"‚ùå ’Ä’´’∂ ’£’´’∂ ‚Äî ~~{p['old_price']}÷è~~" + (f" (-{discount}%)" if discount else "")
    except Exception:
        old_line = f"‚ùå ’Ä’´’∂ ’£’´’∂ ‚Äî ~~{p.get('old_price','')}÷è~~"
    lines.append(old_line)
    lines.append(f"‚úÖ ’Ü’∏÷Ä ’£’´’∂ ‚Äî **{p['price']}÷è**")
    lines.append(f"üî• ’é’°’≥’°’º’æ’°’Æ’ù **{p.get('fake_sales', 0)}+ ’∞’°’ø**")
    return "\n".join(lines)


# ---------- ‘±’∫÷Ä’°’∂÷Ñ’´ ’¢’°÷Å’∏÷Ç’¥ (’¥‘ª‘±‘ø handler’ù ’°’∑’≠’°’ø’∏÷Ç’¥ ’ß ’©’• 'BA‚Ä¶', ’©’• 'prod_BA‚Ä¶')
@bot.callback_query_handler(
    func=lambda c: (c.data in PRODUCTS) or (c.data.startswith('prod_') and c.data.replace('prod_', '') in PRODUCTS)
)
def show_product(c):
    code = c.data.replace("prod_", "")
    if code not in PRODUCTS:
        bot.answer_callback_query(c.id, text="’â’£’ø’∂’æ’•÷Å")
        return
    p = PRODUCTS[code]
    bot.answer_callback_query(c.id)

    # Inline ’Ø’∏’≥’°’Ø’∂’•÷Ä
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data=f"add_{code}"),
        types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", callback_data="back_shop"),
    )

    # ’ì’∏÷Ä’±’•’∂÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ 1-’´’∂ ’∂’Ø’°÷Ä’®, ’°’µ’¨’°’∫’•’Ω’ù ’¥’´’°’µ’∂ ’ø’•÷Ñ’Ω’ø
    sent = False
    if p.get("images"):
        img_name = p["images"][0]
        img_path = os.path.join(MEDIA_DIR, img_name)  # ’Ü‘ø‘±’ê‘∏ media/products/ ’∫’°’∂’°’Ø’∏÷Ç’¥
        if os.path.isfile(img_path):
            try:
                with open(img_path, "rb") as ph:
                    bot.send_photo(
                        c.message.chat.id, ph,
                        caption=build_caption(p),
                        parse_mode="Markdown",
                        reply_markup=kb
                    )
                    sent = True
            except Exception:
                sent = False
    if not sent:
        bot.send_message(
            c.message.chat.id,
            build_caption(p),
            parse_mode="Markdown",
            reply_markup=kb
        )

# ---------- ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©
@bot.callback_query_handler(func=lambda c: c.data == "back_shop")
def back_shop(c):
    bot.answer_callback_query(c.id)
    try:
        bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id)
    except Exception:
        pass
    bot.send_message(c.message.chat.id, "üõç ‘∏’∂’ø÷Ä’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’® ‚¨áÔ∏è", reply_markup=household_menu())

# ---------- ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤ (+1 fake sales ÷á ’∫’°’∞’∫’°’∂’∏÷Ç’¥ JSON-’∏÷Ç’¥)
@bot.callback_query_handler(func=lambda c: c.data.startswith("add_"))
def add_to_cart(c):
    ...
    cart_timers[c.from_user.id] = time.time()  # ‚Üê ‘±’Ö’ç ’è’à’Ç‘∏ ‘¥’ê‘ª’ê

    code = c.data.replace("add_", "")
    if code in PRODUCTS:
        user_carts.setdefault(c.from_user.id, {})
        user_carts[c.from_user.id][code] = user_carts[c.from_user.id].get(code, 0) + 1
        cart_timers[c.from_user.id] = time.time()
    bot.answer_callback_query(c.id, text="‘±’∫÷Ä’°’∂÷Ñ’® ’°’æ’•’¨’°÷Å’æ’•÷Å ’¶’°’¥’¢’µ’∏÷Ç’≤ üëå")

# ---------------------- ’î’°’µ’¨ 16. ’ñ’•’µ÷Ñ ’æ’°’≥’°’º÷Ñ’´ ÷Ñ’°’∂’°’Ø’´ ’∫’°’∞’∫’°’∂’∏÷Ç’¥ ----------------------

fake_sales = {
    "BA100810": 65,
    "BA100811": 61,
    "BA100812": 75,
    "BA100813": 19,
    "BA100814": 108,
    "BA100815": 182,
    "BA100816": 35,
    "BA100817": 157,
    "BA100818": 62,
    "BA100819": 209,
    "BA100820": 178,
    "BA100821": 25,
}

# ---------------------- ’î’°’µ’¨ 17. ’é’°’≥’°’º÷Ñ’´÷Å ’∞’•’ø’∏ ÷Ü’•’µ÷Ñ ÷Ñ’°’∂’°’Ø’´ ’©’°÷Ä’¥’°÷Å’∏÷Ç’¥ ----------------------

def increase_fake_sales(product_code):
    if product_code in best_selling_products:
        fake_sales[product_code] += 2
    elif product_code in fake_sales:
        fake_sales[product_code] += random.randint(2, 6)

# ---------------------- ’î’°’µ’¨ 18. ’ñ’´’§’¢’•÷Ñ’´÷Å ’∞’•’ø’∏ ’©’°÷Ä’¥’°÷Å’∏÷Ç’¥ ----------------------

@bot.message_handler(func=lambda m: m.text.startswith("‚≠ê ’Ä’•’ø’°’§’°÷Ä’± ’Ø’°’∫"))
def handle_feedback(message):
    user_id = message.from_user.id
    feedback_text = message.text.replace("‚≠ê ’Ä’•’ø’°’§’°÷Ä’± ’Ø’°’∫", "").strip()

    if not feedback_text:
        bot.send_message(user_id, "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’£÷Ä’•’¨ ’±’•÷Ä ’Ø’°÷Ä’Æ’´÷Ñ’®÷â")
        return

    # ’∫’°’∞’•’∂÷Ñ ’¥’•÷Ä dict‚Äì’∏÷Ç’¥ (’∫’°’∞’•’Ω’ø’°’æ’∏÷Ä’∏÷Ç’¥, ’•’©’• ÷Ñ’•’¶ ’∫’•’ø÷Ñ ’ß)
    user_feedbacks[user_id] = feedback_text

    # ’∏÷Ç’≤’°÷Ä’Ø’•’∂÷Ñ ’°’§’¥’´’∂(’∂’•÷Ä)’´’∂
    for admin_id in admin_list:
        bot.send_message(
            admin_id,
            f"üí¨ ’Ü’∏÷Ä ’Ø’°÷Ä’Æ’´÷Ñ @{message.from_user.username or user_id}:\n{feedback_text}"
        )

    # ’∞’°’Ω’ø’°’ø’∏÷Ç’¥ ÷Ö’£’ø’æ’∏’≤’´’∂
        bot.send_message(
        user_id,
        "üå∏ ’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂, ’∏÷Ä ’Ø’´’Ω’æ’•÷Å’´÷Ñ ’±’•÷Ä ’Ø’°÷Ä’Æ’´÷Ñ’∏’æ ü•∞\n"
        "’Å’•÷Ä ’°÷Ä’±’°’£’°’∂÷Ñ’® ’¥’•’¶ ÷Ö’£’∂’∏÷Ç’¥ ’ß ’§’°’º’∂’°’¨ ’°’æ’•’¨’´ ’¨’°’æ üíï")

@bot.message_handler(func=lambda message: message.text == "üéÅ ‘≤’∏’∂’∏÷Ç’Ω ’°’∂’´’æ")
def bonus_wheel(message):
    user_id = message.from_user.id
    text = (
        "üéÅ ‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø **‘≤’∏’∂’∏÷Ç’Ω ’°’∂’´’æ** ’¢’°’™’´’∂ ÷â\n\n"
        "’á’∏÷Ç’ø’∏’æ ’§’∏÷Ç÷Ñ ’°’µ’Ω’ø’•’≤ ’Ø’Ø’°÷Ä’∏’≤’°’∂’°÷Ñ ’∫’ø’ø’•’¨ ’°’∂’´’æ’® ÷á ’∑’°’∞’•’¨ ’¶’•’≤’π’•÷Ä, ’∂’æ’•÷Ä’∂’•÷Ä, ’Ø’ø÷Ä’∏’∂’∂’•÷Ä ÷á ’°’µ’¨ ’∞’°’≥’•’¨’´ ’°’∂’°’Ø’∂’Ø’°’¨’∂’•÷Ä÷â\n\n"
        "üìå ‘±’µ’Ω ’∫’°’∞’´ ’§÷Ä’∏÷Ç’©’µ’°’¥’¢ ’°’µ’Ω ’¢’°’™’´’∂’® ’∫’°’ø÷Ä’°’Ω’ø’¥’°’∂ ÷É’∏÷Ç’¨’∏÷Ç’¥ ’ß÷â"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô ’é’•÷Ä’°’§’°’º’∂’°’¨", callback_data="back_to_main"))
    bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == "üöö ‘±’º’°÷Ñ’¥’°’∂ ’¥’°’∂÷Ä’°’¥’°’Ω’∂’•÷Ä")
def delivery_info(message):
    user_id = message.from_user.id
    text = (
        "üöö **‘±’º’°÷Ñ’¥’°’∂ ’∫’°’µ’¥’°’∂’∂’•÷Ä**\n\n"
        "‚úÖ ‘±’º’°÷Ñ’∏÷Ç’¥’® ’°’¥’¢’∏’≤’ª ’Ä’°’µ’°’Ω’ø’°’∂’´ ’ø’°÷Ä’°’Æ÷Ñ’∏÷Ç’¥’ù **‘±’Ü’é’É‘±’ê**÷â\n"
        "üì¶ ’ä’°’ø’æ’•÷Ä’∂’•÷Ä’´ ’°’º’°÷Ñ’∏÷Ç’¥’® ’Ø’°’ø’°÷Ä’æ’∏÷Ç’¥ ’ß 1‚Äì3 ’°’∑’≠’°’ø’°’∂÷Ñ’°’µ’´’∂ ÷Ö÷Ä’æ’° ’®’∂’©’°÷Å÷Ñ’∏÷Ç’¥÷â\n"
        "üì¨ ‘±’º’°÷Ñ’∏÷Ç’¥’® ’Ø’°’ø’°÷Ä’æ’∏÷Ç’¥ ’ß ’Ä’°’µ’ì’∏’Ω’ø’´ ’¥’´’ª’∏÷Å’∏’æ’ù ’±’•÷Ä ’∂’∑’°’Æ ’∞’°’Ω÷Å’•’∏’æ÷â\n"
        "üïì ‘±’º’°÷Ñ’¥’°’∂ ’™’°’¥’°’∂’°’Ø’® ’Ø’°’≠’æ’°’Æ ’ß ’±’•÷Ä ’¥’°÷Ä’¶’´÷Å ’Ø’°’¥ ÷Ñ’°’≤’°÷Ñ’´ ’æ’°’µ÷Ä’´÷Å÷â\n"
        "üîé ’ä’°’ø’æ’•÷Ä’´÷Å ’∞’•’ø’∏ ’§’∏÷Ç÷Ñ ’Ø’Ω’ø’°’∂’°÷Ñ ’±’•÷Ä ’°’º’°÷Ñ’¥’°’∂ ’∞’•’ø÷á’¥’°’∂ ’∞’°’¥’°÷Ä tracking ’Ø’∏’§÷â"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô ’é’•÷Ä’°’§’°’º’∂’°’¨", callback_data="back_to_main"))
    bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == "üí≥ ’é’≥’°÷Ä’¥’°’∂ ’±÷á’•÷Ä")
def payment_methods(message):
    user_id = message.from_user.id
    text = (
        "üí≥ **’é’≥’°÷Ä’¥’°’∂ ’ø’°÷Ä’¢’•÷Ä’°’Ø’∂’•÷Ä**\n\n"
        "üì± **IDram / TelCell Wallet** ‚Äî ÷É’∏’≠’°’∂÷Å’∏÷Ç’¥ ’¥’•÷Ä ’∞’°’¥’°÷Ä’´’∂\n"
        "üèß **‘ø’°’∂’≠’´’Ø** ‚Äî ’æ’≥’°÷Ä’∏÷Ç’¥ ’Ω’ø’°’∂’°’¨’´’Ω (’¥’´’°’µ’∂ ‘µ÷Ä÷á’°’∂’∏÷Ç’¥)\n"
        "üí∏ **USDT (TRC20)** ‚Äî ÷É’∏’≠’°’∂÷Å’∏÷Ç’¥ ’Ø÷Ä’´’∫’ø’∏ ’∞’°’∑’æ’´’∂\n"
        "üá®üá≥ **AliPay** ‚Äî ’¨’´÷Å÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥ ’®’Ω’ø ’∞’°’∑’æ’•’∞’°’¥’°÷Ä’´\n\n"
        "‚ùó ’é’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’Ω’ø’°’ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ ’Ω’ø’°÷Å’°’Ø’°’∂’´ ’∂’Ø’°÷Ä ’Ø’°’¥ ’ø’•÷Ñ’Ω’ø÷â\n"
        "‚úÖ ’Ñ’•’∂÷Ñ ’Ø’Ω’ø’∏÷Ç’£’•’∂÷Ñ ÷á ’Ø’∞’°’Ω’ø’°’ø’•’∂÷Ñ ’∫’°’ø’æ’•÷Ä’®÷â"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô ’é’•÷Ä’°’§’°’º’∂’°’¨", callback_data="back_to_main"))
    bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == "üöö ‘±’º’°÷Ñ’¥’°’∂ ’∞’•’ø÷á’∏÷Ç’¥")
def order_tracking(message):
    user_id = message.from_user.id
    text = (
        "üì¶ **’ä’°’ø’æ’•÷Ä’´ ’∞’•’ø÷á’∏÷Ç’¥**\n\n"
        "‘µ’©’• ’§’∏÷Ç÷Ñ ’Ω’ø’°÷Å’•’¨ ’•÷Ñ ’∞’•’ø÷á’•’¨’∏÷Ç ’∞’°’¥’°÷Ä **’Ä’°’µ÷É’∏’Ω’ø tracking code** (÷Ö÷Ä’´’∂’°’Ø’ù RR123456789AM),\n"
        "’Ø’°÷Ä’∏’≤ ’•÷Ñ ’∞’•’ø÷á’•’¨ ’±’•÷Ä ’°’º’°÷Ñ’¥’°’∂’®’ù ’Ω’•’≤’¥’•’¨’∏’æ ’°’µ’Ω ’∞’≤’∏÷Ç’¥’® üëá\n\n"
        "üåê https://www.haypost.am/en/track\n\n"
        "‘µ’©’• ’§’∏÷Ç÷Ñ ’§’•’º ’π’•÷Ñ ’Ω’ø’°÷Å’•’¨ ’±’•÷Ä tracking code, ’°’∫’° ’Ω’∫’°’Ω’•÷Ñ ’¥’•÷Ä ’∞’°’Ω’ø’°’ø’¥’°’∂’® üì©"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô ’é’•÷Ä’°’§’°’º’∂’°’¨", callback_data="back_to_main"))
    bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == "üîê ’é’≥’°÷Ä’¥’°’∂ ’°’∂’æ’ø’°’∂’£’∏÷Ç’©’µ’∏÷Ç’∂")
def payment_security(message):
    user_id = message.from_user.id
    text = (
        "üîê **’é’≥’°÷Ä’¥’°’∂ ’°’∂’æ’ø’°’∂’£’∏÷Ç’©’µ’∏÷Ç’∂ ÷á ’æ’Ω’ø’°’∞’∏÷Ç’©’µ’∏÷Ç’∂**\n\n"
        "üõ°Ô∏è ’Ñ’•÷Ä ’¢’∏’ø’® ’∫’°’∑’ø’∫’°’∂’∏÷Ç’¥ ’ß ’±’•÷Ä ’ø’æ’µ’°’¨’∂’•÷Ä’® ÷á ’æ’≥’°÷Ä’∂’•÷Ä’®’ù ’°’∫’°’∞’∏’æ’•’¨’∏’æ ’°’∂’æ’ø’°’∂’£ ’£’∏÷Ä’Æ’®’∂’©’°÷Å÷â\n"
        "‚úÖ ’Ñ’•’∂÷Ñ ’®’∂’§’∏÷Ç’∂’∏÷Ç’¥ ’•’∂÷Ñ ’¥’´’°’µ’∂ ’Ω’ø’∏÷Ç’£’æ’°’Æ ’æ’≥’°÷Ä’¥’°’∂ ’•’≤’°’∂’°’Ø’∂’•÷Ä’ù Telcell, Idram, USDT (÷Ñ÷Ä’´’∫’ø’∏), ’¢’°’∂’Ø’°’µ’´’∂ ÷Ñ’°÷Ä’ø (Visa / MasterCard):\n"
        "üì¶ ’Å’•÷Ä ’∫’°’ø’æ’•÷Ä’® ’∞’°’Ω’ø’°’ø’æ’∏÷Ç’¥ ’ß ’¥’´’°’µ’∂ ’Ω’ø’°÷Å’°’Ø’°’∂’® ’Ω’ø’°’∂’°’¨’∏÷Ç÷Å ’∞’•’ø’∏÷â\n"
        "üßæ ‘¥’∏÷Ç÷Ñ ’¥’´’∑’ø ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’°’∫’°÷Å’∏÷Ç’µ÷Å ÷á ’Ω’ø’°’∂’°’¨ ’∞’°’Ω’ø’°’ø’∏÷Ç’¥÷â\n\n"
        "‘µ’©’• ’∞’°÷Ä÷Å’•÷Ä ’∏÷Ç’∂’•÷Ñ’ù ’£÷Ä’•÷Ñ ’¥’•’¶ üì©"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô ’é’•÷Ä’°’§’°’º’∂’°’¨", callback_data="back_to_main"))
    bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == "üì¢ ‘≥’∏’æ’°’¶’§’°’µ’´’∂ ’°’º’°’ª’°÷Ä’Ø")
def ad_space(message):
    user_id = message.from_user.id
    photo = open("media/ads/promo_banner.jpg", "rb")  # ’Å’•÷Ä ’£’∏’æ’°’¶’§’°’µ’´’∂ ’∂’Ø’°÷Ä’´ ’∏÷Ç’≤’´’∂
    caption = (
        "üì¢ **’Ä’°’ø’∏÷Ç’Ø ’°’º’°’ª’°÷Ä’Ø ’¥’•÷Ä ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä’´÷Å**\n\n"
        "üéÅ ‘±’µ÷Å’•’¨’•÷Ñ ’¥’•÷Ä ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä’´ ’≠’°’∂’∏÷Ç’© ÷á ’Ω’ø’°÷Å’•÷Ñ 10% ’¶’•’≤’π ’¥’•÷Ä ’Ø’∏’≤’¥’´÷Å÷â\n"
        "üåê [‘¥’´’ø’•’¨ ’°’º’°’ª’°÷Ä’Ø’®](https://example.com)"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô ’é’•÷Ä’°’§’°’º’∂’°’¨", callback_data="back_to_main"))
    bot.send_photo(user_id, photo=photo, caption=caption, parse_mode="Markdown", reply_markup=markup)
@bot.message_handler(func=lambda message: message.text == "üí° ‘º’°’æ ’¥’ø÷Ñ’•÷Ä")
def good_thoughts(message):
    user_id = message.from_user.id
    text = (
        "üí° **’ï÷Ä’æ’° ’¨’°’æ ’¥’´’ø÷Ñ’®**\n\n"
        "üëâ ¬´’Ñ’´’∑’ø ’∞’´’∑’´÷Ä’ù ’°’¥’•’∂’°’¥’∏÷Ç’© ’£’´’∑’•÷Ä’® ’∂’∏÷Ç’µ’∂’´’Ω’Ø ’°’∂÷Å’∂’∏÷Ç’¥ ’ß ÷á ’¨’∏÷Ç’µ’Ω ’ß ’£’°’¨’´’Ω¬ª\n\n"
        "‘ø’´’Ω’æ’´÷Ä ’°’µ’Ω ’¥’ø÷Ñ’∏’æ ÷Ñ’∏ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´ ’∞’•’ø’ù ’∏’£’•’∑’∂’π’•’¨’∏÷Ç ’∂÷Ä’°’∂÷Å üòä"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì§ ‘ø’´’Ω’æ’•’¨", switch_inline_query="üí° ‘º’°’æ ’¥’´’ø÷Ñ ’∞’•’∂÷Å ÷Ñ’•’¶ ’∞’°’¥’°÷Ä!"))
    markup.add(types.InlineKeyboardButton("üîô ’é’•÷Ä’°’§’°’º’∂’°’¨", callback_data="back_to_main"))
@bot.message_handler(func=lambda message: message.text == "üí° ‘º’°’æ ’¥’ø÷Ñ’•÷Ä")
def good_thoughts(message):
    user_id = message.from_user.id
    text = "’ç’´÷Ä’∏’æ ’Ø’´’Ω’æ’•’∂÷Ñ ’∏’£’•’∑’∂’π’∏’≤ ’¥’ø÷Ñ’•÷Ä’∏’æ üòä"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô ’é’•÷Ä’°’§’°’º’∂’°’¨", callback_data="back_to_main"))

    if user_id in user_profile_photos:
        bot.send_photo(user_id, user_profile_photos[user_id], caption=text, parse_mode="Markdown", reply_markup=markup)
    else:
        bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=markup)

@bot.message_handler(content_types=["photo"])
def handle_profile_photo(message):
    user_id = message.from_user.id
    if message.caption == "üë§ ‘ª’¥ ÷Ü’∏’ø’∏’∂":
        photo_id = message.photo[-1].file_id
        user_profile_photos[user_id] = photo_id
        bot.send_message(user_id, "üì∏ ’Å’•÷Ä ÷Ü’∏’ø’∏’∂ ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’∫’°’∞’∫’°’∂’æ’•÷Å÷â")
@bot.callback_query_handler(func=lambda call: call.data.startswith("reorder_"))
def reorder_product(call):
    user_id = call.from_user.id
    code = call.data.split("_", 1)[1]
    user_carts.setdefault(user_id, {})
    user_carts[user_id][code] = user_carts[user_id].get(code, 0) + 1
    bot.answer_callback_query(call.id, "‘±’æ’•’¨’°÷Å’æ’•÷Å ’¶’°’¥’¢’µ’∏÷Ç’≤’∏÷Ç’¥÷â")
    bot.send_message(user_id, "‚úÖ ‘±’∫÷Ä’°’∂÷Ñ’® ’Ø÷Ä’Ø’´’∂ ’°’æ’•’¨’°÷Å’æ’•÷Å ’±’•÷Ä ’¶’°’¥’¢’µ’∏÷Ç’≤÷â")
def apply_first_order_coupon(user_id, total_price):
    if user_id not in user_orders or len(user_orders[user_id]) == 0:
        user_first_coupon[user_id] = True
        discount = total_price * 0.05
        return round(discount)
    return 0
def check_cart_reminders():
    while True:
        current_time = time.time()
        for user_id, added_time in list(user_cart_time.items()):
            if current_time - added_time > 86400:  # 24 ’™’°’¥ ’°’∂÷Å’•’¨ ’ß
                bot.send_message(user_id, "üìå ’Ñ’∏’º’°÷Å’•’û’¨ ’•÷Ñ ’±’•÷Ä ’¶’°’¥’¢’µ’∏÷Ç’≤’´ ’¥’°’Ω’´’∂÷â ‘±’µ’∂ ’§’•’º ’Ω’∫’°’Ω’∏÷Ç’¥ ’ß ’±’•’¶÷âüõí")
                del user_cart_time[user_id]
        time.sleep(600)  # ’Ω’ø’∏÷Ç’£’´ ’°’¥’•’∂ 10 ÷Ä’∏’∫’•’∂ ’¥’•’Ø
threading.Thread(target=check_cart_reminders, daemon=True).start()
@app.get("/")
def health():
    return "ok", 200

# Telegram-’® POST ’ß ’∏÷Ç’≤’°÷Ä’Ø’•’¨’∏÷Ç ’∞’•’∂÷Å ’°’µ’Ω’ø’•’≤
@app.post(WEBHOOK_PATH)
def telegram_webhook():
    if request.headers.get("content-type") != "application/json":
        abort(403)
    update = request.get_data().decode("utf-8")
    bot.process_new_updates([telebot.types.Update.de_json(update)])
    return "ok", 200
# ========= Admin & Payments ‚Äì FULL BLOCK (paste below bot = TeleBot(...)) =========

def is_admin(message) -> bool:
    try:
        return int(message.from_user.id) in ADMIN_IDS
    except Exception:
        return False

# --- very small in-memory storage (DB ’π’Ø’°) ---
USERS = {}              # user_id -> dict(name, username, coupons)
COUPONS = {}            # user_id -> coupons_balance (float / int)
PENDING_PAYMENTS = {}   # payment_id -> dict(user_id, price, sent, overpay, note, photo_file_id, status)
EVENTS = []             # ’¨’∏’£’•÷Ä’´ ÷É’∏÷Ñ÷Ä ’∫’°’ø’¥’∏÷Ç’©’µ’∏÷Ç’∂ admin-’´ ’∞’°’¥’°÷Ä
_ID_SEQ = 1000          # payment seq

def _log(event: str):
    EVENTS.append(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  {event}")
    if len(EVENTS) > 300:
        del EVENTS[:100]

def _register_user(m):
    uid = m.from_user.id
    if uid not in USERS:
        USERS[uid] = {
            "name": f"{m.from_user.first_name or ''} {m.from_user.last_name or ''}".strip(),
            "username": (m.from_user.username or ""),
        }
        COUPONS.setdefault(uid, 0)
        _log(f"üë§ New user: {uid} @{USERS[uid]['username']} {USERS[uid]['name']}")

# --- helpers ---
def send_admin(text, **kw):
    for aid in ADMIN_IDS:
        try:
            bot.send_message(aid, text, **kw)
        except Exception:
            pass

# =======================  ADMIN MENU  =======================
@bot.message_handler(commands=['whoami'])
def whoami(message):
    _register_user(message)
    bot.reply_to(message, f"üë§ ’î’∏ ID-’∂’ù `{message.from_user.id}`")

@bot.message_handler(commands=['admin'])
def admin_menu(message):
    if not is_admin(message):
        return
    mk = types.ReplyKeyboardMarkup(resize_keyboard=True)
    mk.add("üìä ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂", "üßæ ’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä")
    mk.add("üéÅ ‘ø’∏÷Ç’∫’∏’∂’∂’•÷Ä", "üßë‚Äçü§ù‚Äçüßë ’ï’£’ø’°’ø’•÷Ä’•÷Ä")
    mk.add("üßπ ’Ñ’°÷Ñ÷Ä’•’¨ ’¨’∏’£’•÷Ä’®", "üóí ‘º’∏’£’•÷Ä (’æ’•÷Ä’ª’´’∂ 30)")
    bot.send_message(
        message.chat.id,
        "üëë Admin Panel ‚Äî ’®’∂’ø÷Ä’´÷Ä ’¢’°’™’´’∂’®",
        reply_markup=mk
    )

@bot.message_handler(func=lambda m: is_admin(m) and m.text == "üìä ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂")
def admin_stats(message):
    users_count = len(USERS)
    pend = sum(1 for p in PENDING_PAYMENTS.values() if p.get("status") == "pending")
    conf = sum(1 for p in PENDING_PAYMENTS.values() if p.get("status") == "confirmed")
    rej  = sum(1 for p in PENDING_PAYMENTS.values() if p.get("status") == "rejected")
    bot.reply_to(message, f"üìä ’ï’£’ø’°’ø’•÷Ä’•÷Ä’ù {users_count}\n‚è≥ ’ç’∫’°’Ω’¥’°’∂ ’¥’•’ª’ù {pend}\n‚úÖ ’Ä’°’Ω’ø’°’ø’æ’°’Æ’ù {conf}\n‚ùå ’Ñ’•÷Ä’™’æ’°’Æ’ù {rej}")

@bot.message_handler(func=lambda m: is_admin(m) and m.text == "üßæ ’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä")
def admin_payments(message):
    if not PENDING_PAYMENTS:
        bot.reply_to(message, "‘¥’°’ø’°÷Ä’Ø ’ß÷â")
        return
    lines = []
    for pid, p in sorted(PENDING_PAYMENTS.items()):
        u = USERS.get(p["user_id"], {})
        lines.append(
            f"#{pid} | üë§ {p['user_id']} @{u.get('username','')} {u.get('name','')}\n"
            f"    ‘≥’´’∂: {p['price']} | ’à÷Ç’≤’°÷Ä’Ø’æ’°’Æ: {p['sent']} | Overpay: {p.get('overpay',0)}\n"
            f"    ’é’´’≥’°’Ø: {p['status']}"
        )
    bot.reply_to(message, "üßæ ’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä\n" + "\n".join(lines[:30]))

@bot.message_handler(func=lambda m: is_admin(m) and m.text == "üéÅ ‘ø’∏÷Ç’∫’∏’∂’∂’•÷Ä")
def admin_coupons(message):
    if not COUPONS:
        bot.reply_to(message, "’à’π ’¥’´ ’Ø’∏÷Ç’∫’∏’∂ ’§’•’º ’π’Ø’°÷â")
        return
    lines = [f"üë§ {uid}: {bal}" for uid, bal in COUPONS.items()]
    bot.reply_to(message, "üéÅ ‘ø’∏÷Ç’∫’∏’∂’∂’•÷Ä’´ ’¥’∂’°÷Å’∏÷Ä’§’∂’•÷Ä\n" + "\n".join(lines[:50]))

@bot.message_handler(func=lambda m: is_admin(m) and m.text == "üßë‚Äçü§ù‚Äçüßë ’ï’£’ø’°’ø’•÷Ä’•÷Ä")
def admin_users(message):
    if not USERS:
        bot.reply_to(message, "’ï’£’ø’°’ø’•÷Ä’•÷Ä ’§’•’º ’π’•’∂ ’•’≤’•’¨÷â")
        return
    lines = [f"{uid} @{u.get('username','')} {u.get('name','')}" for uid,u in USERS.items()]
    bot.reply_to(message, "üßë‚Äçü§ù‚Äçüßë ’ï’£’ø’°’ø’•÷Ä’•÷Ä\n" + "\n".join(lines[:50]))

@bot.message_handler(func=lambda m: is_admin(m) and m.text == "üßπ ’Ñ’°÷Ñ÷Ä’•’¨ ’¨’∏’£’•÷Ä’®")
def admin_clear_logs(message):
    EVENTS.clear()
    bot.reply_to(message, "‘º’∏’£’•÷Ä’® ’¥’°÷Ñ÷Ä’æ’•÷Å’´’∂÷â")

@bot.message_handler(func=lambda m: is_admin(m) and m.text == "üóí ‘º’∏’£’•÷Ä (’æ’•÷Ä’ª’´’∂ 30)")
def admin_last_logs(message):
    if not EVENTS:
        bot.reply_to(message, "‘º’∏’£’•÷Ä’® ’§’°’ø’°÷Ä’Ø ’•’∂÷â")
        return
    bot.reply_to(message, "’é’•÷Ä’ª’´’∂ ’´÷Ä’°’§’°÷Ä’±’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®:\n" + "\n".join(EVENTS[-30:]))

# =======================  USER COUPONS  =======================
@bot.message_handler(commands=['my_coupons'])
def my_coupons(message):
    _register_user(message)
    bal = COUPONS.get(message.from_user.id, 0)
    bot.reply_to(message, f"üéÅ ’î’∏ ’Ø’∏÷Ç’∫’∏’∂’∂’•÷Ä’´ ’¥’∂’°÷Å’∏÷Ä’§’®’ù **{bal}**")

# =======================  PAYMENT FLOW  =======================
# /pay ‚Üí enter price ‚Üí enter sent amount ‚Üí upload receipt (photo) ‚Üí admin gets buttons
PAY_FLOW = {}  # uid -> {"stage": "...", "price": , "sent": , "note": ""}

@bot.message_handler(commands=['pay'])
def cmd_pay(message):
    _register_user(message)
    PAY_FLOW[message.from_user.id] = {"stage": "price"}
    bot.reply_to(message, "üí≥ ’Ü’∑’´÷Ä ’°’∫÷Ä’°’∂÷Ñ’´ ’£’´’∂’® (AMD)’ù ÷Ö÷Ä’´’∂’°’Ø `1240`")

@bot.message_handler(func=lambda m: m.from_user.id in PAY_FLOW and PAY_FLOW[m.from_user.id]["stage"] == "price")
def flow_get_price(message):
    try:
        price = float(str(message.text).strip())
        PAY_FLOW[message.from_user.id]  # intentional error? NO! fix
    except Exception:
        bot.reply_to(message, "‘π’´’æ ’£÷Ä’´, ÷Ö÷Ä’´’∂’°’Ø `1240`")
        return
    PAY_FLOW[message.from_user.id]["price"] = price
    PAY_FLOW[message.from_user.id]["stage"] = "sent"
    bot.reply_to(message, "‚úâÔ∏è ‘≥÷Ä’´÷Ä’ù ’´÷Ä’°’Ø’°’∂’∏÷Ç’¥ ’∏÷Ä÷Ñ’°’∂ ’•’Ω ÷É’∏’≠’°’∂÷Å’•’¨ (AMD)’ù ÷Ö÷Ä’´’∂’°’Ø `1300`÷â\n‘ø’°÷Ä’∏’≤ ’•’Ω ’∂’°÷á ’ø’•÷Ñ’Ω’ø’∏’æ ’∂’∑’•’¨ ’∞’°’∑’æ’´ ’Ω’ø’°÷Å’∏’≤/’∫’¨’°’ø÷Ü’∏÷Ä’¥’®÷â")

@bot.message_handler(func=lambda m: m.from_user.id in PAY_FLOW and PAY_FLOW[m.from_user.id]["stage"] == "sent")
def flow_get_sent(message):
    # ’∫’°’∞’∏÷Ç’¥ ’•’∂÷Ñ ’∂’°÷á user's note-’®
    txt = str(message.text)
    nums = "".join(ch if ch.isdigit() or ch == "." else " " for ch in txt).split()
    if not nums:
        bot.reply_to(message, "‘≥÷Ä’´÷Ä ’©’´’æ’®’ù ÷Ö÷Ä’´’∂’°’Ø `1300`")
        return
    sent = float(nums[0])
    PAY_FLOW[message.from_user.id]["sent"] = sent
    # ’¥’∂’°÷Å’°’Æ’®’ù ’∏÷Ä’∫’•’Ω ’∂’∑’∏÷Ç’¥
    note = txt if len(nums) == 1 else txt.replace(nums[0], "", 1).strip()
    PAY_FLOW[message.from_user.id]["note"] = note
    PAY_FLOW[message.from_user.id]["stage"] = "wait_receipt"
    bot.reply_to(message, "üì∏ ’à÷Ç’≤’°÷Ä’Ø’´÷Ä ÷É’∏’≠’°’∂÷Å’¥’°’∂ ’°’∂’§’∏÷Ä’°’£÷Ä’´ ’ç’î’ê‘ª’Ü/‘º’à’í’ç‘±’Ü‘ø‘±’ê‘∏ (photo)")

@bot.message_handler(content_types=['photo'])
def on_photo(message):
    uid = message.from_user.id
    if uid not in PAY_FLOW or PAY_FLOW[uid].get("stage") != "wait_receipt":
        # ‘µ’©’• ’Ω’° ’°’∂’§’∏÷Ä’°’£’´÷Ä ’π’´, ’∫’°÷Ä’¶’°’∫’•’Ω ’£÷Ä’°’∂÷Å’•’∂÷Ñ user-’® ’∏÷Ç ’§’∏÷Ç÷Ä’Ω ’£’°’∂÷Ñ
        _register_user(message)
        return

    # ’∫’°’∞’•’∂÷Ñ file_id-’®
    file_id = message.photo[-1].file_id
    data = PAY_FLOW[uid]
    price = data["price"]
    sent  = data["sent"]
    over  = max(0, sent - price)
    note  = data.get("note", "")

    global _ID_SEQ
    _ID_SEQ += 1
    pid = _ID_SEQ

    PENDING_PAYMENTS[pid] = {
        "user_id": uid,
        "price": price,
        "sent": sent,
        "overpay": over,
        "note": note,
        "photo_file_id": file_id,
        "status": "pending",
        "created_at": datetime.now().isoformat(timespec="seconds")
    }
    del PAY_FLOW[uid]

    # ’∏÷Ç’≤’°÷Ä’Ø’•’∂÷Ñ ’°’§’¥’´’∂’∂’•÷Ä’´’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂ ’Ø’∏’≥’°’Ø’∂’•÷Ä’∏’æ
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton(text="‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨", callback_data=f"pay_ok:{pid}"),
        types.InlineKeyboardButton(text="‚ùå ’Ñ’•÷Ä’™’•’¨",  callback_data=f"pay_no:{pid}")
    )
    u = USERS.get(uid, {})
    caption = (
        f"üßæ ’é’≥’°÷Ä’¥’°’∂ ’°’∂’§’∏÷Ä’°’£’´÷Ä #{pid}\n"
        f"üë§ {uid} @{u.get('username','')} {u.get('name','')}\n"
        f"‘≥’´’∂: {price} | ’à÷Ç’≤’°÷Ä’Ø’æ’°’Æ: {sent} | Overpay: {over}\n"
        f"’Ü’∑’∏÷Ç’¥: {note or '‚Äî'}"
    )
    for aid in ADMIN_IDS:
        try:
            bot.send_photo(aid, file_id, caption=caption, reply_markup=kb)
        except Exception:
            pass

    bot.reply_to(message, f"‚úÖ ‘±’∂’§’∏÷Ä’°’£’´÷Ä’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å ’°’§’¥’´’∂’´’∂÷â ’Ä’°’Ω’ø’°’ø’¥’°’∂ ’Ω’∫’°’Ω’∏÷Ç’¥‚Ä¶ (#`{pid}`)")
    _log(f"üßæ Payment #{pid} from {uid}: price={price} sent={sent} over={over}")

@bot.callback_query_handler(func=lambda c: c.data and (c.data.startswith("pay_ok:") or c.data.startswith("pay_no:")))
def on_payment_decision(call):
    if call.from_user.id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "’Ñ’´’°’µ’∂ ’°’§’¥’´’∂’´ ’∞’°’¥’°÷Ä ’ß÷â", show_alert=True)
        return
    action, raw = call.data.split(":", 1)
    pid = int(raw)
    payment = PENDING_PAYMENTS.get(pid)
    if not payment:
        bot.answer_callback_query(call.id, "‘≥’∏÷Ä’Æ’°÷Ä÷Ñ’® ’π’´ ’£’ø’∂’æ’•’¨÷â", show_alert=True)
        return

    if action == "pay_ok":
        payment["status"] = "confirmed"
        over = float(payment.get("overpay", 0))
        if over > 0:
            COUPONS[payment["user_id"]] = COUPONS.get(payment["user_id"], 0) + over
        bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption=call.message.caption + "\n\n‚úÖ ’Ä‘±’ç’è‘±’è’é‘±‘æ",
            reply_markup=None
        )
        # user-’´’∂ ’Æ’°’∂’∏÷Ç÷Å’∏÷Ç’¥
        try:
            bot.send_message(payment["user_id"], f"‚úÖ ’î’∏ ’æ’≥’°÷Ä’∏÷Ç’¥’® #`{pid}` ’∞’°’Ω’ø’°’ø’æ’•÷Å÷â Overpay **{over}** ‚Üí ’Ø’∏÷Ç’∫’∏’∂’∂’•÷Ä’´ ’æ÷Ä’°÷â")
        except Exception:
            pass
        _log(f"‚úÖ Confirm #{pid} by admin {call.from_user.id}; over={over}")
        bot.answer_callback_query(call.id, "’Ä’°’Ω’ø’°’ø’æ’•÷Å ‚úÖ")

    elif action == "pay_no":
        payment["status"] = "rejected"
        bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption=call.message.caption + "\n\n‚ùå ’Ñ‘µ’ê‘∫’é‘±‘æ",
            reply_markup=None
        )
        try:
            bot.send_message(payment["user_id"], f"‚ùå ’î’∏ ’æ’≥’°÷Ä’∏÷Ç’¥’® #`{pid}` ’¥’•÷Ä’™’æ’•÷Å÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’Ø÷Ä’Ø’´’∂ ’Ω’ø’∏÷Ç’£’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’®÷â")
        except Exception:
            pass
        _log(f"‚ùå Reject #{pid} by admin {call.from_user.id}")
        bot.answer_callback_query(call.id, "’Ñ’•÷Ä’™’æ’•÷Å ‚ùå")

# =======================  SIMPLE WEB ADMIN PAGES  =======================
@app.route("/admin")
def admin_panel():
    pend = sum(1 for p in PENDING_PAYMENTS.values() if p.get("status") == "pending")
    conf = sum(1 for p in PENDING_PAYMENTS.values() if p.get("status") == "confirmed")
    rej  = sum(1 for p in PENDING_PAYMENTS.values() if p.get("status") == "rejected")
    return f"""
    <h1>üëë BabyAngelsBot ¬∑ Admin Panel</h1>
    <p>Users: {len(USERS)} | Pending: {pend} | Confirmed: {conf} | Rejected: {rej}</p>
    <ul>
        <li><a href='/admin/payments'>üßæ ’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä</a></li>
        <li><a href='/admin/coupons'>üéÅ ‘ø’∏÷Ç’∫’∏’∂’∂’•÷Ä</a></li>
        <li><a href='/admin/users'>üßë‚Äçü§ù‚Äçüßë ’ï’£’ø’°’ø’•÷Ä’•÷Ä</a></li>
        <li><a href='/admin/logs'>üóí ‘º’∏’£’•÷Ä</a></li>
    </ul>
    """

@app.route("/admin/payments")
def web_payments():
    rows = []
    for pid, p in sorted(PENDING_PAYMENTS.items()):
        rows.append(
            f"<tr><td>#{pid}</td>"
            f"<td>{p['user_id']}</td>"
            f"<td>{p['price']}</td><td>{p['sent']}</td><td>{p.get('overpay',0)}</td>"
            f"<td>{p['status']}</td><td>{p.get('created_at','')}</td></tr>"
        )
    body = "".join(rows) or "<tr><td colspan=7>‘¥’°’ø’°÷Ä’Ø ’ß</td></tr>"
    return f"<h2>üßæ ’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä</h2><table border=1 cellpadding=6><tr><th>ID</th><th>User</th><th>Price</th><th>Sent</th><th>Over</th><th>Status</th><th>Time</th></tr>{body}</table>"

@app.route("/admin/coupons")
def web_coupons():
    rows = [f"<tr><td>{uid}</td><td>{bal}</td></tr>" for uid, bal in COUPONS.items()]
    body = "".join(rows) or "<tr><td colspan=2>‘¥’°’ø’°÷Ä’Ø ’ß</td></tr>"
    return f"<h2>üéÅ ‘ø’∏÷Ç’∫’∏’∂’∂’•÷Ä</h2><table border=1 cellpadding=6><tr><th>User</th><th>Balance</th></tr>{body}</table>"

@app.route("/admin/users")
def web_users():
    rows = []
    for uid, u in USERS.items():
        rows.append(f"<tr><td>{uid}</td><td>@{u.get('username','')}</td><td>{u.get('name','')}</td><td>{COUPONS.get(uid,0)}</td></tr>")
    body = "".join(rows) or "<tr><td colspan=4>‘¥’°’ø’°÷Ä’Ø ’ß</td></tr>"
    return f"<h2>üßë‚Äçü§ù‚Äçüßë ’ï’£’ø’°’ø’•÷Ä’•÷Ä</h2><table border=1 cellpadding=6><tr><th>User</th><th>Username</th><th>Name</th><th>Coupons</th></tr>{body}</table>"

@app.route("/admin/logs")
def web_logs():
    body = "<br>".join(EVENTS[-200:]) if EVENTS else "‘¥’°’ø’°÷Ä’Ø ’ß"
    return f"<h2>üóí ’é’•÷Ä’ª’´’∂ ’´÷Ä’°’§’°÷Ä’±’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä</h2><div style='white-space:pre-wrap;font-family:monospace'>{body}</div>"

# ========= /END of Admin & Payments FULL BLOCK =========

# üë§ ’Ä’°’≥’°’≠’∏÷Ä’§’∂’•÷Ä
# --- Flask routes ---
@app.route("/", methods=["GET"])
def index():
    return "Bot is running!", 200

# --- Webhook route (’¥’∂’°’Æ, ’•’©’• Render-’∏÷Ç’¥ ’∫’•’ø÷Ñ ’£’°) ---
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return "", 200
    else:
        abort(403)

print("Bot started successfully")

# --- Simple test commands (’¥’´ ’∞’°’ø /start ’©’∏’≤’ù ’•’©’• ’∏÷Ç’∂’•’Ω send_welcome ’æ’•÷Ä’®, ’§’° comment ’Ø’°’¥ ’∞’°’∂’´’õ÷Ä) ---
@bot.message_handler(commands=['id'])
def _id(m):
    bot.send_message(m.chat.id, f"üÜî Your ID: {m.from_user.id}")

@bot.message_handler(content_types=['text','photo','sticker','video','document','audio','voice'])
def _catch_all(m):
    if getattr(m, "entities", None) and any(e.type == "bot_command" for e in m.entities):
     return
    if m.content_type == 'text':
        bot.send_message(m.chat.id, f"üì• got: {m.text[:50]}")
    else:
        bot.send_message(m.chat.id, f"üì• got {m.content_type}")
def start_cart_reminder():
    def check():
        while True:
            now = time.time()
            for uid, t0 in list(cart_timers.items()):
                if now - t0 >= 24*3600:
                    try:
                        bot.send_message(uid, "üõí ’Å’•÷Ä ’¶’°’¥’¢’µ’∏÷Ç’≤’® ’Ω’∫’°’Ω’∏÷Ç’¥ ’ß ’±’•’¶ üòä ’ä’°’ø’æ’•÷Ä’® ’°’æ’°÷Ä’ø’•’õ÷Ñ, ’´’Ω’Ø ’∞’°÷Ä÷Å’•÷Ä’´ ’§’•’∫÷Ñ’∏÷Ç’¥ ’£÷Ä’•’õ÷Ñ ’¥’•’¶÷â")
                    except:
                        pass
                    cart_timers.pop(uid, None)
            time.sleep(3600)
    threading.Thread(target=check, daemon=True).start()
start_cart_reminder()

if __name__ == "__main__":
    bot.delete_webhook(drop_pending_updates=True)
    print("Bot started successfully")
    bot.infinity_polling(skip_pending=True, timeout=20, long_polling_timeout=20)


