import os, json, time, traceback
from datetime import datetime
from telebot import TeleBot, types
from dotenv import load_dotenv, find_dotenv
from telebot import apihelper
from telebot.types import InputMediaPhoto
from collections import defaultdict
import os, json, time, threading, traceback, datetime
import re
import requests
from datetime import datetime
from collections import defaultdict
import re

# ===== STORAGE =====
CART = defaultdict(dict)         # {user_id: {code: qty}}
CHECKOUT_STATE = {}              # per-user checkout wizard state
ORDERS = []                      # demo storage

# ===== BUTTONS =====
BTN_BACK_MAIN = "‚¨Ö ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"
# ===== CHECKOUT LISTS =====
COUNTRIES = ["’Ä’°’µ’°’Ω’ø’°’∂"]
CITIES = ["‘µ÷Ä÷á’°’∂","‘≥’µ’∏÷Ç’¥÷Ä’´","’é’°’∂’°’±’∏÷Ä","‘±’¢’∏’æ’µ’°’∂","‘±÷Ä’ø’°’∑’°’ø","‘±÷Ä’¥’°’æ’´÷Ä","’Ä÷Ä’°’¶’§’°’∂","’Ñ’°’Ω’´’Ω","‘±’∑’ø’°÷Ä’°’Ø","‘µ’≤’æ’°÷Ä’§","’â’°÷Ä’•’∂÷Å’°’æ’°’∂"]
def _set_step(uid: int, step: str):
    if uid in CHECKOUT_STATE:
        CHECKOUT_STATE[uid]["step"] = step

def _ask_name(chat_id: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_BACK_MAIN)
    bot.send_message(chat_id, "‚úçÔ∏è ‘≥÷Ä’•÷Ñ ’±’•÷Ä **‘±’∂’∏÷Ç’∂ ‘±’¶’£’°’∂’∏÷Ç’∂** (’°’º’∂’æ’°’¶’∂ 3 ’∂’´’∑):", reply_markup=kb, parse_mode="Markdown")

def _ask_phone(chat_id: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_BACK_MAIN)
    bot.send_message(chat_id, "üìû ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’±’•÷Ä ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®’ù **+374xxxxxxxx** ’Ø’°’¥ **0xxxxxxxx**:", reply_markup=kb, parse_mode="Markdown")

def _ask_country(chat_id: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for c in COUNTRIES:
        kb.add(c)
    kb.add(BTN_BACK_MAIN)
    bot.send_message(chat_id, "üåç ‘∏’∂’ø÷Ä’•÷Ñ ’•÷Ä’Ø’´÷Ä’®’ù", reply_markup=kb)

def _ask_city(chat_id: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for name in CITIES:
        kb.add(name)
    kb.add(BTN_BACK_MAIN)
    bot.send_message(chat_id, "üèô ‘∏’∂’ø÷Ä’•÷Ñ ÷Ñ’°’≤’°÷Ñ’®’ù", reply_markup=kb)

def _ask_address(chat_id: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(BTN_BACK_MAIN)
    bot.send_message(chat_id, "üè† ‘≥÷Ä’•÷Ñ ’∞’°’Ω÷Å’•’∂ (÷É’∏’≤’∏÷Å, ’∑’•’∂÷Ñ, ’¢’∂’°’Ø’°÷Ä’°’∂, ’∂’∑’∏÷Ç’¥’∂’•÷Ä):", reply_markup=kb)

def _finalize_order(uid: int, chat_id: int):
    order = CHECKOUT_STATE[uid]["order"]
    order["status"] = "Pending"
    ORDERS.append(order)

    # ÷Ñ’¨’´’∂ ’•’∂÷Ñ ’°’∂’∏÷Ç’¥ ’¶’°’¥’¢’µ’∏÷Ç’≤’∂ ’∏÷Ç checkout state-’®
    CART[uid].clear()
    CHECKOUT_STATE.pop(uid, None)

    # ‚úÖ ’é’•÷Ä’ª’∂’°’Ø’°’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ + ’°’æ’ø’∏’¥’°’ø ’æ’•÷Ä’°’§’°÷Ä’± ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç
    bot.send_message(
        chat_id,
        "‚úÖ ’ä’°’ø’æ’•÷Ä’® ’£÷Ä’°’∂÷Å’æ’•÷Å÷â ’Ñ’•÷Ä ÷Ö’∫’•÷Ä’°’ø’∏÷Ä’® ’∑’∏÷Ç’ø’∏’æ ’Ø’°’∫ ’Ø’∞’°’Ω’ø’°’ø’´÷â ’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ üå∏"
    )
    show_main_menu(chat_id, "‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®")

# ===== MAIN MENU =====
def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üõç ‘Ω’°’∂’∏÷Ç’©", "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤")
    kb.add("üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä", "üí¨ ‘ø’°’∫ ’¥’•’¶ ’∞’•’ø")
    kb.add("üîç ’à÷Ä’∏’∂’•’¨ ’°’∫÷Ä’°’∂÷Ñ", "üßç ‘ª’¥ ’ß’ª’®")
    return kb

def show_main_menu(chat_id, text="‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®"):
    bot.send_message(chat_id, text, reply_markup=main_menu_kb())
    # üîô ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç
@bot.message_handler(func=lambda m: m.text in ("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", "üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"))
def back_main_msg(m: types.Message):
    try:
        CHECKOUT_STATE.pop(m.from_user.id, None)
    except Exception:
        pass
    show_main_menu(m.chat.id, "’é’•÷Ä’°’§’°÷Ä’±’°÷Ñ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç÷â ‚ú®")

# ===== VALIDATION REGEX =====
NAME_RE  = re.compile(r"^[A-Za-z\u0531-\u0556\u0561-\u0587–Å—ë–™—ä–´—ã–≠—ç–ô–π\s'\-\.]{3,60}$")
PHONE_RE = re.compile(r"^(\+374|0)\d{8}$")


# ’§’•’∫’´ Telegram API ’≥’´’∑’ø URL
apihelper.API_URL = "https://api.telegram.org/bot{0}/{1}"

# .env
load_dotenv()
ENV_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or ""
print("dotenv path:", find_dotenv())
print("BOT_TOKEN raw:", repr(ENV_TOKEN))
print("BOT_TOKEN len:", len(ENV_TOKEN))

# ------------------- CONFIG / CONSTANTS -------------------
DATA_DIR = "data"
MEDIA_DIR = "media"
SETTINGS_FILE = os.path.join(DATA_DIR, "settings.json")
USERS_FILE = os.path.join(DATA_DIR, "users.json")
THOUGHTS_FILE = os.path.join(DATA_DIR, "thoughts.json")
PENDING_THOUGHTS_FILE = os.path.join(DATA_DIR, "pending_thoughts.json")
ADS_FILE = os.path.join(DATA_DIR, "ads.json")
PENDING_ADS_FILE = os.path.join(DATA_DIR, "pending_ads.json")

ADMIN_ID = 6822052289
RL_THOUGHT_SUBMIT_SEC = 180
RL_AD_SUBMIT_SEC = 300

# ------------------- HELPERS: FILE IO -------------------
def ensure_dirs():
    os.makedirs(DATA_DIR, exist_ok=True)
    os.makedirs(MEDIA_DIR, exist_ok=True)
    os.makedirs(os.path.join(MEDIA_DIR, "exchange"), exist_ok=True)
    os.makedirs(os.path.join(MEDIA_DIR, "products"), exist_ok=True)

# ------------------- BOT INIT -------------------
ensure_dirs()

# token’ù ENV > SETTINGS
BOT_TOKEN = ENV_TOKEN or (SETTINGS.get("bot_token") or "")
if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is empty. Put it in your .env or settings.json")


bot = TeleBot(BOT_TOKEN, parse_mode="Markdown")
# === ADMIN PANEL + HEALTH-CHECK (drop-in block) ==============================
# ’ä‘±’è’ç’è‘±’ë’ê‘µ‘º’ù ’ø’•’≤’°’§÷Ä’•’¨ bot = telebot.TeleBot(TOKEN) ’ø’∏’≤’´ ’Ä‘µ’è’à ’¥’•’Ø ’°’∂’£’°’¥
# ’è‘µ’Ç‘±’ì’à‘Ω‘µ‘º’ù ADMIN_ID-’∂ ÷Ñ’∏ ’´÷Ä’°’Ø’°’∂ Telegram ID-’∏’æ
# ============================================================================
# --- ‘ø‘±’ê‘µ’é’à’ê ‘ø‘±’ê‘≥‘±’é’à’ê’Ñ‘±’Ü‘∏ ---
ADMIN_ID = int(os.getenv("ADMIN_ID", "6822052289"))  # ‚Üê ÷É’∏’≠’´÷Ä, ’•’©’• ’∫’•’ø÷Ñ ’ß

# --- ’ñ’°’µ’¨’°’µ’´’∂ ’∫’°’∞’•’Ω’ø ---
DATA_DIR = "admin_data"
os.makedirs(DATA_DIR, exist_ok=True)
USERS_FILE = os.path.join(DATA_DIR, "users.json")
MSG_LOG   = os.path.join(DATA_DIR, "messages.log")
ERR_LOG   = os.path.join(DATA_DIR, "errors.log")

def _load_users():
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def _save_users(data):
    try:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        _log_error(e)

def _log_message(line: str):
    try:
        with open(MSG_LOG, "a", encoding="utf-8") as f:
            f.write(line.rstrip() + "\n")
    except Exception as e:
        _log_error(e)

def _log_error(e):
    try:
        with open(ERR_LOG, "a", encoding="utf-8") as f:
            f.write(f"[{datetime.datetime.utcnow().isoformat()}Z] {repr(e)}\n")
            f.write(traceback.format_exc() + "\n")
    except:
        pass

# --- UPTIME / HEALTH ---
START_TS = time.time()
LAST_ERROR_TEXT = "’π’Ø’°"

def _set_last_error_text(text: str):
    global LAST_ERROR_TEXT
    LAST_ERROR_TEXT = text

# --- ‘π’•’©÷á keep-alive ’©’•’¨ (’∏’π’´’∂’π ’π’´ ’°’∂’∏÷Ç’¥, ’∫’°÷Ä’¶’°’∫’•’Ω ’∫’°’∞’∏÷Ç’¥ ’•’∂÷Ñ ’Ø’•’∂’§’°’∂’´ ’æ’´’≥’°’Ø’®) ---
def _keepalive_thread():
    while True:
        time.sleep(60)  # ’°’¥’•’∂ 60’æ ’¥’´ ÷É’∏÷Ñ÷Ä ’∑’∂’π’∏÷Ç’¥ ’ß
t = threading.Thread(target=_keepalive_thread, daemon=True)
t.start()

# --- ’î’∏ ’¢’∏’ø’´ ’¢’∏’¨’∏÷Ä update-’∂’•÷Ä’® "’¨’Ω’•’¨’∏÷Ç" hook (’π’´ ’≠’°’∂’£’°÷Ä’∏÷Ç’¥ ’∞’•’∂’§’¨’•÷Ä’∂’•÷Ä’´’∂) ---
def _update_listener(updates):
    # updates-’® list ’ß’ù message/update ÷Ö’¢’µ’•’Ø’ø’∂’•÷Ä’∏’æ
    for u in updates:
        try:
            if getattr(u, "content_type", None):  # message
                _capture_user_and_log(u)
        except Exception as e:
            _set_last_error_text(str(e))
            _log_error(e)

# ‘ø÷Å’∏÷Ç’¥ ’•’∂÷Ñ listener-’® (’â‘ª ’ì’à‘Ω’à’í’Ñ ÷Ñ’∏ ’£’∏÷Ä’Æ’∏’≤ ’∞’•’∂’§’¨’•÷Ä’∂’•÷Ä’®)
try:
    bot.set_update_listener(_update_listener)
except Exception as e:
    _set_last_error_text("set_update_listener failed")
    _log_error(e)

# --- ’ï’£’ø’°’ø’•÷Ä’•÷Ä’´ ÷á ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’°’æ’ø’∏’¥’°’ø ’£÷Ä’°’∂÷Å’∏÷Ç’¥ ---
def _capture_user_and_log(m):
    # user bookkeeping
    users = _load_users()
    u = m.from_user
    uid = str(u.id)
    users.setdefault(uid, {
        "id": u.id,
        "first_name": u.first_name or "",
        "last_name": u.last_name or "",
        "username": u.username or "",
        "lang": u.language_code or "",
        "joined_at": datetime.datetime.utcnow().isoformat() + "Z",
        "messages": 0,
        "last_seen": "",
        "blocked": False
    })
    users[uid]["messages"] += 1
    users[uid]["last_seen"] = datetime.datetime.utcnow().isoformat() + "Z"
    # keep latest username/name
    users[uid]["first_name"] = u.first_name or users[uid]["first_name"]
    users[uid]["last_name"]  = u.last_name or users[uid]["last_name"]
    users[uid]["username"]   = u.username or users[uid]["username"]
    _save_users(users)

    # message log
    try:
        chat_type = getattr(m.chat, "type", "")
        text = getattr(m, "text", None)
        caption = getattr(m, "caption", None)
        content = text if text is not None else (caption if caption is not None else m.content_type)
        _log_message(f"[{datetime.datetime.utcnow().isoformat()}Z] "
                     f"uid={u.id} (@{u.username}) chat={chat_type} -> {content}")
    except Exception as e:
        _set_last_error_text(str(e))
        _log_error(e)

# --- ’ï‘≥’è‘±‘ø‘±’ê ’ñ’à’ê’Ñ‘±’è’Ü‘µ’ê ---
def fmt_user(u):
    tag = f"@{u.get('username')}" if u.get("username") else f"id={u.get('id')}"
    name = (u.get("first_name") or "") + (" " + u.get("last_name") if u.get("last_name") else "")
    return f"{tag} ‚Äî {name.strip()}"

def _human_uptime():
    sec = int(time.time() - START_TS)
    d, sec = divmod(sec, 86400)
    h, sec = divmod(sec, 3600)
    m, s  = divmod(sec, 60)
    parts = []
    if d: parts.append(f"{d} ÷Ö÷Ä")
    if h: parts.append(f"{h} ’™")
    if m: parts.append(f"{m} ÷Ä")
    parts.append(f"{s} ’æ")
    return " ".join(parts)

# --- ‘±’§’¥’´’∂ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥ ---
def _is_admin(uid: int) -> bool:
    return int(uid) == int(ADMIN_ID)

# --- ‘±‘¥’Ñ‘ª’Ü ’Ñ‘µ’Ü’Ö’à’í / ‘ø’à’É‘±‘ø’Ü‘µ’ê ---
def admin_keyboard():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üßæ ’é’•÷Ä’ª’´’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä", callback_data="adm_last_msgs"),
        types.InlineKeyboardButton("üë• ’é’•÷Ä’ª’´’∂ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä", callback_data="adm_last_users"),
    )
    kb.add(
        types.InlineKeyboardButton("üì£ Broadcast (’¢’∏’¨’∏÷Ä’´’∂)", callback_data="adm_broadcast"),
        types.InlineKeyboardButton("üîé ’ì’∂’ø÷Ä’•’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª’®", callback_data="adm_search"),
    )
    kb.add(
        types.InlineKeyboardButton("‚¨áÔ∏è ’Ü’•÷Ä’¢’•’º’∂’•’¨ logs", callback_data="adm_download_logs"),
        types.InlineKeyboardButton("üìä ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ / Ping", callback_data="adm_stats"),
    )
    kb.add(
        types.InlineKeyboardButton("‚Ü©Ô∏è ’ì’°’Ø’•’¨", callback_data="adm_close"),
    )
    return kb

# --- /admin ’∞÷Ä’°’¥’°’∂ ---
@bot.message_handler(commands=["admin"])
def open_admin(message):
    if not _is_admin(message.from_user.id):
        return bot.reply_to(message, "‚ùå ‘¥’∏÷Ç÷Ñ ’°’§’¥’´’∂ ’π’•÷Ñ÷â")
    text = (
        "üõ† **‘±’§’¥’´’∂ ’∫’°’∂’•’¨**\n"
        "‘±’µ’Ω’ø’•’≤’´÷Å ’Ø’°÷Ä’∏’≤ ’•’Ω ’ø’•’Ω’∂’•’¨ ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂, ’æ’•÷Ä’ª’´’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®, ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä’´’∂, "
        "’∏÷Ç’≤’°÷Ä’Ø’•’¨ broadcast, ÷É’∂’ø÷Ä’•’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª’®, ’∂’•÷Ä’¢’•’º’∂’•’¨ ’¨’∏’£’•÷Ä’® ÷á ’Ω’ø’∏÷Ç’£’•’¨ uptime-’®÷â"
    )
    bot.send_message(message.chat.id, text, reply_markup=admin_keyboard(), parse_mode="Markdown")

# --- ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ / Ping ---
@bot.callback_query_handler(func=lambda c: c.data == "adm_stats")
def adm_stats(c):
    if not _is_admin(c.from_user.id):
        return bot.answer_callback_query(c.id, "‘±’§’¥’´’∂ ’π’ß’Ω")
    users = _load_users()
    total_users = len(users)
    now = datetime.datetime.utcnow().isoformat() + "Z"
    txt = (
        f"üìä **’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂**\n"
        f"- ’ï’£’ø’°’ø’•÷Ä’•÷Ä’ù {total_users}\n"
        f"- Uptime’ù { _human_uptime() }\n"
        f"- ’é’•÷Ä’ª’´’∂ ’Ω’≠’°’¨’ù {LAST_ERROR_TEXT}\n"
        f"- ‘∫’°’¥’® (UTC)’ù {now}\n"
        f"\n‚úÖ ‘µ’©’• uptime-’® ’°’≥’∏÷Ç’¥ ’ß, ’¢’∏’ø’® ’°’∑’≠’°’ø’∏÷Ç’¥ ’ß 24/7÷â"
    )
    bot.edit_message_text(txt, c.message.chat.id, c.message.message_id, parse_mode="Markdown",
                          reply_markup=admin_keyboard())

# --- ’é’•÷Ä’ª’´’∂ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä ---
@bot.callback_query_handler(func=lambda c: c.data == "adm_last_users")
def adm_last_users(c):
    if not _is_admin(c.from_user.id):
        return bot.answer_callback_query(c.id, "‘±’§’¥’´’∂ ’π’ß’Ω")
    users = list(_load_users().values())
    users.sort(key=lambda x: x.get("last_seen",""), reverse=True)
    chunk = users[:20]
    if not chunk:
        text = "’ï’£’ø’°’ø’•÷Ä’•÷Ä ’§’•’º ’π’Ø’°’∂÷â"
    else:
        lines = [f"üë• **’é’•÷Ä’ª’´’∂ 20 ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä**"]
        for u in chunk:
            lines.append("‚Ä¢ " + fmt_user(u) + f" | last_seen: {u.get('last_seen','')}")
        text = "\n".join(lines)
    bot.edit_message_text(text, c.message.chat.id, c.message.message_id, parse_mode="Markdown",
                          reply_markup=admin_keyboard())

# --- ’é’•÷Ä’ª’´’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä (÷Ñ’°’∑’∏÷Ç’¥ ’•’∂÷Ñ log-’´÷Å) ---
@bot.callback_query_handler(func=lambda c: c.data == "adm_last_msgs")
def adm_last_msgs(c):
    if not _is_admin(c.from_user.id):
        return bot.answer_callback_query(c.id, "‘±’§’¥’´’∂ ’π’ß’Ω")
    try:
        if not os.path.exists(MSG_LOG):
            text = "‘º’∏’£ ÷Ü’°’µ’¨’® ’§’•’º ’π’Ø’°÷â"
        else:
            with open(MSG_LOG, "r", encoding="utf-8") as f:
                lines = f.readlines()[-50:]  # ’æ’•÷Ä’ª’´’∂ 50 ’ø’∏’≤’®
            text = "üßæ **’é’•÷Ä’ª’´’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä (50 ’ø’∏’≤)**\n" + "".join(["‚Ä¢ " + l for l in lines])
            # ’•÷Ä’Ø’°÷Ä ’Ø’°÷Ä’∏’≤ ’ß ’¨’´’∂’•’¨, Telegram-’´ ’Ω’°’∞’¥’°’∂’∂’•÷Ä’® ’∞’°’∑’æ’•’¨
            if len(text) > 3800:
                text = text[-3800:]
        bot.edit_message_text(text, c.message.chat.id, c.message.message_id,
                              reply_markup=admin_keyboard(), parse_mode=None)
    except Exception as e:
        _set_last_error_text(str(e))
        _log_error(e)
        bot.answer_callback_query(c.id, "’â’Ω’ø’°÷Å’æ’•÷Å ’Ø’°÷Ä’§’°’¨ ’¨’∏’£’®")

# --- Logs download (’∏÷Ä’∫’•’Ω ÷Ü’°’µ’¨) ---
@bot.callback_query_handler(func=lambda c: c.data == "adm_download_logs")
def adm_download_logs(c):
    if not _is_admin(c.from_user.id):
        return bot.answer_callback_query(c.id, "‘±’§’¥’´’∂ ’π’ß’Ω")
    sent_something = False
    try:
        if os.path.exists(MSG_LOG):
            with open(MSG_LOG, "rb") as f:
                bot.send_document(c.message.chat.id, f, caption="messages.log")
                sent_something = True
        if os.path.exists(ERR_LOG):
            with open(ERR_LOG, "rb") as f:
                bot.send_document(c.message.chat.id, f, caption="errors.log")
                sent_something = True
        if not sent_something:
            bot.answer_callback_query(c.id, "‘º’∏’£’•÷Ä ’π’Ø’°’∂ ’§’•’º")
    except Exception as e:
        _set_last_error_text(str(e))
        _log_error(e)
        bot.answer_callback_query(c.id, "’ç’≠’°’¨’ù logs ’∏÷Ç’≤’°÷Ä’Ø’•’¨’´’Ω")

# --- Broadcast ’¢’∏’¨’∏÷Ä ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä’´’∂ ---
BROADCAST_STATE = {}  # {admin_id: True/False}
@bot.callback_query_handler(func=lambda c: c.data == "adm_broadcast")
def adm_broadcast(c):
    if not _is_admin(c.from_user.id):
        return bot.answer_callback_query(c.id, "‘±’§’¥’´’∂ ’π’ß’Ω")
    BROADCAST_STATE[c.from_user.id] = True
    bot.answer_callback_query(c.id)
    bot.send_message(c.message.chat.id,
                     "‚úçÔ∏è ’à÷Ç’≤’°÷Ä’Ø’´÷Ä ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’ù broadcast ’°’∂’•’¨ ’¢’∏’¨’∏÷Ä ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä’´’∂÷â\n"
                     "’â’•’≤’°÷Ä’Ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’£÷Ä’´÷Ä `/cancel`.")

@bot.message_handler(commands=["cancel"])
def adm_broadcast_cancel(m):
    if not _is_admin(m.from_user.id):
        return
    if BROADCAST_STATE.get(m.from_user.id):
        BROADCAST_STATE[m.from_user.id] = False
        bot.reply_to(m, "‚ùå ’â’•’≤’°÷Ä’Ø’æ’•÷Å broadcast-’®÷â")

@bot.message_handler(func=lambda m: BROADCAST_STATE.get(m.from_user.id, False))
def adm_broadcast_do(m):
    if not _is_admin(m.from_user.id):
        return
    text_or_caption = m.text or m.caption or ""
    users = list(_load_users().values())
    ok = fail = 0
    for u in users:
        try:
            bot.copy_message(u["id"], m.chat.id, m.message_id)
            ok += 1
            time.sleep(0.03)  # ’¥’´ ÷É’∏÷Ñ÷Ä ’Ω’°’∞’∏÷Ç’∂’∏÷Ç’©’µ’∏÷Ç’∂
        except Exception as e:
            fail += 1
    BROADCAST_STATE[m.from_user.id] = False
    bot.reply_to(m, f"üì£ ‘±’æ’°÷Ä’ø’æ’°’Æ ’ß. ‚úÖ {ok} | ‚ùå {fail}")

# --- ’à÷Ç’¶’•÷Ä ’∏÷Ä’∏’∂’∏÷Ç’¥ ---
SEARCH_STATE = {}
@bot.callback_query_handler(func=lambda c: c.data == "adm_search")
def adm_search(c):
    if not _is_admin(c.from_user.id):
        return bot.answer_callback_query(c.id, "‘±’§’¥’´’∂ ’π’ß’Ω")
    SEARCH_STATE[c.from_user.id] = True
    bot.answer_callback_query(c.id)
    bot.send_message(c.message.chat.id,
                     "’Ü’•÷Ä’¥’∏÷Ç’Æ’´÷Ä user ID ’Ø’°’¥ @username’ù ’ø’æ’µ’°’¨ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ÷Ñ’°÷Ä’ø’® ’ø’•’Ω’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä.\n"
                     "’ï÷Ä.` 123456789 ’Ø’°’¥ @nickname")

@bot.message_handler(func=lambda m: SEARCH_STATE.get(m.from_user.id, False))
def do_search_user(m):
    if not _is_admin(m.from_user.id):
        return
    query = (m.text or "").strip()
    SEARCH_STATE[m.from_user.id] = False
    users = _load_users()
    found = None
    if query.startswith("@"):
        uname = query[1:].lower()
        for u in users.values():
            if (u.get("username") or "").lower() == uname:
                found = u; break
    else:
        if query.isdigit() and query in users:
            found = users[query]
    if not found:
        return bot.reply_to(m, "’â’£’ø’° ’°’µ’§ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª’®÷â")
    text = (
        "ü™™ **’ï’£’ø’°’ø’´÷Ä’∏’ª ÷Ñ’°÷Ä’ø**\n" +
        fmt_user(found) + "\n" +
        f"ID: `{found.get('id')}`\n"
        f"‘º’•’¶’∏÷Ç: {found.get('lang')}\n"
        f"‘≥÷Ä’°’∂÷Å’æ’°’Æ: {found.get('joined_at')}\n"
        f"’é’•÷Ä’ª. ’°’Ø’ø’´’æ’∏÷Ç’©’µ’∏÷Ç’∂: {found.get('last_seen')}\n"
        f"’Ä’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä: {found.get('messages')}\n"
    )
    bot.reply_to(m, text, parse_mode="Markdown")

# --- ’ì’°’Ø’•’¨ ’°’§’¥’´’∂ ’¥’•’∂’µ’∏÷Ç’∂ ---
@bot.callback_query_handler(func=lambda c: c.data == "adm_close")
def adm_close(c):
    if not _is_admin(c.from_user.id):
        return bot.answer_callback_query(c.id, "‘±’§’¥’´’∂ ’π’ß’Ω")
    try:
        bot.delete_message(c.message.chat.id, c.message.message_id)
    except Exception:
        pass

# --- ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä error-wrapper ÷Ö÷Ä’´’∂’°’Ø’ù ’•’©’• ’∏÷Ç’¶’∏÷Ç’¥ ’•’Ω ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨ ÷Ñ’∏ ’Ø’∏’§’∏÷Ç’¥ ---
def safe_send(chat_id, *args, **kwargs):
    try:
        return bot.send_message(chat_id, *args, **kwargs)
    except Exception as e:
        _set_last_error_text(str(e))
        _log_error(e)

# --- /ping ’°÷Ä’°’£ health-check (’Ø’°÷Ä’∏’≤ ’•’Ω ’£’∏÷Ä’Æ’°÷Ä’Ø’•’¨ ÷Å’°’∂’Ø’°÷Å’°’Æ ’∫’°’∞’´’∂) ---
@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    if not _is_admin(m.from_user.id):
        return bot.reply_to(m, "Pong üü¢")
    bot.reply_to(m, f"üü¢ Pong\nUptime: {_human_uptime()}\nLast error: {LAST_ERROR_TEXT}")
# =============================================================================


# ------------------- CONFIG / CONSTANTS -------------------
DATA_DIR = "data"
MEDIA_DIR = "media"

SETTINGS_FILE = os.path.join(DATA_DIR, "settings.json")
USERS_FILE = os.path.join(DATA_DIR, "users.json")

THOUGHTS_FILE = os.path.join(DATA_DIR, "thoughts.json")
PENDING_THOUGHTS_FILE = os.path.join(DATA_DIR, "pending_thoughts.json")

ADS_FILE = os.path.join(DATA_DIR, "ads.json")
PENDING_ADS_FILE = os.path.join(DATA_DIR, "pending_ads.json")

# --- Admin ---
ADMIN_ID = 6822052289  # ÷Ñ’∏ ’°’§’¥’´’∂ ID

# --- Rate limits (anti-spam) ---
RL_THOUGHT_SUBMIT_SEC = 180   # 1 ’∞’°’µ’ø / 3 ÷Ä’∏’∫’•
RL_AD_SUBMIT_SEC = 300        # 1 ’∞’°’µ’ø / 5 ÷Ä’∏’∫’•

# --- States (’∫’°÷Ä’¶ FSM) ---
STATE_NONE = "NONE"
STATE_GT_TEXT = "GT_TEXT"
STATE_GT_AUTHOR = "GT_AUTHOR"

STATE_AD_BNAME = "AD_BNAME"
STATE_AD_DESC = "AD_DESC"
STATE_AD_WEBSITE = "AD_WEBSITE"
STATE_AD_TG = "AD_TG"
STATE_AD_VIBER = "AD_VIBER"
STATE_AD_WHATSAPP = "AD_WHATSAPP"
STATE_AD_PHONE = "AD_PHONE"
STATE_AD_ADDRESS = "AD_ADDRESS"
STATE_AD_HOURS = "AD_HOURS"
STATE_AD_CTA_TEXT = "AD_CTA_TEXT"
STATE_AD_CTA_URL = "AD_CTA_URL"
STATE_AD_CONFIRM = "AD_CONFIRM"

# --- MENU LABELS (FINAL, as requested) ---
BTN_SHOP      = "üõç ‘Ω’°’∂’∏÷Ç’©"
BTN_CART      = "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤"
BTN_EXCHANGE  = "üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä"
BTN_THOUGHTS  = "üí° ‘Ω’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä"
BTN_RATES     = "üìà ’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä"
BTN_PROFILE   = "üßç ‘ª’¥ ’ß’ª’®"
BTN_FEEDBACK  = "üí¨ ‘ø’°’∫ ’¥’•’¶ ’∞’•’ø"
BTN_PARTNERS  = "üì¢ ‘≤’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä"
BTN_SEARCH    = "üîç ‘±’∫÷Ä’°’∂÷Ñ’´ ’∏÷Ä’∏’∂’∏÷Ç’¥"
BTN_INVITE    = "üë• ’Ä÷Ä’°’æ’´÷Ä’•’¨ ’®’∂’Ø’•÷Ä’∂’•÷Ä’´"
BTN_HOME      = "üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç"

# ------------------- RUNTIME (in-memory) -------------------
USER_STATE = {}   
def set_state(cid, s): USER_STATE[cid] = s
def get_state(cid): return USER_STATE.get(cid)
def clear_state(cid): USER_STATE.pop(cid, None)


NUMBER_RE = re.compile(r"^\d+([.,]\d{1,2})?$")
def is_amount(text: str) -> bool:
    return bool(NUMBER_RE.match(text.strip()))
USER_FORM = {}           # user_id -> dict (session)
USER_LAST_ACTION = {}    # user_id -> {key: timestamp}  (rate-limit)

# cache
SETTINGS = {}
USERS = {}
GOOD_THOUGHTS = []       # approved
PENDING_THOUGHTS = {}    # id -> dict
ADS_STORE = []           # approved
PENDING_ADS = {}         # id -> dict

NEXT_THOUGHT_ID = 1001
NEXT_AD_ID = 5001

# ------------------- HELPERS: FILE IO -------------------
def ensure_dirs():
    os.makedirs(DATA_DIR, exist_ok=True)
    os.makedirs(MEDIA_DIR, exist_ok=True)
    os.makedirs(os.path.join(MEDIA_DIR, "exchange"), exist_ok=True)
    os.makedirs(os.path.join(MEDIA_DIR, "products"), exist_ok=True)

def load_json(path, default):
    try:
        if not os.path.exists(path):
            save_json(path, default)
            return default
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        print("load_json ERROR:", path)
        print(traceback.format_exc())
        return default

def save_json(path, data):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception:
        print("save_json ERROR:", path)
        print(traceback.format_exc())
        return False

def reload_all():
    # ‚Üê ADD ADMIN_ID here with the other globals
    global SETTINGS, USERS, GOOD_THOUGHTS, PENDING_THOUGHTS, ADS_STORE, PENDING_ADS
    global NEXT_THOUGHT_ID, NEXT_AD_ID, ADMIN_ID

    SETTINGS = load_json(SETTINGS_FILE, {
        "bot_token": "PASTE_YOUR_BOT_TOKEN_HERE",
        "admin_id": ADMIN_ID,
        "customer_counter": 1007,  # so the next will be 1008
        "alipay_rate_amd": 58,
        "bot_username": "YourBotUsernameHere"
    })

    # allow changing admin id from settings if needed (NO 'global' inside)
    if isinstance(SETTINGS.get("admin_id"), int):
        ADMIN_ID = SETTINGS["admin_id"]

    USERS = load_json(USERS_FILE, {})  # user_id -> {"referrer_id": int, "shares": int}
    GOOD_THOUGHTS = load_json(THOUGHTS_FILE, [])
    PENDING_THOUGHTS = load_json(PENDING_THOUGHTS_FILE, {})
    ADS_STORE = load_json(ADS_FILE, [])
    PENDING_ADS = load_json(PENDING_ADS_FILE, {})

    # compute next ids
    if GOOD_THOUGHTS:
        # use get with default to be safe
        ids = [x.get("id", 0) for x in GOOD_THOUGHTS]
        NEXT_THOUGHT_ID = max(ids + [1000]) + 1
    if PENDING_THOUGHTS:
        NEXT_THOUGHT_ID = max(NEXT_THOUGHT_ID, max([int(k) for k in PENDING_THOUGHTS.keys()]) + 1)

    if ADS_STORE:
        ids = [x.get("id", 0) for x in ADS_STORE]
        NEXT_AD_ID = max(ids + [5000]) + 1
    if PENDING_ADS:
        NEXT_AD_ID = max(NEXT_AD_ID, max([int(k) for k in PENDING_ADS.keys()]) + 1)


def persist_all():
    save_json(SETTINGS_FILE, SETTINGS)
    save_json(USERS_FILE, USERS)
    save_json(THOUGHTS_FILE, GOOD_THOUGHTS)
    save_json(PENDING_THOUGHTS_FILE, PENDING_THOUGHTS)
    save_json(ADS_FILE, ADS_STORE)
    save_json(PENDING_ADS_FILE, PENDING_ADS)

# ------------------- HELPERS: UTILS -------------------
def ts() -> int:
    return int(time.time())

def rate_limited(user_id: int, key: str, window_sec: int) -> bool:
    rec = USER_LAST_ACTION.setdefault(user_id, {})
    last = rec.get(key, 0)
    now = ts()
    if now - last < window_sec:
        return True
    rec[key] = now
    return False

def build_main_menu() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(BTN_SHOP, BTN_CART)
    kb.add(BTN_EXCHANGE, BTN_THOUGHTS)
    kb.add(BTN_RATES, BTN_PROFILE)
    kb.add(BTN_FEEDBACK, BTN_PARTNERS)
    kb.add(BTN_SEARCH, BTN_INVITE)
    return kb

@bot.message_handler(func=lambda m: m.text == BTN_HOME)
def back_home(m: types.Message):
    bot.send_message(m.chat.id, "‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®", reply_markup=build_main_menu())
def send_welcome(message: types.Message):
    user_id = message.from_user.id
    global customer_counter
    customer_counter += 1
    save_counter(customer_counter)
    customer_no = customer_counter

    markup = build_main_menu()
    text = welcome_text(customer_no)

    # ’ç’Ø’¶’¢’∏÷Ç’¥ ’∂’°’∫’°’Ω’ø’°’Ø’´ ’∂’Ø’°÷Ä’®
    try:
        with open("media/bunny.jpg", "rb") as photo:
            bot.send_photo(message.chat.id, photo)

    except Exception as e:
        print("Bunny image not found:", e)

    # ’Ä’•’ø’∏ ’°÷Ä’§’•’∂ ’ø’•÷Ñ’Ω’ø’®
    bot.send_message(
        message.chat.id,
        text,
        reply_markup=markup,
        parse_mode="HTML"
    )

def get_username_or_id(u) -> str:
    uname = getattr(u, "username", None)
    return f"@{uname}" if uname else f"id{u.id}"

def welcome_text(customer_no: int) -> str:
    return (
        "üê∞üå∏ <b>‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø StarLegen</b> üõç‚ú®\n\n"
        "üíñ ’á’∂’∏÷Ä’∞’°’Ø’°’¨ ’•’∂÷Ñ, ’∏÷Ä ’¥’´’°÷Å’•’¨ ’•÷Ñ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’¥’°’µ’∂÷Ñ’´’∂ ‚ù§Ô∏è\n"
        f"‘¥’∏÷Ç÷Ñ ’°’µ’™’¥ ’¥’•÷Ä ’Ω’´÷Ä’•’¨’´ ’∞’°’≥’°’≠’∏÷Ä’§’∂ ’•÷Ñ ‚Ññ{customer_no} ‚ú®\n\n"
        "’Ñ’•÷Ä ’≠’°’∂’∏÷Ç’©’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’£’ø’∂’•’¨ ’°’¥’•’∂ ÷Ö÷Ä ÷Ö’£’ø’°’Ø’°÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’´ ’£’•’≤’•÷Å’´’Ø ’¨’°÷Å’°’Ø’°’¶’¥ ’£’∂’•÷Ä’®÷â\n\n"
        "üéÅ <b>‘±’æ’•’¨’´ ’∑’°’ø’´’ù</b> ’°’º÷Å’°’∂÷Å ’£’∂’¥’°’∂ ’§’•’∫÷Ñ’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ÷Ö’£’ø’æ’•’¨ ’¥’´’∂’π÷á 10% ’¶’•’≤’π ’Ø’∏÷Ç’∫’∏’∂’∂’•÷Ä’´ ’∞’°’¥’°’Ø’°÷Ä’£’´÷Å÷â\n\n"
        "üì¶ ‘ª’û’∂’π ’Ø’£’ø’∂’•÷Ñ ’°’µ’Ω’ø’•’≤‚Ä§\n"
        "‚Ä¢ ‘∫’°’¥’°’∂’°’Ø’°’Ø’´÷Å ÷á ÷Ö’£’ø’°’Ø’°÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä ’°’¥’•’∂ ÷Ö÷Ä’æ’° ’∞’°’¥’°÷Ä\n"
        "‚Ä¢ ‘º’°’æ’°’£’∏÷Ç’µ’∂ ÷á ’ø’°÷Ä’¢’•÷Ä’°’Ø’æ’°’Æ Telegram ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä\n"
        "‚Ä¢ ’Ä’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ÷á ’°÷Ä’°’£ ’°’º’°÷Ñ’∏÷Ç’¥ üöö\n\n"
        "üìä <b>’ì’∏’≠’°÷Ä’™’•÷Ñ’´ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä</b>\n"
        "‚Ä¢ PI ‚ûî USDT (’∑’∏÷Ç’Ø’°’µ’°’Ø’°’∂ ’Ø’∏÷Ç÷Ä’Ω, +20% ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥)\n"
        "‚Ä¢ FTN ‚ûî AMD (’¥’´’°’µ’∂ 10% ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥)\n"
        "‚Ä¢ Alipay ’¨’´÷Å÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥ (1 CNY = 58÷è)\n\n"
        "‚ú® ‘±’æ’•’¨’´’∂ ’°÷Ä’§’•’∂ ’∫’°’ø÷Ä’°’Ω’ø’æ’°’Æ ’∏÷Ç ÷Ö’£’ø’æ’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’®’∂’ø÷Ä’•÷Ñ ’∂’•÷Ä÷Ñ÷á’´ ’¢’°’™’´’∂’∂’•÷Ä’® üëá"
    )


def share_button(cb_prefix: str, payload: str) -> types.InlineKeyboardButton:
    # We use callback to show a copyable share text
    return types.InlineKeyboardButton("üîó ‘ø’´’Ω’æ’•’¨", callback_data=f"{cb_prefix}:share:{payload}")

def do_share_message(chat_id: int, text: str):
    # send a message with the share text so user can forward/copy
    msg = "üîó <b>‘ø’´’Ω’æ’•’¨’∏÷Ç ’ø’•÷Ñ’Ω’ø</b>\n\n" + text + "\n\n’ä’°÷Ä’¶’°’∫’•’Ω ÷É’∏’≠’°’∂÷Å’•÷Ñ ’Ω’° ’±’•÷Ä ’®’∂’Ø’•÷Ä’∂’•÷Ä’´’∂ üòâ"
    bot.send_message(chat_id, msg, parse_mode="HTML")

def bot_link_with_ref(user_id: int) -> str:
    # referral-friendly, replace with your actual bot username if known
    # If you have actual bot username, put it to SETTINGS["bot_username"]
    bot_username = SETTINGS.get("bot_username", "YourBotUsernameHere")
    return f"https://t.me/{bot_username}?start={user_id}"

# ------------------- BOT INIT -------------------
ensure_dirs()
reload_all()

BOT_TOKEN = SETTINGS.get("bot_token") or "PASTE_YOUR_BOT_TOKEN_HERE"

# ------------------- /start & welcome -------------------
@bot.message_handler(commands=['start'])
def start_handler(m: types.Message):
    # only private chats
    if getattr(m.chat, "type", "") != "private":
        return

    user_id = m.from_user.id

    # referral capture: /start <ref_id>
    try:
        parts = (m.text or "").split(maxsplit=1)
        if len(parts) == 2:
            ref = parts[1].strip()
            if ref.isdigit():
                ref_id = int(ref)
                if user_id != ref_id:
                    u = USERS.setdefault(str(user_id), {})
                    if "referrer_id" not in u:
                        u["referrer_id"] = ref_id
                        save_json(USERS_FILE, USERS)
    except Exception:
        pass

    # increment customer counter
    try:
        SETTINGS["customer_counter"] = int(SETTINGS.get("customer_counter", 1007)) + 1
    except Exception:
        SETTINGS["customer_counter"] = 1008
    persist_all()

    customer_no = SETTINGS["customer_counter"]

    # send bunny (if exists), then welcome with menu
    markup = build_main_menu()
    bunny_path = os.path.join(MEDIA_DIR, "bunny.jpg")
    try:
        if os.path.exists(bunny_path):
            with open(bunny_path, "rb") as ph:
                bot.send_photo(m.chat.id, ph)
    except Exception:
        print("BUNNY SEND ERROR")
        print(traceback.format_exc())

    try:
        bot.send_message(m.chat.id, welcome_text(customer_no), reply_markup=markup, parse_mode="HTML")
    except Exception:
        bot.send_message(m.chat.id, "‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø!", reply_markup=markup)
@bot.message_handler(commands=['menu'])
def menu_cmd(m: types.Message):
    return go_home(m)

# ------------------- Invite / share bot -------------------
@bot.message_handler(func=lambda msg: msg.text == BTN_INVITE)
def invite_handler(m: types.Message):
    user_id = m.from_user.id
    link = bot_link_with_ref(user_id)
    text = (
        "üë• <b>‘ø’´’Ω’æ’•÷Ñ ’¢’∏’ø’∏’æ ÷á ’Ω’ø’°÷Å’•÷Ñ ’¢’∏’∂’∏÷Ç’Ω’∂’•÷Ä</b>\n\n"
        f"’Å’•÷Ä ’∞÷Ä’°’æ’•÷Ä’´ ’∞’≤’∏÷Ç’¥’®’ù\n{link}\n\n"
        "’à÷Ç’≤’°÷Ä’Ø’•÷Ñ ’Ω’° ’®’∂’Ø’•÷Ä’∂’•÷Ä’´’∂, ’∏÷Ä ’¥’´’°’∂’°’∂ ’¢’∏’ø’´’∂ üå∏"
    )
    bot.send_message(m.chat.id, text, parse_mode="HTML")

# =========================
# üß† ‘º‘±’é ’Ñ’è’î‘µ’ê (‘±’ç‘±’ë’é‘±‘æ’î’Ü‘µ’ê)
# =========================
def render_good_thoughts(page: int = 1, per_page: int = 1):
    total = len(GOOD_THOUGHTS)
    page = max(1, min(page, max(1, total if total else 1)))
    idx = page - 1
    item = GOOD_THOUGHTS[idx] if total else None

    if not item:
        text = "‘±’µ’Ω ’∫’°’∞’´’∂ ’°’Ω’∏÷Ç’µ’©’∂’•÷Ä ’π’Ø’°’∂÷â"
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¥’ø÷Ñ", callback_data="gt:new"))
        kb.add(types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä", callback_data="gt:home"))
        return text, kb

    posted_by = item.get("posted_by")
    by_line = f"\n\nüìé ’è’•’≤’°’§÷Ä’∏’≤’ù {posted_by}" if posted_by else ""
    text = f"üß† <b>‘º’°’æ ’¥’ø÷Ñ’•÷Ä</b>\n\n{item['text']}{by_line}\n\n‚Äî ‘∑’ª {page}/{total}"

    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚ù§Ô∏è ’Ä’°’æ’°’∂’•’¨", callback_data=f"gt:like:{item['id']}"),
        types.InlineKeyboardButton("üîñ ’ä’°’∞’•’¨", callback_data=f"gt:save:{item['id']}")
    )
    kb.add(share_button("gt", str(item['id'])))
    kb.add(types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¥’ø÷Ñ", callback_data="gt:new"))

    nav = []
    if page > 1:
        nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è ’Ü’°’≠’∏÷Ä’§", callback_data=f"gt:page:{page-1}"))
    if total and page < total:
        nav.append(types.InlineKeyboardButton("‘±’µ’™’¥’∏÷Ñ ‚û°Ô∏è", callback_data=f"gt:page:{page+1}"))
    if nav:
        kb.row(*nav)
    kb.add(types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="gt:home"))
    return text, kb

@bot.message_handler(func=lambda m: m.text == BTN_THOUGHTS)
def show_good_thoughts(m: types.Message):
    text, kb = render_good_thoughts(page=1)
    bot.send_message(m.chat.id, text, reply_markup=kb, parse_mode="HTML")

@bot.callback_query_handler(func=lambda c: c.data.startswith("gt:"))
def on_good_thoughts_cb(c: types.CallbackQuery):
    try:
        parts = c.data.split(":")
        action = parts[1]

        if action == "page" and len(parts) == 3:
            page = max(1, int(parts[2]))
            text, kb = render_good_thoughts(page=page)
            bot.edit_message_text(
                chat_id=c.message.chat.id,
                message_id=c.message.message_id,
                text=text,
                reply_markup=kb,
                parse_mode="HTML"
            )

        elif action in ("like", "save") and len(parts) == 3:
            bot.answer_callback_query(c.id, "‘≥÷Ä’°’∂÷Å’æ’•÷Å ‚úÖ")

        elif action == "new":
            user_id = c.from_user.id
            # rate-limit
            if rate_limited(user_id, "gt_submit", RL_THOUGHT_SUBMIT_SEC):
                bot.answer_callback_query(c.id, "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ÷É’∏÷Ä’±’•’¨ ’°’æ’•’¨’´ ’∏÷Ç’∑÷â")
                return

            USER_STATE[user_id] = STATE_GT_TEXT
            USER_FORM[user_id] = {}
            bot.answer_callback_query(c.id)
            bot.send_message(
                c.message.chat.id,
                "‚úçÔ∏è ‘≥÷Ä’•÷Ñ ’±’•÷Ä ’¥’ø’°’Æ’∏÷Ç’¥’®/’°’Ω’∏÷Ç’µ’©’® ’°’¥’¢’∏’≤’ª’∏÷Ç’©’µ’°’¥’¢ (’¥’´’∂’π÷á 400 ’∂’´’∑):"
            )

        elif action == "share" and len(parts) == 3:
            tid = parts[2]
            item = None
            for t in GOOD_THOUGHTS:
                if str(t.get("id")) == tid:
                    item = t
                    break
            if not item:
                bot.answer_callback_query(c.id, "’â’´ ’£’ø’∂’æ’•’¨÷â")
                return
            # compose share text
            share_txt = (
                f"üß† ‘º’°’æ ’¥’´’ø÷Ñ’ù\n\n{item['text']}\n\n"
                f"’Ñ’´’°÷Å’´÷Ä ’¥’•÷Ä ’¢’∏’ø’´’∂ üëâ {bot_link_with_ref(c.from_user.id)}"
            )
            bot.answer_callback_query(c.id)
            do_share_message(c.message.chat.id, share_txt)

        elif action == "home":
            bot.edit_message_text(
                chat_id=c.message.chat.id,
                message_id=c.message.message_id,
                text="’é’•÷Ä’°’§’°÷Ä’± ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç üëá",
                parse_mode="HTML"
            )
            bot.send_message(c.message.chat.id, "‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂ üëá", reply_markup=build_main_menu())

    except Exception as e:
        print("GOOD THOUGHTS NAV ERROR:", e)
        bot.answer_callback_query(c.id, "’ç’≠’°’¨ ’ø’•’≤’´ ’∏÷Ç’∂’•÷Å’°’æ")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_GT_TEXT)
def on_gt_text(m: types.Message):
    txt = (m.text or "").strip()
    if not txt:
        bot.send_message(m.chat.id, "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’ø’•÷Ñ’Ω’ø÷â")
        return
    if len(txt) > 400:
        bot.send_message(m.chat.id, "‘Ω’∏’Ω÷Ñ’® ’∑’°’ø ’•÷Ä’Ø’°÷Ä ’ß, ’Ø÷Ä’≥’°’ø’•÷Ñ ’¥’´’∂’π÷á 400 ’∂’´’∑÷â")
        return

    USER_FORM[m.from_user.id]["text"] = txt
    USER_STATE[m.from_user.id] = STATE_GT_AUTHOR
    bot.send_message(m.chat.id, "‚úçÔ∏è ’Ü’∑’•÷Ñ ’∞’•’≤’´’∂’°’Ø’´’∂ (’Ø’°’¥ ’£÷Ä’•÷Ñ ¬´‚Äî¬ª ’•’©’• ’π’£’´’ø’•÷Ñ):")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_GT_AUTHOR)
def on_gt_author(m: types.Message):
    global NEXT_THOUGHT_ID
    user_id = m.from_user.id
    author = (m.text or "").strip() or "‚Äî"

    data = USER_FORM.get(user_id, {})
    text = data.get("text", "")

    th_id = NEXT_THOUGHT_ID
    NEXT_THOUGHT_ID += 1

    submitter = m.from_user.username or f"id{user_id}"
    PENDING_THOUGHTS[str(th_id)] = {
        "id": th_id,
        "text": f"{text}\n\n‚Äî {author}",
        "submitter_id": user_id,
        "submitter_name": submitter,
        "created_at": datetime.utcnow().isoformat()
    }
    save_json(PENDING_THOUGHTS_FILE, PENDING_THOUGHTS)

    USER_STATE[user_id] = STATE_NONE
    USER_FORM.pop(user_id, None)

    bot.send_message(m.chat.id, "‚úÖ ’à÷Ç’≤’°÷Ä’Ø’æ’°’Æ ’ß ’°’§’¥’´’∂’´’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂ ’∞’°’¥’°÷Ä÷â ’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂!")

    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨", callback_data=f"gtadm:approve:{th_id}"),
        types.InlineKeyboardButton("‚ùå ’Ñ’•÷Ä’™’•’¨", callback_data=f"gtadm:reject:{th_id}")
    )
    admin_text = (
        f"üß† <b>’Ü’∏÷Ä ’¥’ø÷Ñ’´ ’∞’°’µ’ø</b>\n"
        f"ID: {th_id}\n"
        f"’à÷Ç’≤’°÷Ä’Ø’∏’≤’ù @{submitter}\n\n"
        f"{PENDING_THOUGHTS[str(th_id)]['text']}"
    )
    bot.send_message(ADMIN_ID, admin_text, reply_markup=kb, parse_mode="HTML")

@bot.callback_query_handler(func=lambda c: c.data.startswith("gtadm:"))
def on_gt_admin(c: types.CallbackQuery):
    parts = c.data.split(":")
    if len(parts) != 3:
        return
    action, th_id_str = parts[1], parts[2]

    if c.from_user.id != ADMIN_ID:
        bot.answer_callback_query(c.id, "’Ñ’´’°’µ’∂ ’°’§’¥’´’∂’® ’Ø’°÷Ä’∏’≤ ’ß ’∞’°’Ω’ø’°’ø’•’¨÷â")
        return

    item = PENDING_THOUGHTS.get(th_id_str)
    if not item:
        bot.answer_callback_query(c.id, "‘¥’°’ø’°÷Ä’Ø ’ß ’Ø’°’¥ ’°÷Ä’§’•’∂ ’¥’∑’°’Ø’æ’°’Æ ’ß÷â")
        return

    if action == "approve":
        GOOD_THOUGHTS.append({
            "id": item["id"],
            "text": item["text"],
            "posted_by": f"@{item['submitter_name']}"
        })
        save_json(THOUGHTS_FILE, GOOD_THOUGHTS)
        PENDING_THOUGHTS.pop(th_id_str, None)
        save_json(PENDING_THOUGHTS_FILE, PENDING_THOUGHTS)

        bot.edit_message_text("‚úÖ ’Ä’°’Ω’ø’°’ø’æ’•÷Å ÷á ’°’æ’•’¨’°÷Å’°’æ ¬´‘º’°’æ ’¥’ø÷Ñ’•÷Ä¬ª-’∏÷Ç’¥÷â",
                              c.message.chat.id, c.message.message_id)
        bot.answer_callback_query(c.id, "’Ä’°’Ω’ø’°’ø’æ’•÷Å")
        try:
            bot.send_message(item["submitter_id"], "‚úÖ ’Å’•÷Ä ’¥’´’ø÷Ñ’® ’∞’°’Ω’ø’°’ø’æ’•÷Å ÷á ’∞÷Ä’°’∫’°÷Ä’°’Ø’æ’•÷Å÷â ’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂!")
        except:
            pass

    elif action == "reject":
        PENDING_THOUGHTS.pop(th_id_str, None)
        save_json(PENDING_THOUGHTS_FILE, PENDING_THOUGHTS)
        bot.edit_message_text("‚ùå ’Ñ’•÷Ä’™’æ’•÷Å÷â", c.message.chat.id, c.message.message_id)
        bot.answer_callback_query(c.id, "’Ñ’•÷Ä’™’æ’•÷Å")
        try:
            bot.send_message(item["submitter_id"], "‚ùå ’Å’•÷Ä ’¥’´’ø÷Ñ’® ’¥’•÷Ä’™’æ’•÷Å (’Ø’°÷Ä’∏’≤ ’•÷Ñ ÷É’∏÷Ä’±’•’¨ ’∂’∏÷Ä’´÷Å):")
        except:
            pass

# =========================
# üì£ ‘≥’à’é‘±‘∂‘¥’Ü‘µ’ê (ADS)
# =========================
def render_ads_list(page: int = 1, per_page: int = 5):
    active = [a for a in ADS_STORE if a.get("active")]
    total = len(active)
    page = max(1, min(page, max(1, (total + per_page - 1) // per_page if total else 1)))
    start = (page - 1) * per_page
    end = start + per_page
    chunk = active[start:end]

    lines = ["üì£ <b>‘≥’∏’æ’°’¶’§’°’µ’´’∂ ’°’º’°’ª’°÷Ä’Ø’∂’•÷Ä</b>\n"]
    if not chunk:
        lines.append("‘±’µ’Ω ’∫’°’∞’´’∂ ’°’º’°’ª’°÷Ä’Ø’∂’•÷Ä ’π’Ø’°’∂÷â")
    else:
        for ad in chunk:
            by = ad.get("posted_by")
            lines.append(
                f"üè™ <b>{ad.get('title')}</b>{' ‚Äî ' + by if by else ''}\n"
                f"üìù {ad.get('desc','')}\n"
                f"üåê {ad.get('website','‚Äî')}\n"
                f"Telegram: {ad.get('telegram','‚Äî')}\n"
                f"Viber: {ad.get('viber','‚Äî')} | WhatsApp: {ad.get('whatsapp','‚Äî')}\n"
                f"‚òéÔ∏è {ad.get('phone','‚Äî')}\n"
                f"üìç {ad.get('address','‚Äî')} | üïí {ad.get('hours','‚Äî')}\n"
                f"{'üîò ' + ad.get('cta','‘¥’´’ø’•’¨') if ad.get('cta') else ''}"
            )
            lines.append("‚Äî ‚Äî ‚Äî")

    text = "\n".join(lines)

    kb = types.InlineKeyboardMarkup()
    for ad in chunk:
        if ad.get("url"):
            kb.add(types.InlineKeyboardButton(ad.get("cta") or "‘¥’´’ø’•’¨", url=ad["url"]))

    nav = []
    if start > 0:
        nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è ’Ü’°’≠’∏÷Ä’§", callback_data=f"ads:page:{page-1}"))
    if end < total:
        nav.append(types.InlineKeyboardButton("‘±’µ’™’¥’∏÷Ñ ‚û°Ô∏è", callback_data=f"ads:page:{page+1}"))
    if nav:
        kb.row(*nav)

    kb.add(types.InlineKeyboardButton("‚ûï ‘¥’°’º’∂’°’¨ ’£’∏’æ’°’¶’§’°’ø’∏÷Ç", callback_data="ads:new"))
    kb.add(types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="ads:home"))
    return text, kb


@bot.callback_query_handler(func=lambda c: c.data.startswith("ads:"))
def on_ads_nav(c: types.CallbackQuery):
    try:
        parts = c.data.split(":")
        action = parts[1]

        if action == "page" and len(parts) == 3:
            page = max(1, int(parts[2]))
            text, kb = render_ads_list(page=page)
            bot.edit_message_text(
                chat_id=c.message.chat.id,
                message_id=c.message.message_id,
                text=text,
                reply_markup=kb,
                parse_mode="HTML"
            )
        elif action == "new":
            user_id = c.from_user.id
            if rate_limited(user_id, "ad_submit", RL_AD_SUBMIT_SEC):
                bot.answer_callback_query(c.id, "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ÷É’∏÷Ä’±’•’¨ ’°’æ’•’¨’´ ’∏÷Ç’∑÷â")
                return
            USER_STATE[user_id] = STATE_AD_BNAME
            USER_FORM[user_id] = {}
            bot.answer_callback_query(c.id)
            bot.send_message(c.message.chat.id, "üè™ ‘≥÷Ä’•÷Ñ ’±’•÷Ä ’≠’°’∂’∏÷Ç’©’´/’Æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ ’°’∂’∏÷Ç’∂’® (÷Ö÷Ä‚Ä§ ¬´Starlegen Store¬ª):")
        elif action == "home":
            bot.edit_message_text(
                chat_id=c.message.chat.id,
                message_id=c.message.message_id,
                text="’é’•÷Ä’°’§’°÷Ä’± ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç üëá",
                parse_mode="HTML"
            )
            bot.send_message(c.message.chat.id, "‘∏’∂’ø÷Ä’•÷Ñ ’¢’°’™’´’∂ üëá", reply_markup=build_main_menu())
    except Exception as e:
        print("ADS NAV ERROR:", e)
        bot.answer_callback_query(c.id, "’ç’≠’°’¨ ’ø’•’≤’´ ’∏÷Ç’∂’•÷Å’°’æ")

# ---- Ads form steps ----
def _ad_next(user_id, next_state, chat_id, prompt):
    USER_STATE[user_id] = next_state
    bot.send_message(chat_id, prompt)

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_AD_BNAME)
def ad_bname(m: types.Message):
    nm = (m.text or "").strip()
    if not nm:
        bot.send_message(m.chat.id, "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’£÷Ä’•’¨ ’°’∂’æ’°’∂’∏÷Ç’¥’®÷â")
        return
    USER_FORM[m.from_user.id]["business_name"] = nm
    _ad_next(m.from_user.id, STATE_AD_DESC, m.chat.id, "üìù ‘≥÷Ä’•÷Ñ ’¥’°÷Ä’Ø’•’ø’´’∂’£’°’µ’´’∂ ’∂’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® (’Ø’°÷Ä’≥, 1‚Äì3 ’∂’°’≠’°’§’°’Ω’∏÷Ç’©’µ’∏÷Ç’∂):")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_AD_DESC)
def ad_desc(m: types.Message):
    USER_FORM[m.from_user.id]["desc"] = (m.text or "").strip()
    _ad_next(m.from_user.id, STATE_AD_WEBSITE, m.chat.id, "üåê ’é’•’¢’Ω’°’µ’© (’•’©’• ’π’Ø’°’ù ’£÷Ä’•÷Ñ ¬´‚Äî¬ª):")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_AD_WEBSITE)
def ad_website(m: types.Message):
    USER_FORM[m.from_user.id]["website"] = (m.text or "").strip()
    _ad_next(m.from_user.id, STATE_AD_TG, m.chat.id, "üì≤ Telegram ’∞’≤’∏÷Ç’¥/username (’•’©’• ’π’Ø’°’ù ¬´‚Äî¬ª):")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_AD_TG)
def ad_tg(m: types.Message):
    USER_FORM[m.from_user.id]["telegram"] = (m.text or "").strip()
    _ad_next(m.from_user.id, STATE_AD_VIBER, m.chat.id, "üìû Viber ’∞’°’¥’°÷Ä/’∞’≤’∏÷Ç’¥ (’•’©’• ’π’Ø’°’ù ¬´‚Äî¬ª):")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_AD_VIBER)
def ad_viber(m: types.Message):
    USER_FORM[m.from_user.id]["viber"] = (m.text or "").strip()
    _ad_next(m.from_user.id, STATE_AD_WHATSAPP, m.chat.id, "üìû WhatsApp ’∞’°’¥’°÷Ä/’∞’≤’∏÷Ç’¥ (’•’©’• ’π’Ø’°’ù ¬´‚Äî¬ª):")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_AD_WHATSAPP)
def ad_wa(m: types.Message):
    USER_FORM[m.from_user.id]["whatsapp"] = (m.text or "").strip()
    _ad_next(m.from_user.id, STATE_AD_PHONE, m.chat.id, "‚òéÔ∏è ’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä (’•’©’• ’π’Ø’°’ù ¬´‚Äî¬ª):")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_AD_PHONE)
def ad_phone(m: types.Message):
    USER_FORM[m.from_user.id]["phone"] = (m.text or "").strip()
    _ad_next(m.from_user.id, STATE_AD_ADDRESS, m.chat.id, "üìç ’Ä’°’Ω÷Å’• (’•’©’• ’π’Ø’°’ù ¬´‚Äî¬ª):")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_AD_ADDRESS)
def ad_addr(m: types.Message):
    USER_FORM[m.from_user.id]["address"] = (m.text or "").strip()
    _ad_next(m.from_user.id, STATE_AD_HOURS, m.chat.id, "üïí ‘±’∑’≠. ’™’°’¥’•÷Ä (÷Ö÷Ä‚Ä§ ¬´‘µ÷Ä’Ø‚Äì‘ø’´÷Ä 10:00‚Äì20:00¬ª ’Ø’°’¥ ¬´‚Äî¬ª):")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_AD_HOURS)
def ad_hours(m: types.Message):
    USER_FORM[m.from_user.id]["hours"] = (m.text or "").strip()
    _ad_next(m.from_user.id, STATE_AD_CTA_TEXT, m.chat.id, "üîò CTA ’Ø’∏’≥’°’Ø’´ ’ø’•÷Ñ’Ω’ø (÷Ö÷Ä. ¬´’ä’°’ø’æ’´÷Ä’•’¨¬ª, ¬´‘ø’°’∫’æ’•’¨¬ª):")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_AD_CTA_TEXT)
def ad_cta_text(m: types.Message):
    USER_FORM[m.from_user.id]["cta_text"] = (m.text or "‘¥’´’ø’•’¨").strip() or "‘¥’´’ø’•’¨"
    _ad_next(m.from_user.id, STATE_AD_CTA_URL, m.chat.id, "üîó CTA ’∞’≤’∏÷Ç’¥ (URL) (’•’©’• ’π’Ø’°’ù ¬´‚Äî¬ª):")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == STATE_AD_CTA_URL)
def ad_cta_url(m: types.Message):
    USER_FORM[m.from_user.id]["cta_url"] = (m.text or "").strip()
    USER_STATE[m.from_user.id] = STATE_AD_CONFIRM
    d = USER_FORM[m.from_user.id].copy()
    preview = (
        f"üì£ <b>‘≥’∏’æ’°’¶’§’´ ’∞’°’µ’ø ‚Äî ’∂’°’≠’°’§’´’ø’∏÷Ç’¥</b>\n\n"
        f"üè™ ‘±’∂’∏÷Ç’∂’ù {d.get('business_name')}\n"
        f"üìù ’Ü’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’ù {d.get('desc')}\n"
        f"üåê ’é’•’¢’Ω’°’µ’©’ù {d.get('website')}\n"
        f"Telegram’ù {d.get('telegram')}\n"
        f"Viber’ù {d.get('viber')} | WhatsApp’ù {d.get('whatsapp')}\n"
        f"‚òéÔ∏è ’Ä’•’º.’ù {d.get('phone')}\n"
        f"üìç ’Ä’°’Ω÷Å’•’ù {d.get('address')}\n"
        f"üïí ‘∫’°’¥’•÷Ä’ù {d.get('hours')}\n"
        f"üîò CTA’ù {d.get('cta_text')} ‚Üí {d.get('cta_url')}\n\n"
        f"‚úÖ ’Ä’°’Ω’ø’°’ø’•’û’¨ ’∏÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥’® ’°’§’¥’´’∂’´’∂÷â"
    )
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚úÖ ’à÷Ç’≤’°÷Ä’Ø’•’¨ ’°’§’¥’´’∂’´’∂", callback_data="adsub:send"),
        types.InlineKeyboardButton("‚ùå ’â’•’≤’°÷Ä’Ø’•’¨", callback_data="adsub:cancel")
    )
    bot.send_message(m.chat.id, preview, parse_mode="HTML", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("adsub:"))
def on_ad_submit(c: types.CallbackQuery):
    user_id = c.from_user.id
    action = c.data.split(":")[1]

    if USER_STATE.get(user_id) != STATE_AD_CONFIRM:
        bot.answer_callback_query(c.id, "‘∫’°’¥’Ø’•’ø’∂ ’°’∂÷Å’•’¨ ’ß ’Ø’°’¥ ’±÷á’°’©’∏÷Ç’≤’©’® ÷É’°’Ø’æ’•÷Å÷â")
        return

    if action == "cancel":
        USER_STATE[user_id] = STATE_NONE
        USER_FORM.pop(user_id, None)
        bot.answer_callback_query(c.id, "’â’•’≤’°÷Ä’Ø’æ’•÷Å÷â")
        bot.edit_message_text("’â’•’≤’°÷Ä’Ø’æ’•÷Å÷â", c.message.chat.id, c.message.message_id)
        return

    if action == "send":
        data = USER_FORM.get(user_id, {}).copy()
        if not data:
            bot.answer_callback_query(c.id, "’è’æ’µ’°’¨’∂’•÷Ä’® ’π’•’∂ ’£’ø’∂’æ’•’¨÷â")
            return

        global NEXT_AD_ID
        ad_id = NEXT_AD_ID
        NEXT_AD_ID += 1

        submitter = c.from_user.username or f"id{user_id}"
        PENDING_ADS[str(ad_id)] = {
            "id": ad_id,
            "submitter_id": user_id,
            "submitter_name": submitter,
            **data,
            "created_at": datetime.utcnow().isoformat()
        }
        save_json(PENDING_ADS_FILE, PENDING_ADS)

        USER_STATE[user_id] = STATE_NONE
        USER_FORM.pop(user_id, None)

        bot.answer_callback_query(c.id, "’à÷Ç’≤’°÷Ä’Ø’æ’•÷Å ’°’§’¥’´’∂’´’∂÷â")
        bot.edit_message_text("‚úÖ ’Ä’°’µ’ø’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å ’°’§’¥’´’∂’´’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂ ’∞’°’¥’°÷Ä÷â", c.message.chat.id, c.message.message_id)

        # to admin
        d = PENDING_ADS[str(ad_id)]
        admin_text = (
            f"üì£ <b>’Ü’∏÷Ä ’£’∏’æ’°’¶’§’´ ’∞’°’µ’ø</b>\n"
            f"ID: {ad_id}\n’à÷Ç’≤’°÷Ä’Ø’∏’≤’ù @{submitter}\n\n"
            f"üè™ {d.get('business_name')}\n"
            f"üìù {d.get('desc')}\n"
            f"üåê {d.get('website')}\n"
            f"Telegram: {d.get('telegram')}\n"
            f"Viber: {d.get('viber')} | WhatsApp: {d.get('whatsapp')}\n"
            f"‚òéÔ∏è {d.get('phone')}\n"
            f"üìç {d.get('address')}\n"
            f"üïí {d.get('hours')}\n"
            f"üîò {d.get('cta_text')} ‚Üí {d.get('cta_url')}"
        )
        kb = types.InlineKeyboardMarkup()
        kb.add(
            types.InlineKeyboardButton("‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨", callback_data=f"adadm:approve:{ad_id}"),
            types.InlineKeyboardButton("‚ùå ’Ñ’•÷Ä’™’•’¨", callback_data=f"adadm:reject:{ad_id}")
        )
        bot.send_message(ADMIN_ID, admin_text, parse_mode="HTML", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("adadm:"))
def on_ad_admin(c: types.CallbackQuery):
    parts = c.data.split(":")
    if len(parts) != 3:
        return
    action, ad_id_str = parts[1], parts[2]

    if c.from_user.id != ADMIN_ID:
        bot.answer_callback_query(c.id, "’Ñ’´’°’µ’∂ ’°’§’¥’´’∂’® ’Ø’°÷Ä’∏’≤ ’ß ’∞’°’Ω’ø’°’ø’•’¨÷â")
        return

    item = PENDING_ADS.get(ad_id_str)
    if not item:
        bot.answer_callback_query(c.id, "‘±÷Ä’§’•’∂ ’¥’∑’°’Ø’æ’°’Æ ’ß ’Ø’°’¥ ’π’Ø’°÷â")
        return

    if action == "approve":
        ADS_STORE.append({
            "id": item["id"],
            "title": item["business_name"],
            "desc": item["desc"],
            "website": item["website"],
            "telegram": item["telegram"],
            "viber": item["viber"],
            "whatsapp": item["whatsapp"],
            "phone": item["phone"],
            "address": item["address"],
            "hours": item["hours"],
            "cta": item["cta_text"] or "‘¥’´’ø’•’¨",
            "url": item["cta_url"] or "",
            "posted_by": f"@{item['submitter_name']}",
            "active": True,
        })
        save_json(ADS_FILE, ADS_STORE)
        PENDING_ADS.pop(ad_id_str, None)
        save_json(PENDING_ADS_FILE, PENDING_ADS)

        bot.edit_message_text("‚úÖ ’Ä’°’Ω’ø’°’ø’æ’•÷Å ÷á ’°’æ’•’¨’°÷Å’°’æ ¬´‘≥’∏’æ’°’¶’§’∂’•÷Ä¬ª-’∏÷Ç’¥÷â",
                              c.message.chat.id, c.message.message_id)
        bot.answer_callback_query(c.id, "’Ä’°’Ω’ø’°’ø’æ’•÷Å")
        try:
            bot.send_message(item["submitter_id"], "‚úÖ ’Å’•÷Ä ’£’∏’æ’°’¶’§’® ’∞’°’Ω’ø’°’ø’æ’•÷Å ÷á ’∞÷Ä’°’∫’°÷Ä’°’Ø’æ’•÷Å÷â ’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂!")
        except:
            pass

    elif action == "reject":
        PENDING_ADS.pop(ad_id_str, None)
        save_json(PENDING_ADS_FILE, PENDING_ADS)
        bot.edit_message_text("‚ùå ’Ñ’•÷Ä’™’æ’•÷Å÷â", c.message.chat.id, c.message.message_id)
        bot.answer_callback_query(c.id, "’Ñ’•÷Ä’™’æ’•÷Å")
        try:
            bot.send_message(item["submitter_id"], "‚ùå ’Å’•÷Ä ’£’∏’æ’°’¶’§’® ’¥’•÷Ä’™’æ’•÷Å (’Ø’°÷Ä’∏’≤ ’•÷Ñ ’≠’¥’¢’°’£÷Ä’•’¨ ÷á ’Ø÷Ä’Ø’´’∂ ’∏÷Ç’≤’°÷Ä’Ø’•’¨):")
        except:
            pass

# ---- Share buttons for Ads (send share text) ----
def ad_share_text(ad: dict, ref_user_id: int) -> str:
    link = bot_link_with_ref(ref_user_id)
    body = (
        f"üè™ {ad.get('title')}\n"
        f"üìù {ad.get('desc','')}\n"
        f"üåê {ad.get('website','‚Äî')}\n"
        f"Telegram: {ad.get('telegram','‚Äî')}\n"
        f"Viber: {ad.get('viber','‚Äî')} | WhatsApp: {ad.get('whatsapp','‚Äî')}\n"
        f"‚òéÔ∏è {ad.get('phone','‚Äî')} | üìç {ad.get('address','‚Äî')}\n\n"
        f"’ì’∏÷Ä’±’´÷Ä Starlegen ’¢’∏’ø’® üëâ {link}"
    )
    return body

# We inject share buttons per-card by reusing render, so share is provided as separate callback
@bot.callback_query_handler(func=lambda c: c.data.startswith("adsShare:"))
def on_ad_share_cb(c: types.CallbackQuery):
    # not used in current list rendering‚Äîleft for extension if per-card messages are used
    pass

# =========================
# Admin commands
# =========================
@bot.message_handler(commands=['pending'])
def cmd_pending(m: types.Message):
    if m.from_user.id != ADMIN_ID:
        return
    th = len(PENDING_THOUGHTS)
    ad = len(PENDING_ADS)
    bot.send_message(m.chat.id, f"üß† ’ç’∫’°’Ω’∏’≤ ’¥’ø÷Ñ’•÷Ä’ù {th}\nüì£ ’ç’∫’°’Ω’∏’≤ ’£’∏’æ’°’¶’§’∂’•÷Ä’ù {ad}")

@bot.message_handler(commands=['reload'])
def cmd_reload(m: types.Message):
    if m.from_user.id != ADMIN_ID:
        return
    reload_all()
    bot.send_message(m.chat.id, "‚ôªÔ∏è Settings/Data reloaded.")

# üõç ‘Ω’°’∂’∏÷Ç’© ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç
@bot.message_handler(func=lambda m: m.text == "üõç ‘Ω’°’∂’∏÷Ç’©")
def shop_menu(m: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚åö ’ç’¥’°÷Ä’© ’™’°’¥’°÷Å’∏÷Ç’µ÷Å’∂’•÷Ä", "üíª ’Ä’°’¥’°’Ø’°÷Ä’£’π’°’µ’´’∂ ’°÷Ñ’Ω’•’Ω’∏÷Ç’°÷Ä’∂’•÷Ä")
    markup.add("üöó ‘±’æ’ø’∏’¥’•÷Ñ’•’∂’°’µ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä", "üè† ‘ø’•’∂÷Å’°’≤’°’µ’´’∂ ’∫’°÷Ä’°’£’°’∂’•÷Ä")
    markup.add("üç≥ ‘Ω’∏’∞’°’∂’∏÷Å’°’µ’´’∂ ’ø’•’≠’∂’´’Ø’°", "üíÖ ‘Ω’∂’°’¥÷Ñ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä")
    markup.add("üö¨ ‘∑’¨’•’Ø’ø÷Ä’∏’∂’°’µ’´’∂ ’Æ’≠’°’≠’∏’ø", "üë© ‘ø’°’∂’°÷Å’´ (’∑’∏÷Ç’ø’∏’æ)")
    markup.add("üë® ’è’≤’°’¥’°÷Ä’§’∏÷Ç (’∑’∏÷Ç’ø’∏’æ)", "üßí ’Ñ’°’∂’Ø’°’Ø’°’∂ (’∑’∏÷Ç’ø’∏’æ)")
    markup.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç")
    bot.send_message(m.chat.id, "üõç ‘Ω’°’∂’∏÷Ç’© ‚Äî ’®’∂’ø÷Ä’•÷Ñ ’Ø’°’ø’•’£’∏÷Ä’´’° üëá", reply_markup=markup)

# üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç (’¥’´’°’µ’∂ ’Ñ‘µ‘ø ’∞’°’ø ’©’∏’≤)
# üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç (’¢’∏’¨’∏÷Ä 13 ’Ø’∏’≥’°’Ø’∂’•÷Ä’∏’æ)
# üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç (/menu ’∞÷Ä’°’¥’°’∂’∏’æ)
@bot.message_handler(commands=['menu'])
def menu_cmd(m: types.Message):
    bot.send_message(m.chat.id, "‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®", reply_markup=build_main_menu())

    main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    main.add(BTN_SHOP, BTN_CART)
    main.add(BTN_ORDERS, BTN_SEARCH)
    main.add(BTN_PROFILE, BTN_EXCHANGE)
    main.add(BTN_FEEDBACK, BTN_THOUGHTS)
    main.add(BTN_PARTNERS)
    main.add(BTN_RATES)
    main.add(BTN_INVITE)
    bot.send_message(m.chat.id, "‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®", reply_markup=main)
# ========== DAILY RATES (auto-refresh) ==========

DATA_DIR = "admin_data"
os.makedirs(DATA_DIR, exist_ok=True)
RATES_FILE = os.path.join(DATA_DIR, "rates.json")

RATES_CACHE = {"rates": {}, "updated_at": None, "error": None}

def _rates_save():
    try:
        with open(RATES_FILE, "w", encoding="utf-8") as f:
            json.dump(RATES_CACHE, f, ensure_ascii=False, indent=2)
    except:
        pass

def _rates_load():
    global RATES_CACHE
    try:
        with open(RATES_FILE, "r", encoding="utf-8") as f:
            RATES_CACHE = json.load(f)
    except:
        pass

def fetch_rates():
    try:
        url = "https://api.exchangerate.host/latest"
        symbols = ["USD", "EUR", "RUB", "GBP", "CNY"]
        r = requests.get(url, params={"base": "AMD", "symbols": ",".join(symbols)}, timeout=10)
        data = r.json()
        raw = data.get("rates", {}) if data else {}
        converted = {}
        for k, v in raw.items():
            if v:
                converted[k] = round(1.0 / v, 4)  # 1 <FX> = ? AMD
        RATES_CACHE["rates"] = converted
        RATES_CACHE["updated_at"] = datetime.datetime.utcnow().isoformat() + "Z"
        RATES_CACHE["error"] = None
        _rates_save()
    except Exception as e:
        RATES_CACHE["error"] = str(e)

def _rates_loop():
    while True:
        fetch_rates()
        time.sleep(600)  # 10 ÷Ä’∏’∫’•

threading.Thread(target=_rates_loop, daemon=True).start()
fetch_rates()

@bot.message_handler(func=lambda m: m.text == BTN_RATES)
def on_rates(m: types.Message):
    _rates_load()
    err = RATES_CACHE.get("error")
    rates = RATES_CACHE.get("rates", {})
    if err or not rates:
        bot.send_message(m.chat.id, "‚ùóÔ∏è’î’°’∑’∏÷Ç’¥’® ’±’°’≠’∏’≤’æ’•÷Å, ÷É’∏÷Ä’±’´÷Ä ÷Ñ’´’π ’∞’•’ø’∏÷â")
        return
    flags = {"USD":"üá∫üá∏","EUR":"üá™üá∫","RUB":"üá∑üá∫","GBP":"üá¨üáß","CNY":"üá®üá≥"}
    order = ["USD","EUR","RUB","GBP","CNY"]
    lines = ["üìà **’ï÷Ä’æ’° ’Ø’∏÷Ç÷Ä’Ω’•÷Ä** (AMD)", ""]
    for c in order:
        if c in rates:
            lines.append(f"{flags.get(c,'')} 1 {c} = **{rates[c]} AMD**")
    lines.append("")
    lines.append(f"üïí ‘π’°÷Ä’¥’°÷Å’æ’•’¨ ’ß (UTC): {RATES_CACHE.get('updated_at','-')}")
    bot.send_message(m.chat.id, "\n".join(lines), parse_mode="Markdown")
# ===============================================
THOUGHTS_FILE = os.path.join(DATA_DIR, "thoughts.json")

def _read_json(path, default=None):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return default

def _write_json(path, data):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except:
        pass

@bot.message_handler(func=lambda m: m.text == BTN_THOUGHTS)
def show_good_thoughts(m: types.Message):
    text, kb = render_good_thoughts(page=1)
    bot.send_message(m.chat.id, text, reply_markup=kb, parse_mode="HTML")

def on_thoughts_menu(m: types.Message):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¥’´’ø÷Ñ", callback_data="t_add"))
    kb.add(types.InlineKeyboardButton("üìö ‘¥’´’ø’•’¨ ’æ’•÷Ä’ª’´’∂’∂’•÷Ä’®", callback_data="t_list"))
    bot.send_message(m.chat.id, "¬´‘Ω’∏’∞’∏÷Ç’∂ ’¥’ø÷Ñ’•÷Ä¬ª ’¢’°’™’´’∂ ‚ú®", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data == "t_list")
def t_list(c):
    arr = _read_json(THOUGHTS_FILE, []) or []
    if not arr:
        bot.answer_callback_query(c.id, "‘¥’•’º ’π’Ø’°", show_alert=True)
        return
    text = "üí° ’é’•÷Ä’ª’´’∂ ’¥’ø÷Ñ’•÷Ä\n\n" + "\n\n".join(arr[-5:])
    bot.send_message(c.message.chat.id, text)

PENDING_THOUGHT = {}

@bot.callback_query_handler(func=lambda c: c.data == "t_add")
def t_add(c):
    PENDING_THOUGHT[c.from_user.id] = True
    bot.send_message(c.message.chat.id, "’à÷Ç’≤’°÷Ä’Ø’´÷Ä ÷Ñ’∏ ’¥’´’ø÷Ñ’® (’ø’•÷Ñ’Ω’ø’∏’æ)÷â ‘±’§’¥’´’∂’® ’∫’•’ø÷Ñ ’ß ’∞’°’Ω’ø’°’ø’´÷â")

@bot.message_handler(func=lambda m: PENDING_THOUGHT.get(m.from_user.id, False))
def t_collect(m: types.Message):
    PENDING_THOUGHT[m.from_user.id] = False
    txt = (m.text or "").strip()
    if not txt:
        return bot.reply_to(m, "‘¥’°’ø’°÷Ä’Ø ’ß ü§î")
    # ’∏÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’°’§’¥’´’∂’´’∂ approve-’´ ’∞’°’¥’°÷Ä
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨", callback_data=f"t_ok::{m.chat.id}"),
        types.InlineKeyboardButton("‚ùå ’Ñ’•÷Ä’™’•’¨", callback_data=f"t_no::{m.chat.id}")
    )
    bot.send_message(ADMIN_ID, f"’Ü’∏÷Ä ’¥’´’ø÷Ñ’ù\n\n{txt}", reply_markup=kb)
    bot.reply_to(m, "‚úÖ ’à÷Ç’≤’°÷Ä’Ø’æ’•÷Å ’°’§’¥’´’∂’´’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂÷â")

THOUGHTS_FILE = os.path.join(DATA_DIR, "thoughts.json")

def _read_json(path, default=None):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return default

def _write_json(path, data):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except:
        pass


# üí¨ ‘ø’°’∫ ’¥’•’¶ ’∞’•’ø
@bot.message_handler(func=lambda m: m.text == BTN_FEEDBACK)
def contact_us(m: types.Message):
    bot.send_message(
        m.chat.id,
        "üìû ‘ø’°’∫ ’¥’•’¶ ’∞’•’ø\n"
        "Telegram support: @StarLegenSupport\n"
        "‚òéÔ∏è +374 XX XX XX\n"
        "‚úâÔ∏è Email: support@example.com"
    )

# üí± ’ì’∏’≠’°÷Ä’Ø’∏÷Ç’¥’∂’•÷Ä (stub ’¥’•’©’∏’§’∂’•÷Ä’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂)
@bot.message_handler(func=lambda m: m.text == BTN_EXCHANGE)
def exchange_menu(m: types.Message):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("PI ‚ûú USDT", callback_data="ex:pi"))
    kb.add(types.InlineKeyboardButton("FTN ‚ûú AMD", callback_data="ex:ftn"))
    kb.add(types.InlineKeyboardButton("Alipay ’¨’´÷Å÷Ñ’°’æ’∏÷Ä’∏÷Ç’¥", callback_data="ex:ali"))
    bot.send_message(m.chat.id, "üí± ‘∏’∂’ø÷Ä’•÷Ñ ÷É’∏’≠’°÷Ä’Ø’∏÷Ç’¥’® üëá", reply_markup=kb)

# üîç ‘±’∫÷Ä’°’∂÷Ñ’´ ’∏÷Ä’∏’∂’∏÷Ç’¥ (’∫’°÷Ä’¶ ’∏÷Ä’∏’∂’∏÷Ç’¥ ’æ’•÷Ä’∂’°’£÷Ä’∏’æ/’Ø’∏’§’∏’æ)
SEARCH_STATE_K = "SEARCH_PRODUCTS"

@bot.message_handler(func=lambda m: m.text == BTN_SEARCH)
def search_prompt(m: types.Message):
    USER_STATE[m.from_user.id] = SEARCH_STATE_K
    bot.send_message(m.chat.id, "‘≥÷Ä’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’´ ’Ø’∏’§’® ’Ø’°’¥ ’°’∂’æ’°’∂ ’¥’°’Ω’® (÷Ö÷Ä. BA1008 ’Ø’°’¥ ¬´’£’∏÷Ä’£¬ª):")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id) == SEARCH_STATE_K)
def do_search(m: types.Message):
    q = (m.text or "").strip().lower()
    USER_STATE.pop(m.from_user.id, None)
    if not q:
        return bot.reply_to(m, "‘¥’°’ø’°÷Ä’Ø ’∞’°÷Ä÷Å’∏÷Ç’¥ ü§î")

    found = []
    for code, p in PRODUCTS.items():
        title = p.get("title","").lower()
        if q in code.lower() or q in title:
            found.append((code, p["title"], p["price"]))

    if not found:
        return bot.send_message(m.chat.id, "’â’£’ø’°’∂÷Ñ ’∂’¥’°’∂ ’°’∫÷Ä’°’∂÷Ñ üôÅ")

    # ÷Å’∏÷Ç’µ÷Å ’•’∂÷Ñ ’ø’°’¨’´’Ω ’°’º’°’ª’´’∂ 8-’®
    for code, title, price in found[:8]:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("üëÄ ‘¥’´’ø’•’¨", callback_data=f"p:{code}"))
        bot.send_message(m.chat.id, f"‚Ä¢ {title} ‚Äî {price}÷è (’Ø’∏’§’ù {code})", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == BTN_PARTNERS)
def on_partners(m: types.Message):
    arr = _read_json(PARTNERS_FILE, [])
    if not arr:
        bot.send_message(m.chat.id, "‘±’µ’Ω ’∫’°’∞’´’∂ ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä’´ ’∞’°’µ’ø’°÷Ä’°÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä ’π’Ø’°’∂÷â")
        return
    text = "üì¢ ‘≤’´’¶’∂’•’Ω ’£’∏÷Ä’Æ’®’∂’Ø’•÷Ä’∂’•÷Ä\n\n" + "\n\n".join(arr[-5:])
    bot.send_message(m.chat.id, text)


# ‚åö ’ç’¥’°÷Ä’© ’™’°’¥’°÷Å’∏÷Ç’µ÷Å’∂’•÷Ä
@bot.message_handler(func=lambda m: m.text == "‚åö ’ç’¥’°÷Ä’© ’™’°’¥’°÷Å’∏÷Ç’µ÷Å’∂’•÷Ä")
def smart_watches(m: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©")
    bot.send_message(m.chat.id, "‚åö ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ’ç’¥’°÷Ä’© ’™’°’¥’°÷Å’∏÷Ç’µ÷Å’∂’•÷Ä’´ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’®÷â", reply_markup=markup)


# üíª ’Ä’°’¥’°’Ø’°÷Ä’£’π’°’µ’´’∂ ’°÷Ñ’Ω’•’Ω’∏÷Ç’°÷Ä’∂’•÷Ä
@bot.message_handler(func=lambda m: m.text == "üíª ’Ä’°’¥’°’Ø’°÷Ä’£’π’°’µ’´’∂ ’°÷Ñ’Ω’•’Ω’∏÷Ç’°÷Ä’∂’•÷Ä")
def pc_accessories(m: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©")
    bot.send_message(m.chat.id, "üíª ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ’Ä’°’¥’°’Ø’°÷Ä’£’π’°’µ’´’∂ ’°÷Ñ’Ω’•’Ω’∏÷Ç’°÷Ä’∂’•÷Ä’´ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’®÷â", reply_markup=markup)


# üöó ‘±’æ’ø’∏’¥’•÷Ñ’•’∂’°’µ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä
@bot.message_handler(func=lambda m: m.text == "üöó ‘±’æ’ø’∏’¥’•÷Ñ’•’∂’°’µ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä")
def car_accessories(m: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©")
    bot.send_message(m.chat.id, "üöó ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ‘±’æ’ø’∏’¥’•÷Ñ’•’∂’°’µ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä’®÷â", reply_markup=markup)


# üè† ‘ø’•’∂÷Å’°’≤’°’µ’´’∂ ’∫’°÷Ä’°’£’°’∂’•÷Ä
# ---------------------------
# üì¶ ’è’é’Ö‘±‘º’Ü‘µ’ê ‚Äî 11 ’£’∏÷Ä’£ (BA100810‚ÄìBA100820)
# ---------------------------
PRODUCTS = {
    "BA100810": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100810",
        "category": "home",
        "images": [
            "media/products/BA100810.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/absorb.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price": 2560, "price": 1690, "size": "40√ó60 ’Ω’¥",
        "sold": 320, "best": True,
        "bullets": [
            "’â’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ’ù ’°’∂’æ’ø’°’∂’£ ÷Ñ’°’µ’¨÷Ñ ’Ω’°’∞’∏÷Ç’∂ ’¥’°’Ø’•÷Ä’•’Ω’∂’•÷Ä’´ ’æ÷Ä’°",
            "‘π’°’∂’±÷Ä, ÷É’°÷É’∏÷Ç’Ø ’∑’•÷Ä’ø’ù ’∞’°÷Ä’¥’°÷Ä’°’æ’•’ø ÷Ñ’°’µ’¨÷Ñ’´ ’¶’£’°÷Å’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂",
            "’Ä’•’∑’ø ’¥’°÷Ñ÷Ä’æ’∏÷Ç’¥’ù ’±’•’º÷Ñ’∏’æ ’Ø’°’¥ ’¨’æ’°÷Å÷Ñ’´ ’¥’•÷Ñ’•’∂’°’µ’∏÷Ç’¥ ’¥’´’∂’π÷á 30¬∞",
            "‘≥’∏÷Ç’µ’∂’´ ’Ø’°’µ’∏÷Ç’∂’∏÷Ç’©’µ’∏÷Ç’∂’ù ’π’´ ’≠’°’¥÷Ä’∏÷Ç’¥ ÷á ’π’´ ’©’°÷É’æ’∏÷Ç’¥",
        ],
        "long_desc": "‘π’´’©’•’º‚Äì’Æ’°’≤’´’Ø 3D ’§’´’¶’°’µ’∂’® ’ø’∏÷Ç’∂’® ’§’°÷Ä’±’∂’∏÷Ç’¥ ’ß ’°’æ’•’¨’´ ’ª’•÷Ä’¥ ’∏÷Ç ’Ø’∏’Ø’´’Ø÷â ’Ä’°’¥’°’∫’°’ø’°’Ω’≠’°’∂’∏÷Ç’¥ ’ß ’¥’∏÷Ç’ø÷Ñ’´’∂, ’≠’∏’∞’°’∂’∏÷Å’´’∂, ’¨’∏’£’°÷Ä’°’∂’´’∂ ’∏÷Ç ’∂’∏÷Ç’µ’∂’´’Ω’Ø ’∂’∂’ª’°÷Ä’°’∂’´’∂÷â ’Ä’°’Ø’°’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ’® ’∫’°’∞’∏÷Ç’¥ ’ß ’£’∏÷Ä’£’® ’ø’•’≤’∏÷Ç’¥, ’´’Ω’Ø ’≠’´’ø ’æ’•÷Ä’´’∂ ’∑’•÷Ä’ø’® ’°÷Ä’°’£ ’ß ’π’∏÷Ä’°’∂’∏÷Ç’¥ ’∏÷Ç ’π’´ ’∂’•÷Ä’Æ’Æ’∏÷Ç’¥ ’ø’∞’°’≥ ’∞’∏’ø’•÷Ä÷â"
    },
    "BA100811": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100811", "category": "home",
        "images": [
            "media/products/BA100811.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/absorb.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price": 2560, "price": 1690, "size": "40√ó60 ’Ω’¥",
        "sold": 295, "best": True,
        "bullets": [
            "‘Ω’´’ø ’£’∏÷Ä’Æ’æ’°’Æ÷Ñ’ù ’•÷Ä’Ø’°÷Ä ’Æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä",
            "‘±’∂’∞’∏’ø ÷á ’°’∂’æ’ø’°’∂’£ ’∂’µ’∏÷Ç’©’•÷Ä ’∏’≤’ª ’®’∂’ø’°’∂’´÷Ñ’´ ’∞’°’¥’°÷Ä",
            "‘±÷Ä’°’£ ’π’∏÷Ä’°÷Å’∏÷Ç’¥’ù ’≠’∏’∂’°’æ ’ø’°÷Ä’°’Æ÷Ñ’∂’•÷Ä’´’∂ ’∞’°÷Ä’¥’°÷Ä",
        ],
        "long_desc": "’Ñ’´’∂’´’¥’°’¨’´’Ω’ø’°’Ø’°’∂ ’£’∏÷Ç’µ’∂’•÷Ä’ù ’£’•’≤’•÷Å’´’Ø ’∞’°’¥’°’§÷Ä’æ’∏÷Ç’¥ ’•’∂ ÷Å’°’∂’Ø’°÷Å’°’Æ ’´’∂’ø’•÷Ä’´’•÷Ä’´ ’∞’•’ø÷â ‘º’°’æ ’¨’∏÷Ç’Æ’∏÷Ç’¥ ’ß ’¨’∏’£’°÷Ä’°’∂’´/’≠’∏’∞’°’∂’∏÷Å’´ ’∞’°’¥’°÷Ä’ù ’°÷Ä’°’£ ’Ø’¨’°’∂’•’¨’∏’æ ’≠’∏’∂’°’æ’∏÷Ç’©’µ’∏÷Ç’∂’® ÷á ’π’©’∏’≤’∂’•’¨’∏’æ ’∞’•’ø÷Ñ’•÷Ä÷â"
    },
    "BA100812": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100812", "category": "home",
        "images": [
            "media/products/BA100812.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price": 2560, "price": 1690, "size": "40√ó60 ’Ω’¥",
        "sold": 241, "best": False,
        "bullets": [
            "‘ø’∏’Ø’´’Ø ’•’¶÷Ä’•÷Ä’ù ’∫÷Ä’•’¥’´’∏÷Ç’¥ ’ø’•’Ω÷Ñ",
            "’Å÷á’® ’π’´ ÷É’∏’≠’∏÷Ç’¥’ù ’Ø’°’∂’∏’∂’°’æ’∏÷Ä ’¨’æ’°÷Å’∏÷Ç’¥’´÷Å ’∞’•’ø’∏ ’ß’¨",
        ],
        "long_desc": "‘∑’Ω’©’•’ø’´’Ø ’Ø’∏’¥’∫’∏’¶’´÷Å’´’°’ù ’∂’∏÷Ç÷Ä’¢ ’§’•’ø’°’¨’∂’•÷Ä’∏’æ÷â ’Ä’°÷Ä’¥’°÷Ä ’ß ’¥’´’ª’°’∂÷Å÷Ñ’∂’•÷Ä’´, ’¥’∏÷Ç’ø÷Ñ’´ ÷á ÷É’∏÷Ñ÷Ä ’Ω’•’∂’µ’°’Ø’∂’•÷Ä’´ ’∞’°’¥’°÷Ä÷â"
    },
    "BA100813": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100813", "category": "home",
        "images": [
            "media/products/BA100813.jpg",
            "media/products/shared/absorb.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/interior.jpg",
        ],
        "old_price": 2560, "price": 1690, "size": "40√ó60 ’Ω’¥",
        "sold": 198, "best": False,
        "bullets": [
            "’Ä’°÷Ä’¥’°÷Ä ’Æ’°’∂÷Ä’°’¢’•’º’∂’æ’°’Æ ’°’∂÷Å’∏÷Ç’≤’´’∂’•÷Ä’´ ’∞’°’¥’°÷Ä",
            "’â’´ ’Æ’°’¨’æ’∏÷Ç’¥, ’π’´ ’Ω’°’∞’∏÷Ç’¥’ù ’∑’∂’∏÷Ä’∞’´’æ ’∞’´’¥÷Ñ’´ ’Ø’°’º’∏÷Ç÷Å’æ’°’Æ÷Ñ’´",
        ],
        "long_desc": "‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂ ÷á ’§’´’¥’°÷Å’Ø’∏÷Ç’∂ ’ø’°÷Ä’¢’•÷Ä’°’Ø’ù ’°’¥’•’∂÷Ö÷Ä’µ’° ’°’Ø’ø’´’æ ÷Ö’£’ø’°’£’∏÷Ä’Æ’¥’°’∂ ’∞’°’¥’°÷Ä÷â"
    },
    "BA100814": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100814", "category": "home",
        "images": [
            "media/products/BA100814.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price": 2560, "price": 1690, "size": "40√ó60 ’Ω’¥",
        "sold": 175, "best": False,
        "bullets": [
            "’ì’°÷É’∏÷Ç’Ø ’¥’°’Ø’•÷Ä’•’Ω’ù ’∞’°’≥’•’¨’´ ’∞’∫’∏÷Ç’¥",
            "‘≥’∏÷Ç’∂’°’µ’´’∂ ’Ø’°’µ’∏÷Ç’∂’∏÷Ç’©’µ’∏÷Ç’∂’ù ’•÷Ä’Ø’°÷Ä’°’ø÷á ÷Ö’£’ø’°’£’∏÷Ä’Æ’¥’°’∂ ’®’∂’©’°÷Å÷Ñ’∏÷Ç’¥",
        ],
        "long_desc": "‘≤’∂’°’Ø’°’∂ ’•÷Ä’°’∂’£’∂’•÷Ä’ù ’∞’°’∂’£’´’Ω’ø ÷á ’¥’°÷Ñ’∏÷Ç÷Ä ’¥’´’ª’°’æ’°’µ÷Ä’´ ’∞’°’¥’°÷Ä÷â ’Ä’•’∑’ø ’ß ’ø’•’≤’°÷É’∏’≠’•’¨ ’∏÷Ç ’ø’•’≤’°’§÷Ä’•’¨’ù ’°’º’°’∂÷Å ’∞’•’ø÷Ñ’•÷Ä ’©’∏’≤’∂’•’¨’∏÷Ç÷â"
    },
    "BA100815": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100815", "category": "home",
        "images": [
            "media/products/BA100815.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price": 2560, "price": 1690, "size": "40√ó60 ’Ω’¥",
        "sold": 210, "best": False,
        "bullets": [
            "‘Ω’´’ø ’∑’•÷Ä’ø’ù ’¢’°÷Ä’±÷Ä ’§’´’¥’°÷Å’Ø’∏÷Ç’∂’∏÷Ç’©’µ’∏÷Ç’∂",
            "‘µ’¶÷Ä’•÷Ä’® ’π’•’∂ ÷É’∑÷Ä’æ’∏÷Ç’¥",
        ],
        "long_desc": "’Ä’°÷Ä’¥’°÷Ä ’ß ’´’∂’π’∫’•’Ω ’¢’∂’°’Ø’°÷Ä’°’∂’´, ’°’µ’∂’∫’•’Ω ’ß’¨ ÷Ö÷Ü’´’Ω’´ ’∞’°’¥’°÷Ä‚Ä§ ’ø’•’Ω÷Ñ’® ’¥’∂’∏÷Ç’¥ ’ß ’Ø’∏’Ø’´’Ø ’°’∂’£’°’¥ ’∞’°’≥’°’≠’°’Ø’´ ’¨’æ’°÷Å’∏÷Ç’¥’´÷Å ’∞’•’ø’∏÷â"
    },
    "BA100816": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100816", "category": "home",
        "images": [
            "media/products/BA100816.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/absorb.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price": 2560, "price": 1690, "size": "40√ó60 ’Ω’¥",
        "sold": 233, "best": False,
        "bullets": [
            "‘¥’•’Ø’∏÷Ä’°’ø’´’æ ’•’¶÷Ä’°’£’Æ’•÷Ä",
            "’â’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ’ù ’°’º’°’æ’•’¨ ’°’∂’æ’ø’°’∂’£’∏÷Ç’©’µ’∏÷Ç’∂",
        ],
        "long_desc": "‘∑’¨’•’£’°’∂’ø ’∑’•’∑’ø’°’§÷Ä’∏÷Ç’¥ ÷Å’°’∂’Ø’°÷Å’°’Æ ’´’∂’ø’•÷Ä’´’•÷Ä’∏÷Ç’¥÷â ’ä’°’∞’∫’°’∂’∏÷Ç’¥ ’ß ’ø’•’Ω÷Ñ’® ’•÷Ä’Ø’°÷Ä’°’ø÷á ÷Ö’£’ø’°’£’∏÷Ä’Æ’¥’°’∂ ’®’∂’©’°÷Å÷Ñ’∏÷Ç’¥÷â"
    },
    "BA100817": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100817", "category": "home",
        "images": [
            "media/products/BA100817.jpg",
            "media/products/shared/care.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/interior.jpg",
        ],
        "old_price": 2560, "price": 1690, "size": "40√ó60 ’Ω’¥",
        "sold": 221, "best": False,
        "bullets": [
            "‘ª’§’•’°’¨ ’ß ’≠’∏’∞’°’∂’∏÷Å’´ ÷á ’¥’∏÷Ç’ø÷Ñ’´ ’∞’°’¥’°÷Ä",
            "‘±÷Ä’°’£ ’π’∏÷Ä’°÷Å’∏÷Ç’¥’ù ’°’º’°’∂÷Å ’∞’•’ø÷Ñ’•÷Ä’´",
        ],
        "long_desc": "‘≥’∏÷Ä’Æ’∂’°’Ø’°’∂ ’¨’∏÷Ç’Æ’∏÷Ç’¥’ù ’£’•’≤’•÷Å’´’Ø ’§’•’ø’°’¨’∂’•÷Ä’∏’æ, ’∏÷Ä’® ’∫’°’∞’∫’°’∂’∏÷Ç’¥ ’ß ’¥’°÷Ñ÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’∏÷Ç ’∞’´’£’´’•’∂’°’∂÷â"
    },
    "BA100818": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100818", "category": "home",
        "images": [
            "media/products/BA100818.jpg",
            "media/products/shared/layers.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price": 2560, "price": 1690, "size": "40√ó60 ’Ω’¥",
        "sold": 187, "best": False,
        "bullets": [
            "‘ø’∏’¥’∫’°’Ø’ø ’π’°÷É’ù ’∞’•’∑’ø ’ø’•’≤’°’§÷Ä’∏÷Ç’¥",
            "‘π’•’©÷á ÷Ñ’°’∑’ù ’∞’°÷Ä’¥’°÷Ä ’ø’•’≤’°÷É’∏’≠’•’¨",
        ],
        "long_desc": "‘ø’∏’Ø’´’Ø ’ø’°÷Ä’¢’•÷Ä’°’Ø ÷É’∏÷Ñ÷Ä ’ø’°÷Ä’°’Æ÷Ñ’∂’•÷Ä’´ ’∞’°’¥’°÷Ä’ù ’∫’°’∞’•’¨’∏’æ ’∞’°÷Ä’¥’°÷Ä’°’æ’•’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’∏÷Ç ’£’•’≤’•÷Å’Ø’∏÷Ç’©’µ’∏÷Ç’∂’®÷â"
    },
    "BA100819": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100819", "category": "home",
        "images": [
            "media/products/BA100819.jpg",
            "media/products/shared/absorb.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price": 2560, "price": 1690, "size": "40√ó60 ’Ω’¥",
        "sold": 205, "best": False,
        "bullets": [
            "‘ø’∏’Ø’´’Ø ’ø’•’Ω÷Ñ’ù ’¥’°÷Ñ’∏÷Ç÷Ä ’•’¶÷Ä’•÷Ä’∏’æ",
            "’Ä’°’Ø’°’Ω’°’∞’∏’≤ ’∞’´’¥÷Ñ’ù ’Ø’°’µ’∏÷Ç’∂ ’§’´÷Ä÷Ñ",
        ],
        "long_desc": "‘≥’•’≤’•÷Å’´’Ø ’¨’∏÷Ç’Æ’∏÷Ç’¥ ’¥’´’ª’°’∂÷Å÷Ñ’´ ÷á ’¨’∏’£’°÷Ä’°’∂’´ ’∞’°’¥’°÷Ä‚Ä§ ’°÷Ä’°’£ ’ß ’Ø’¨’°’∂’∏÷Ç’¥ ’≠’∏’∂’°’æ’∏÷Ç’©’µ’∏÷Ç’∂’® ÷á ’π’´ ’©’∏’≤’∂’∏÷Ç’¥ ’¨’°÷Ñ’°’∂’•÷Ä÷â"
    },
    "BA100820": {
        "title": "‘≥’∏÷Ä’£ ‚Äì BA100820", "category": "home",
        "images": [
            "media/products/BA100820.jpg",
            "media/products/shared/universal.jpg",
            "media/products/shared/interior.jpg",
            "media/products/shared/advantages.jpg",
        ],
        "old_price": 2560, "price": 1690, "size": "40√ó60 ’Ω’¥",
        "sold": 199, "best": False,
        "bullets": [
            "‘∑’Ω’©’•’ø’´’Ø ’Ø’∏’¥’∫’∏’¶’´÷Å’´’°’ù ’¢’∂’°’Ø’°’∂ ’•÷Ä’°’∂’£’∂’•÷Ä",
            "‘¥’´’¥’°÷Å’Ø’∏÷Ç’∂ ’∞’´’¥÷Ñ’ù ’•÷Ä’Ø’°÷Ä ’Ω’∫’°’Ω’°÷Ä’Ø’∏÷Ç’¥",
        ],
        "long_desc": "‘π’°÷Ä’¥ ’§’´’¶’°’µ’∂, ’∏÷Ä’® ’∞’•’∑’ø ’ß ’∞’°’¥’°’§÷Ä’•’¨ ÷Å’°’∂’Ø’°÷Å’°’Æ ’´’∂’ø’•÷Ä’´’•÷Ä’´ ’∞’•’ø÷â ’ä’°’∞’∫’°’∂’∏÷Ç’¥ ’ß ’±÷á’® ÷á ’∞’•’∑’ø’∏÷Ç’©’µ’°’¥’¢ ’¥’°÷Ñ÷Ä’æ’∏÷Ç’¥ ’ß÷â"
    },
}

# ’ï’£’ø’°’Ø’°÷Ä’ù ’®’Ω’ø ’Ø’°’ø’•’£’∏÷Ä’´’°’µ’´ ’æ’•÷Ä÷Å’∂’•’¨ ’Ø’∏’§’•÷Ä’®
def product_codes_by_category(cat_key):
    return [code for code, p in PRODUCTS.items() if p["category"] == cat_key]

# ‚îÄ‚îÄ‚îÄ üè† ‘ø’•’∂÷Å’°’≤’°’µ’´’∂ ’∫’°÷Ä’°’£’°’∂’•÷Ä ‚Äî ÷Ñ’°÷Ä’ø’´’Ø’∂’•÷Ä ’∂’Ø’°÷Ä’´’õ’∂’∏’æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.message_handler(func=lambda m: m.text == "üè† ‘ø’•’∂÷Å’°’≤’°’µ’´’∂ ’∫’°÷Ä’°’£’°’∂’•÷Ä")
def home_accessories(m: types.Message):
    codes = product_codes_by_category("home")
    for code in codes:
        p = PRODUCTS[code]
        main_img = (p.get("images") or [p.get("img")])[0]
        discount = int(round(100 - (p["price"] * 100 / p["old_price"])))
        best = "üî• ‘º’°’æ’°’£’∏÷Ç’µ’∂ ’æ’°’≥’°’º’æ’∏’≤\n" if p.get("best") else ""
        caption = (
            f"{best}**{p['title']}**\n"
            f"’â’°÷É’Ω’ù {p['size']}\n"
            f"’Ä’´’∂ ’£’´’∂ ‚Äî {p['old_price']}÷è (‚àí{discount}%)\n"
            f"’Ü’∏÷Ä ’£’´’∂ ‚Äî **{p['price']}÷è**\n"
            f"‘ø’∏’§’ù `{code}`"
        )
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("üëÄ ‘¥’´’ø’•’¨ ’°’¥’¢’∏’≤’ª’∏÷Ç’©’µ’°’¥’¢", callback_data=f"p:{code}"))
        try:
            with open(main_img, "rb") as ph:
                bot.send_photo(m.chat.id, ph, caption=caption, reply_markup=kb, parse_mode="Markdown")
        except Exception:
            bot.send_message(m.chat.id, caption, reply_markup=kb, parse_mode="Markdown")
        time.sleep(0.2)

    back = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", "‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç")
    bot.send_message(m.chat.id, "üìé ’é’•÷Ä÷á’∏÷Ç’¥ ’ø’•’Ω’•÷Ñ ’¢’∏’¨’∏÷Ä ÷Ñ’°÷Ä’ø’´’Ø’∂’•÷Ä’®÷â", reply_markup=back)

# ‚îÄ‚îÄ‚îÄ üñº ‘±’∫÷Ä’°’∂÷Ñ’´ ’ß’ª ‚Äî media group + ’•÷Ä’Ø’°÷Ä copy ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("p:"))
def show_product(c: types.CallbackQuery):
    code = c.data.split(":", 1)[1]
    p = PRODUCTS.get(code)
    if not p:
        bot.answer_callback_query(c.id, "‘±’∫÷Ä’°’∂÷Ñ’® ’π’´ ’£’ø’∂’æ’•’¨")
        return

    # Caption
    discount = int(round(100 - (p["price"] * 100 / p["old_price"])))
    bullets = "\n".join([f"‚úÖ {b}" for b in (p.get("bullets") or [])])
    caption = (
        f"üå∏ **{p['title']}**\n"
        f"‚úîÔ∏è ’â’°÷É’Ω’ù {p['size']}\n"
        f"{bullets}\n\n"
        f"{p.get('long_desc','')}\n\n"
        f"’Ä’´’∂ ’£’´’∂ ‚Äî {p['old_price']}÷è (‚àí{discount}%)\n"
        f"’Ü’∏÷Ä ’£’´’∂ ‚Äî **{p['price']}÷è**\n"
        f"’é’°’≥’°’º’æ’°’Æ ‚Äî {p['sold']} ’∞’°’ø\n"
        f"‘ø’∏’§’ù `{code}`"
    )

    imgs = _product_images(code)
    if not imgs:
        bot.send_message(c.message.chat.id, caption, parse_mode="Markdown")
        kb = _slider_kb(code, 0, 1)
        bot.send_message(c.message.chat.id, "‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂ üëá", reply_markup=kb)
        bot.answer_callback_query(c.id)
        return

    # ’ç’Ø’Ω’∏÷Ç’¥ ’•’∂÷Ñ 0-÷Ä’§ ’∂’Ø’°÷Ä’´÷Å
    with open(imgs[0], "rb") as ph:
        bot.send_photo(
            c.message.chat.id, ph, caption=caption,
            parse_mode="Markdown", reply_markup=_slider_kb(code, 0, len(imgs))
        )
    bot.answer_callback_query(c.id)


# ---------------- SLIDER + BACK BUTTONS (robust) ----------------

def _product_images(code):
    p = PRODUCTS.get(code, {})
    raw = p.get("images") or [p.get("img")]
    return [x for x in raw if x and os.path.exists(x)]

def _slider_kb(code: str, idx: int, total: int):
    # arrows
    left  = types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"slider:{code}:{(idx-1)%total}")
    right = types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"slider:{code}:{(idx+1)%total}")
    # cart actions
    row_cart = [
        types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data=f"cart:add:{code}"),
        types.InlineKeyboardButton("üß∫ ‘¥’´’ø’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data="cart:show"),
    ]
    # back/home
    row_back = [
        types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ÷Å’∏÷Ç÷Å’°’Ø", callback_data="back:home_list"),
        types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="go_home"),
    ]
    kb = types.InlineKeyboardMarkup()
    kb.row(left, right)
    kb.row(*row_cart)
    kb.row(*row_back)
    return kb

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("slider:"))
def product_slider(c: types.CallbackQuery):
    try:
        _, code, idx_str = c.data.split(":")
        idx = int(idx_str)
    except Exception:
        return bot.answer_callback_query(c.id, "’ç’≠’°’¨ ’Ω’¨’°’µ’§")

    p = PRODUCTS.get(code, {})
    imgs = _product_images(code)
    total = len(imgs)
    if total == 0:
        return bot.answer_callback_query(c.id, "’Ü’Ø’°÷Ä ’π’Ø’°")

    idx = idx % total

    discount = int(round(100 - (p["price"] * 100 / p["old_price"])))
    bullets = "\n".join([f"‚úÖ {b}" for b in (p.get("bullets") or [])])
    caption = (
        f"üå∏ **{p.get('title','')}**\n"
        f"‚úîÔ∏è ’â’°÷É’Ω’ù {p.get('size','')}\n"
        f"{bullets}\n\n"
        f"{p.get('long_desc','')}\n\n"
        f"’Ä’´’∂ ’£’´’∂ ‚Äî {p.get('old_price',0)}÷è (‚àí{discount}%)\n"
        f"’Ü’∏÷Ä ’£’´’∂ ‚Äî **{p.get('price',0)}÷è**\n"
        f"’é’°’≥’°’º’æ’°’Æ ‚Äî {p.get('sold',0)} ’∞’°’ø\n"
        f"‘ø’∏’§’ù `{code}`"
    )

    # ’ì’∏÷Ä’±’∏÷Ç’¥ ’•’∂÷Ñ edit_message_media, ’•’©’• ’π’Ω’ø’°÷Å’æ’´’ù ’∏÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä
    try:
        with open(imgs[idx], "rb") as ph:
            media = InputMediaPhoto(ph, caption=caption, parse_mode="Markdown")
            bot.edit_message_media(
                media=media,
                chat_id=c.message.chat.id,
                message_id=c.message.message_id,
                reply_markup=_slider_kb(code, idx, total)
            )
    except Exception:
        try:
            with open(imgs[idx], "rb") as ph:
                bot.send_photo(
                    c.message.chat.id, ph, caption=caption, parse_mode="Markdown",
                    reply_markup=_slider_kb(code, idx, total)
                )
        except Exception:
            pass

    bot.answer_callback_query(c.id)

# ’é’•÷Ä’°’§’°÷Ä’±’∂’•÷Ä’®’ù ’°’º’°’∂’±’´’∂ ’∞’•’∂’§’¨’•÷Ä’∂’•÷Ä’∏’æ (’°’æ’•’¨’´ ’Ø’°’µ’∏÷Ç’∂)
@bot.callback_query_handler(func=lambda c: c.data == "go_home")
def cb_go_home(c: types.CallbackQuery):
    bot.answer_callback_query(c.id)
    bot.send_message(c.message.chat.id, "‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç ‚ú®", reply_markup=build_main_menu())

@bot.callback_query_handler(func=lambda c: c.data == "back:home_list")
def cb_home_list(c: types.CallbackQuery):
    bot.answer_callback_query(c.id)
    home_accessories(c.message)

# ‚îÄ‚îÄ‚îÄ üç≥ ‘Ω’∏’∞’°’∂’∏÷Å’°’µ’´’∂ ’ø’•’≠’∂’´’Ø’° (skeleton’ù ’©’∏’≤ ’°’µ’Ω’∫’•’Ω) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.message_handler(func=lambda m: m.text == "üç≥ ‘Ω’∏’∞’°’∂’∏÷Å’°’µ’´’∂ ’ø’•’≠’∂’´’Ø’°")
def kitchen_tools(m: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©", "‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç")
    bot.send_message(m.chat.id, "üç≥ ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ‘Ω’∏’∞’°’∂’∏÷Å’°’µ’´’∂ ’ø’•’≠’∂’´’Ø’°’µ’´ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’®÷â", reply_markup=markup)


# üíÖ ‘Ω’∂’°’¥÷Ñ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä
@bot.message_handler(func=lambda m: m.text == "üíÖ ‘Ω’∂’°’¥÷Ñ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä")
def care_products(m: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©")
    bot.send_message(m.chat.id, "üíÖ ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ‘Ω’∂’°’¥÷Ñ’´ ’∫’°÷Ä’°’£’°’∂’•÷Ä’®÷â", reply_markup=markup)


# üö¨ ‘∑’¨’•’Ø’ø÷Ä’∏’∂’°’µ’´’∂ ’Æ’≠’°’≠’∏’ø
@bot.message_handler(func=lambda m: m.text == "üö¨ ‘∑’¨’•’Ø’ø÷Ä’∏’∂’°’µ’´’∂ ’Æ’≠’°’≠’∏’ø")
def e_cigs(m: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©")
    bot.send_message(m.chat.id, "üö¨ ‘±’µ’Ω’ø’•’≤ ’Ø’¨’´’∂’•’∂ ‘∑’¨’•’Ø’ø÷Ä’∏’∂’°’µ’´’∂ ’Æ’≠’°’≠’∏’ø’´ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’®÷â", reply_markup=markup)


# üë© ‘ø’°’∂’°÷Å’´ (’∑’∏÷Ç’ø’∏’æ)
@bot.message_handler(func=lambda m: m.text == "üë© ‘ø’°’∂’°÷Å’´ (’∑’∏÷Ç’ø’∏’æ)")
def women_soon(m: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©")
    bot.send_message(m.chat.id, "üë© ‘ø’°’∂’°÷Å’´ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’® ’∞’°’Ω’°’∂’•’¨’´ ’Ø’¨’´’∂’•’∂ ’∑’∏÷Ç’ø’∏’æ÷â", reply_markup=markup)


# üë® ’è’≤’°’¥’°÷Ä’§’∏÷Ç (’∑’∏÷Ç’ø’∏’æ)
@bot.message_handler(func=lambda m: m.text == "üë® ’è’≤’°’¥’°÷Ä’§’∏÷Ç (’∑’∏÷Ç’ø’∏’æ)")
def men_soon(m: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©")
    bot.send_message(m.chat.id, "üë® ’è’≤’°’¥’°÷Ä’§’∏÷Ç ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’® ’∞’°’Ω’°’∂’•’¨’´ ’Ø’¨’´’∂’•’∂ ’∑’∏÷Ç’ø’∏’æ÷â", reply_markup=markup)


# üßí ’Ñ’°’∂’Ø’°’Ø’°’∂ (’∑’∏÷Ç’ø’∏’æ)
@bot.message_handler(func=lambda m: m.text == "üßí ’Ñ’°’∂’Ø’°’Ø’°’∂ (’∑’∏÷Ç’ø’∏’æ)")
def kids_soon(m: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©")
    bot.send_message(m.chat.id, "üßí ’Ñ’°’∂’Ø’°’Ø’°’∂ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’® ’∞’°’Ω’°’∂’•’¨’´ ’Ø’¨’´’∂’•’∂ ’∑’∏÷Ç’ø’∏’æ÷â", reply_markup=markup)


# üîô ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©
@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ’≠’°’∂’∏÷Ç’©")
def back_to_shop(m: types.Message):
    shop_menu(m)  # ’Ø’°’∂’π’∏÷Ç’¥ ’•’∂÷Ñ ’æ’•÷Ä÷á’´ ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂
# ========== SALES (CART + CHECKOUT + ADMIN APPROVE + WALLET) ==========

# ’∫’°’∞’•’Ω’ø’ù ’¶’°’¥’¢’µ’∏÷Ç’≤/’æ’°’¨’¨’•’ø/’ª’°’∂÷Ñ
CART = defaultdict(dict)      # user_id -> {code: qty}
WALLET = defaultdict(int)     # user_id -> approved overpay balance (÷è)
PENDING_PAY = {}              # pay_id -> {user_id, order_id, method, amount, proof_msg_id, overpay}
PENDING_ORDERS = {}           # order_id -> order dict
CHECKOUT_STATE = {}           # user_id -> {"step": "...", "order": {...}}
ORDERS_JSON = os.path.join(DATA_DIR, "orders.json")

def _save_order(order):
    data = []
    if os.path.exists(ORDERS_JSON):
        try:
            data = json.load(open(ORDERS_JSON, "r", encoding="utf-8"))
        except Exception:
            data = []
    data.append(order)
    with open(ORDERS_JSON, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def _order_id():
    return "ORD-" + datetime.utcnow().strftime("%Y%m%d-%H%M%S")

def _cart_total(uid: int) -> int:
    return sum(int(PRODUCTS[c]["price"]) * q for c, q in CART[uid].items())

def _cart_text(uid: int) -> str:
    if not CART[uid]:
        return "üß∫ ‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß"
    total = 0
    lines = []
    for code, qty in CART[uid].items():
        p = PRODUCTS[code]
        sub = int(p["price"]) * qty
        total += sub
        lines.append(f"‚Ä¢ {p['title']} √ó {qty} ‚Äî {sub}÷è")
    lines.append(f"\n‘∏’∂’§’°’¥’•’∂’®’ù **{total}÷è**")
    return "\n".join(lines)

def _check_stock(uid: int):
    for code, qty in CART[uid].items():
        st = PRODUCTS[code].get("stock")
        if isinstance(st, int) and qty > st:
            return False, code, st
    return True, None, None

def _apply_stock(order):
    # ’∞’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∫’°’∞’•’Ω’ø’´÷Å ’∞’°’Ω’ø’°’ø’¥’°’∂ ’∫’°’∞’´’∂
    for it in order.get("items", []):
        code, qty = it["code"], it["qty"]
        if code in PRODUCTS and "stock" in PRODUCTS[code]:
            PRODUCTS[code]["stock"] = max(0, PRODUCTS[code]["stock"] - qty)
        if code in PRODUCTS and "sold" in PRODUCTS[code]:
            PRODUCTS[code]["sold"] = PRODUCTS[code]["sold"] + qty
def _slider_kb(code: str, idx: int, total: int):
    left  = types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"slider:{code}:{(idx-1)%total}")
    right = types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"slider:{code}:{(idx+1)%total}")
    row1 = [left, right]

    # üß∫ ‘±’æ’•’¨’°÷Å÷Ä’•’∂÷Ñ ’¶’°’¥’¢’µ’∏÷Ç’≤’´ ’Ø’∏’≥’°’Ø’∂’•÷Ä’®
    row_cart = [
        types.InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data=f"cart:add:{code}"),
        types.InlineKeyboardButton("üß∫ ‘¥’´’ø’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤", callback_data="cart:show"),
    ]

    row2 = [
        types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ÷Å’∏÷Ç÷Å’°’Ø", callback_data="back:home_list"),
        types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="go_home"),
    ]
    kb = types.InlineKeyboardMarkup()
    kb.row(*row1)
    kb.row(*row_cart)   # ‚Üê ‘±’Ö’ç ’è’à’Ç‘∏ ’Ü’à’ê’Ü ‘∑
    kb.row(*row2)
    return kb
@bot.message_handler(func=lambda m: m.text == "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤")
def open_cart_from_menu(m: types.Message):
    uid = m.from_user.id
    kb = types.InlineKeyboardMarkup()

    # ÷Å’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¥’´’∂’π÷á 6 ’°’∫÷Ä’°’∂÷Ñ’ù ÷Ñ’°’∂’°’Ø/’Ø’°’º’°’æ’°÷Ä’¥’°’∂ ’Ø’∏’≥’°’Ø’∂’•÷Ä’∏’æ
    for code, qty in list(CART[uid].items())[:6]:
        title = PRODUCTS[code]["title"]
        kb.row(types.InlineKeyboardButton(f"üõí {title} ({qty})", callback_data="noop"))
        kb.row(
            types.InlineKeyboardButton("‚ûñ", callback_data=f"cart:dec:{code}"),
            types.InlineKeyboardButton("‚ûï", callback_data=f"cart:inc:{code}"),
            types.InlineKeyboardButton("üóë", callback_data=f"cart:rm:{code}"),
        )

    kb.row(
        types.InlineKeyboardButton("‚ùå ’Ñ’°÷Ñ÷Ä’•’¨", callback_data="cart:clear"),
        types.InlineKeyboardButton("‚úÖ ’ä’°’ø’æ’´÷Ä’•’¨", callback_data="checkout:start"),
    )
    kb.row(
        types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ÷Å’∏÷Ç÷Å’°’Ø", callback_data="back:home_list"),
        types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="go_home"),
    )
    bot.send_message(m.chat.id, _cart_text(uid), reply_markup=kb, parse_mode="Markdown")


# ===== CART & CHECKOUT (FULL) =====
from collections import defaultdict
from datetime import datetime
import random

# ‘≥’¨’∏’¢’°’¨ ’∫’°’∞’∏÷Å’∂’•÷Ä
CART = defaultdict(dict)           # {uid: {code: qty}}
CHECKOUT_STATE = {}                # {uid: {...}}
ORDERS = []                        # ÷Ö’∫÷Å’´’°’∂’°’¨’ù ’∫’°’∞’•’∂÷Ñ ’Ø’°’¶’¥’æ’°’Æ ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’®
_order_seq = 10000                 # ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’´ ’°’≥’∏’≤ ’∞’°’¥’°÷Ä’®

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ’ï‘≥’Ü‘±‘ø‘±’Ü ’ñ’à’í’Ü‘ø’ë‘ª‘±’Ü‘µ’ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _order_id() -> str:
    """’ä’°÷Ä’¶ ’°’≥’∏’≤ order_id"""
    global _order_seq
    _order_seq += 1
    return f"BA-{_order_seq}"

def _cart_total(uid: int) -> int:
    """’Ä’°’∑’æ’∏÷Ç’¥ ’ß ’¶’°’¥’¢’µ’∏÷Ç’≤’´ ’®’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’´’∂’®"""
    total = 0
    for code, qty in CART[uid].items():
        p = PRODUCTS.get(code) or {}
        price = int(p.get("price", 0))
        total += price * qty
    return total

def _cart_text(uid: int) -> str:
    """‘∂’°’¥’¢’µ’∏÷Ç’≤’´ ’ø’•÷Ñ’Ω’ø’® Markdown-’∏’æ"""
    if not CART[uid]:
        return "üõí **‘∂’°’¥’¢’µ’∏÷Ç’≤’® ’§’°’ø’°÷Ä’Ø ’ß÷â**"

    lines = ["**’Å’•÷Ä ’¶’°’¥’¢’µ’∏÷Ç’≤’®**:\n"]
    for code, qty in CART[uid].items():
        p = PRODUCTS.get(code) or {}
        title = p.get("title", code)
        price = int(p.get("price", 0))
        lines.append(f"‚Ä¢ {title} ‚Äî {code} √ó {qty} ‚Äî {price*qty}÷è")
    lines.append(f"\n**‘∏’∂’§’°’¥’•’∂’®**’ù { _cart_total(uid) }÷è")
    return "\n".join(lines)

def _check_stock(uid: int):
    """
    ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’ß ’∫’°’∞’•’Ω’ø’®’ù ’•’©’• PRODUCTS[code]['stock'] ’Ø’° ÷á’Ω÷â
    ’é’•÷Ä’°’§’°÷Ä’±’∂’∏÷Ç’¥ ’ß (ok, bad_code, available_qty)
    """
    for code, qty in CART[uid].items():
        st = PRODUCTS.get(code, {}).get("stock")
        if isinstance(st, int) and qty > st:
            return False, code, st
    return True, None, None

def _cart_keyboard(uid: int) -> types.InlineKeyboardMarkup:
    """‘ø’°’º’∏÷Ç÷Å’∏÷Ç’¥ ’ß ’¶’°’¥’¢’µ’∏÷Ç’≤’´ ’´’∂’¨’°’µ’∂ ’Ø’°’º’°’æ’°÷Ä’¥’°’∂ ’Ω’ø’•’≤’∂’°’∑’°÷Ä’®"""
    kb = types.InlineKeyboardMarkup()
    # ’¥’´’∂’π÷á 6 ’ø’∏’≤’ù ’µ’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’°’∫÷Ä’°’∂÷Ñ’´ ’∞’°’¥’°÷Ä inc/dec/rm
    for code, qty in list(CART[uid].items())[:6]:
        title = PRODUCTS.get(code, {}).get("title", code)
        kb.row(types.InlineKeyboardButton(f"üõí {title} ({qty})", callback_data="noop"))
        kb.row(
            types.InlineKeyboardButton("‚ûñ", callback_data=f"cart:dec:{code}"),
            types.InlineKeyboardButton("‚ûï", callback_data=f"cart:inc:{code}"),
            types.InlineKeyboardButton("üóë", callback_data=f"cart:rm:{code}"),
        )
    # ’®’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä
    kb.row(
        types.InlineKeyboardButton("‚ùå ’Ñ’°÷Ñ÷Ä’•’¨", callback_data="cart:clear"),
        types.InlineKeyboardButton("‚úÖ ’ä’°’ø’æ’´÷Ä’•’¨", callback_data="checkout:start"),
    )
    return kb

def _product_exists(code: str) -> bool:
    return code in PRODUCTS

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CART ’Ä‘µ’Ü‘¥‘º‘µ’ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("cart:"))
def cart_callbacks(c: types.CallbackQuery):
    uid = c.from_user.id
    parts = c.data.split(":")
    action = parts[1]
    code = parts[2] if len(parts) > 2 else None

    if action == "add" and code:
        st = PRODUCTS[code].get("stock")
        new_q = CART[uid].get(code, 0) + 1
        if isinstance(st, int) and new_q > st:
            bot.answer_callback_query(c.id, "’ä’°’∞’•’Ω’ø’∏÷Ç’¥ ’¢’°’æ’°÷Ä’°÷Ä ÷Ñ’°’∂’°’Ø ’π’Ø’°")
            return
        CART[uid][code] = new_q
        bot.answer_callback_query(c.id, "‘±’æ’•’¨’°÷Å’æ’•÷Å ’¶’°’¥’¢’µ’∏÷Ç’≤’∏÷Ç’¥ ‚úÖ")

    elif action == "inc" and code:
        st = PRODUCTS[code].get("stock")
        new_q = CART[uid].get(code, 0) + 1
        if isinstance(st, int) and new_q > st:
            bot.answer_callback_query(c.id, "’é’•÷Ä’ª’°’Ω’°’∞’¥’°’∂’®’ù ’®’Ω’ø ’∫’°’∞’•’Ω’ø’´")
            return
        CART[uid][code] = new_q

    elif action == "dec" and code:
        q = CART[uid].get(code, 0)
        if q <= 1:
            CART[uid].pop(code, None)
        else:
            CART[uid][code] = q - 1

    elif action == "rm" and code:
        CART[uid].pop(code, None)

    elif action == "clear":
        CART[uid].clear()

    # show cart (’°’µ’Ω’ø’•’≤ ’•’∂÷Ñ ’∂’°÷á "cart:show"-’® ’¥’∑’°’Ø’∏÷Ç’¥)
    if action in ("show", "add", "inc", "dec", "rm", "clear"):
        kb = types.InlineKeyboardMarkup()
        for code, qty in list(CART[uid].items())[:6]:
            title = PRODUCTS[code]["title"]
            kb.row(types.InlineKeyboardButton(f"üõí {title} ({qty})", callback_data="noop"))
            kb.row(
                types.InlineKeyboardButton("‚ûñ", callback_data=f"cart:dec:{code}"),
                types.InlineKeyboardButton("‚ûï", callback_data=f"cart:inc:{code}"),
                types.InlineKeyboardButton("üóë", callback_data=f"cart:rm:{code}"),
            )
        kb.row(
            types.InlineKeyboardButton("‚ùå ’Ñ’°÷Ñ÷Ä’•’¨", callback_data="cart:clear"),
            types.InlineKeyboardButton("‚úÖ ’ä’°’ø’æ’´÷Ä’•’¨", callback_data="checkout:start"),
        )
        kb.row(
            types.InlineKeyboardButton("‚¨ÖÔ∏è ’é’•÷Ä’°’§’°’º’∂’°’¨ ÷Å’∏÷Ç÷Å’°’Ø", callback_data="back:home_list"),
            types.InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç", callback_data="go_home"),
        )
        bot.send_message(c.message.chat.id, _cart_text(uid), reply_markup=kb, parse_mode="Markdown")
        bot.answer_callback_query(c.id)
    else:
        bot.answer_callback_query(c.id)


# ¬´üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤¬ª ’∞’´’¥’∂’°’Ø’°’∂ ’¥’•’∂’µ’∏÷Ç’´ ’Ø’∏’≥’°’Ø
@bot.message_handler(func=lambda m: (m.text or "").strip() == "üõí ‘∂’°’¥’¢’µ’∏÷Ç’≤")
def show_cart_cmd(m: types.Message):
    uid = m.from_user.id
    _ = CART[uid]  # ’°’∫’°’∞’∏’æ’•’∂÷Ñ, ’∏÷Ä ’Ø’°
    bot.send_message(m.chat.id, _cart_text(uid), reply_markup=_cart_keyboard(uid), parse_mode="Markdown")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CHECKOUT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.message_handler(func=lambda m: m.from_user.id in CHECKOUT_STATE)
def checkout_flow(m: types.Message):
    uid = m.from_user.id
    st = CHECKOUT_STATE.get(uid)
    if not st: 
        return
    step = st["step"]
    order = st["order"]

    # ‘±’∂’∏÷Ç’∂ ‘±’¶’£’°’∂’∏÷Ç’∂
    if step == "name":
        order["fullname"] = (m.text or "").strip()
        st["step"] = "phone"
        bot.send_message(m.chat.id, "üìû ‘≥÷Ä’•÷Ñ ’±’•÷Ä **’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®**:")
        return

    # ’Ä’•’º’°’≠’∏’Ω
    if step == "phone":
        order["phone"] = (m.text or "").strip()
        st["step"] = "country"
        # ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’•÷Ä’Ø÷Ä’´÷Å
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for c in COUNTRIES:
            kb.add(c)
        bot.send_message(m.chat.id, "üåç ‘∏’∂’ø÷Ä’•÷Ñ **’•÷Ä’Ø’´÷Ä’®**:", reply_markup=kb)
        return

    # ‘µ÷Ä’Ø’´÷Ä
    if step == "country":
        order["country"] = (m.text or "").strip()
        st["step"] = "city"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for x in CITIES:
            kb.add(x)
        bot.send_message(m.chat.id, "üèô ‘∏’∂’ø÷Ä’•÷Ñ **÷Ñ’°’≤’°÷Ñ’®**:", reply_markup=kb)
        return

    # ’î’°’≤’°÷Ñ
    if step == "city":
        order["city"] = (m.text or "").strip()
        st["step"] = "address"
        bot.send_message(m.chat.id, "üè° ‘≥÷Ä’•÷Ñ ’±’•÷Ä **’∞’°’Ω÷Å’•’∂**:")
        return

    # ’Ä’°’Ω÷Å’•
    if step == "address":
        order["address"] = (m.text or "").strip()
        st["step"] = "comment"
        bot.send_message(m.chat.id, "‚úçÔ∏è ‘µ’©’• ’∏÷Ç’∂’•÷Ñ ’¥’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂/÷Å’∏÷Ç÷Å’∏÷Ç’¥’ù ’£÷Ä’•÷Ñ, ’Ø’°’¥ ’£÷Ä’•÷Ñ ¬´‚Äî¬ª")
        return

    # ’Ñ’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂
    if step == "comment":
        cm = (m.text or "").strip()
        if cm == "‚Äî":
            cm = ""
        order["comment"] = cm

        # ’é’•÷Ä’ª’∂’°’Ø’°’∂ ’°’¥÷Ä’°’∫’∂’§’∏÷Ç’¥
        amount = order["total"]
        text = [
            f"‚úÖ **’ä’°’ø’æ’•÷Ä’´ ’°’¥÷É’∏÷É’∏÷Ç’¥** ‚Äî {order['order_id']}",
            f"üë§ {order['fullname']} | üìû {order['phone']}",
            f"üìç {order['country']}, {order['city']}, {order['address']}",
            f"üß∫ ‘±’∫÷Ä’°’∂÷Ñ’∂’•÷Ä:"
        ]
        for it in order["items"]:
            p = PRODUCTS.get(it["code"], {})
            title = p.get("title", it["code"])
            price = int(p.get("price", 0))
            text.append(f"‚Ä¢ {title} ‚Äî {it['code']} √ó {it['qty']} ‚Äî {price*it['qty']}÷è")
        text.append(f"\n**‘∏’∂’§’°’¥’•’∂’®**’ù {amount}÷è")
        if order["comment"]:
            text.append(f"üí¨ ’Ñ’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’ù {order['comment']}")
        # ’ç’•’≤’¥’•’¨’∏÷Ç ’Ω’ø’•’≤’∂’ù ’°’¥÷Ä’°’£÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨ ’∫’°’ø’æ’•÷Ä’®", callback_data=f"order:confirm:{order['order_id']}"))
        kb.add(types.InlineKeyboardButton("‚ùå ’â’•’≤’°÷Ä’Ø’•’¨", callback_data=f"order:cancel:{order['order_id']}"))

        bot.send_message(m.chat.id, "\n".join(text), parse_mode="Markdown", reply_markup=kb)
        st["step"] = "done"
        return

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("order:"))
def order_finalize(c: types.CallbackQuery):
    uid = c.from_user.id
    st = CHECKOUT_STATE.get(uid)
    if not st:
        bot.answer_callback_query(c.id, "’ä’°’ø’æ’•÷Ä’´ ’®’∂’©’°÷Å÷Ñ’® ’æ’•÷Ä’ª’°÷Å’°’Æ ’ß")
        return

    parts = c.data.split(":")
    action = parts[1]
    oid = parts[2] if len(parts) > 2 else ""

    if action == "confirm":
        # ’∫’°’∞’∫’°’∂’•’∂÷Ñ ’∫’°’ø’æ’•÷Ä’®
        st["order"]["status"] = "Pending"
        ORDERS.append(st["order"])
        # ’¥’°÷Ñ÷Ä’•’¨ ’¶’°’¥’¢’µ’∏÷Ç’≤
        CART[uid].clear()
        bot.edit_message_text("‚úÖ ’ä’°’ø’æ’•÷Ä’® ’£÷Ä’°’∂÷Å’æ’•÷Å÷â ’Ñ’•÷Ä ÷Ö’∫’•÷Ä’°’ø’∏÷Ä’® ’∑’∏÷Ç’ø’∏’æ ’Ø’°’∫ ’Ø’∞’°’Ω’ø’°’ø’´÷â",
                              chat_id=c.message.chat.id, message_id=c.message.message_id)
        bot.answer_callback_query(c.id, "’ä’°’ø’æ’•÷Ä’® ’∞’°’Ω’ø’°’ø’æ’°’Æ ’ß")
        CHECKOUT_STATE.pop(uid, None)
    elif action == "cancel":
        bot.edit_message_text("‚ùå ’ä’°’ø’æ’•÷Ä’® ’π’•’≤’°÷Ä’Ø’æ’°’Æ ’ß÷â",
                              chat_id=c.message.chat.id, message_id=c.message.message_id)
        bot.answer_callback_query(c.id, "’â’•’≤’°÷Ä’Ø’æ’•÷Å")
        CHECKOUT_STATE.pop(uid, None)
    else:
        bot.answer_callback_query(c.id)
# ===== END CART & CHECKOUT =====


@bot.message_handler(func=lambda m: CHECKOUT_STATE.get(m.from_user.id, {}).get("step") == "name")
def chk_name(m: types.Message):
    s = CHECKOUT_STATE[m.from_user.id]
    s["order"]["fullname"] = m.text.strip()
    s["step"] = "phone"
    bot.send_message(m.chat.id, "üìû ‘≥÷Ä’•÷Ñ ’±’•÷Ä **’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®** (’©’æ’•÷Ä’∏’æ):")

@bot.message_handler(func=lambda m: CHECKOUT_STATE.get(m.from_user.id, {}).get("step") == "phone")
def chk_phone(m: types.Message):
    t = "".join(ch for ch in m.text if ch.isdigit())
    if len(t) < 8:
        bot.send_message(m.chat.id, "‚ùó ‘π’æ’•÷Ä’´ ÷Ñ’°’∂’°’Ø’® ÷Ñ’´’π ’ß, ÷É’∏÷Ä’±’•÷Ñ ’Ø÷Ä’Ø’´’∂:")
        return
    s = CHECKOUT_STATE[m.from_user.id]
    s["order"]["phone"] = t
    s["step"] = "country"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for c in COUNTRIES: kb.add(c)
    bot.send_message(m.chat.id, "üåç ‘∏’∂’ø÷Ä’•÷Ñ **’•÷Ä’Ø’´÷Ä**:", reply_markup=kb)

@bot.message_handler(func=lambda m: CHECKOUT_STATE.get(m.from_user.id, {}).get("step") == "country")
def chk_country(m: types.Message):
    s = CHECKOUT_STATE[m.from_user.id]
    s["order"]["country"] = m.text.strip()
    s["step"] = "city"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for c in CITIES: kb.add(c)
    bot.send_message(m.chat.id, "üèô ‘∏’∂’ø÷Ä’•÷Ñ **÷Ñ’°’≤’°÷Ñ**:", reply_markup=kb)

@bot.message_handler(func=lambda m: CHECKOUT_STATE.get(m.from_user.id, {}).get("step") == "city")
def chk_city(m: types.Message):
    s = CHECKOUT_STATE[m.from_user.id]
    s["order"]["city"] = m.text.strip()
    s["step"] = "address"
    bot.send_message(m.chat.id, "üì¶ ‘≥÷Ä’•÷Ñ **’∞’°’Ω÷Å’•/’¥’°’Ω’∂’°’≥’µ’∏÷Ç’≤’®**:")

@bot.message_handler(func=lambda m: CHECKOUT_STATE.get(m.from_user.id, {}).get("step") == "address")
def chk_address(m: types.Message):
    s = CHECKOUT_STATE[m.from_user.id]
    s["order"]["address"] = m.text.strip()
    s["step"] = "comment"
    bot.send_message(m.chat.id, "‚úçÔ∏è ’Ñ’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ (’®’Ω’ø ÷Å’°’∂’Ø’∏÷Ç’©’µ’°’∂)’ù ’£÷Ä’•÷Ñ ’Ø’°’¥ ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ ¬´‚Äî¬ª÷â")

@bot.message_handler(func=lambda m: CHECKOUT_STATE.get(m.from_user.id, {}).get("step") == "comment")
def chk_comment(m: types.Message):
    s = CHECKOUT_STATE[m.from_user.id]
    s["order"]["comment"] = (m.text.strip() if m.text.strip() != "‚Äî" else "")
    s["step"] = "paymethod"
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‘ª’¥ ÷Ñ’°÷Ä’ø’®", callback_data="paym:CARD"),
        types.InlineKeyboardButton("TelCell", callback_data="paym:TELCELL"),
    )
    kb.add(
        types.InlineKeyboardButton("Idram", callback_data="paym:IDRAM"),
        types.InlineKeyboardButton("Fastshift", callback_data="paym:FASTSHIFT"),
    )
    bot.send_message(m.chat.id, "üí≥ ‘∏’∂’ø÷Ä’•÷Ñ **’æ’≥’°÷Ä’¥’°’∂ ’•’≤’°’∂’°’Ø’®**:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("paym:"))
def choose_paymethod(c: types.CallbackQuery):
    method = c.data.split(":")[1]
    uid = c.from_user.id
    s = CHECKOUT_STATE.get(uid)
    if not s:
        bot.answer_callback_query(c.id, "‘∫’°’¥’Ø’•’ø’® ’°’∂÷Å’•’¨ ’ß, ’Ω’Ø’Ω’•÷Ñ ’∂’∏÷Ä’´÷Å")
        return

    s["order"]["payment"]["method"] = method
    s["step"] = "payamount"

    # ’ä’ê’à’é‘±’Ö‘¥‘µ’ê’Ü‘µ’ê‘ª ’Ñ‘±’Ü’ê‘±’Ñ‘±’ç’Ü‘µ’ê‘∏ ‚Äî ’ì’à‘Ω‘ª’ê ’î’à ’å‘µ’î’é‘ª‘∂‘ª’è’Ü‘µ’ê’à’é
    details = {
        "CARD":      "üí≥ ’î’°÷Ä’ø’ù 5355 **** **** 1234\n’ç’ø’°÷Å’∏’≤’ù Your Name",
        "TELCELL":   "üèß TelCell’ù Account: 123456",
        "IDRAM":     "üì± Idram ID: 123456789",
        "FASTSHIFT": "üí† Fastshift Wallet: fast_shift_acc",
    }.get(method, "’Ñ’°’∂÷Ä’°’¥’°’Ω’∂’•÷Ä’® ’≥’∑’ø’•÷Ñ ’°’§’¥’´’∂’´÷Å")

    total = s["order"]["total"]

    bot.answer_callback_query(c.id)
    bot.send_message(
        c.message.chat.id,
        f"{details}\n\n’ç’ø’°’∂’§’°÷Ä’ø ’£’∏÷Ç’¥’°÷Ä’®’ù **{total}÷è**\n"
        f"‚úÖ ‘ø’°÷Ä’∏’≤ ’•÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’°’æ’•’¨’´’∂ (÷Ö÷Ä. 1300÷è): ’ø’°÷Ä’¢’•÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’Ø’§’°’º’∂’° Wallet’ù ’°’§’¥’´’∂’´ ’∞’°’Ω’ø’°’ø’∏÷Ç’¥’´÷Å ’∞’•’ø’∏÷â\n\n"
        f"‘≥÷Ä’•÷Ñ ’∏÷Ç’≤’°÷Ä’Ø’°’Æ **’£’∏÷Ç’¥’°÷Ä’®**’ù ’©’æ’•÷Ä’∏’æ (÷è):",
        parse_mode="Markdown"
    )

    # ‚¨áÔ∏è ‘±’Ö’ç’è‘µ’Ç ‘∑’ê ‘≤‘±’ë ‘π’à’Ç’Ü’é‘µ‘º
    set_state(c.message.chat.id, "WAIT_AMOUNT")

@bot.message_handler(func=lambda m: get_state(m.chat.id) == "WAIT_AMOUNT")
def pay_amount(m: types.Message):
    txt = (m.text or "").strip()
    try:
        amount = int(txt)
    except ValueError:
        return bot.reply_to(m, "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’´÷Ä ’£’∏÷Ç’¥’°÷Ä’® ’©’æ’•÷Ä’∏’æ, ÷Ö÷Ä’´’∂’°’Ø’ù 1200")

    uid = m.from_user.id
    s = CHECKOUT_STATE.get(uid)
    if not s:
        clear_state(m.chat.id)
        return bot.reply_to(m, "’ç’•’Ω’´’°’∂ ’°’æ’°÷Ä’ø’æ’°’Æ ’ß, ’Ω’Ø’Ω’´÷Ä ’∂’∏÷Ä’´÷Å÷â")

    s["order"]["payment"]["amount"] = amount
    set_state(m.chat.id, "WAIT_PROOF")

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üìé ‘ø÷Å’•’¨ ÷É’∏’≠’°’∂÷Å’¥’°’∂ —á–µ–∫-’®", callback_data="pay_attach"))
    bot.send_message(m.chat.id, "’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ ‚úÖ ‘±’µ’™’¥ ’Ø÷Å’´÷Ä ÷É’∏’≠’°’∂÷Å’¥’°’∂ —á–µ–∫-’® (’∂’Ø’°÷Ä):", reply_markup=kb)



@bot.message_handler(
    func=lambda m: get_state(m.chat.id) == "WAIT_CHECK",
    content_types=["photo", "document"]
)
def _pay_receipt(m: types.Message):
    uid = m.from_user.id
    order = CHECKOUT_STATE.get(uid, {})

    amount = order.get("amount")
    address = order.get("address")  # ’•’©’• ’∞’°’Ω÷Å’•’∂ ’∫’°’∞’∏÷Ç’¥ ’•’Ω ’∂’°’≠’∏÷Ä’§ ÷Ñ’°’µ’¨’∏÷Ç’¥

    # ’¥’°÷Ñ÷Ä’∏÷Ç’¥ ’•’∂÷Ñ state-’®
    set_state(m.chat.id, None)

    # ’ø’•’≤’•’Ø’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ÷Ö’£’ø’æ’∏’≤’´’∂
    if amount and address:
        bot.send_message(
            m.chat.id,
            f"üì© ’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂!\n"
            f"üè† ’Ä’°’Ω÷Å’•’ù {address}\n"
            f"üíµ ‘≥’∏÷Ç’¥’°÷Ä’ù {amount}÷è\n\n"
            "’ä’°’ø’æ’•÷Ä’® ÷É’∏’≠’°’∂÷Å’æ’•÷Å ’°’§’¥’´’∂’´’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂ ‚úÖ"
        )
    else:
        bot.send_message(
            m.chat.id,
            "üì© ’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂÷â ’Å’•÷Ä —á–µ–∫-’® ÷É’∏’≠’°’∂÷Å’æ’•÷Å ’°’§’¥’´’∂’´’∂ ’∞’°’Ω’ø’°’ø’¥’°’∂ ‚úÖ"
        )

    # ‘±‘¥’Ñ‘ª’Ü‘ª’Ü’ù ÷Ü’∏÷Ä’æ’°÷Ä’§
    ADMIN_ID = 6822052289  # ‚Üê ÷É’∏’≠’´÷Ä ÷Ñ’∏ admin ID-’∏’æ, ’•’©’• ’∫’•’ø÷Ñ ’ß
    try:
        bot.forward_message(ADMIN_ID, m.chat.id, m.message_id)
    except Exception:
        pass

@bot.message_handler(func=lambda m: CHECKOUT_STATE.get(m.from_user.id, {}).get("step") == "payamount")
def pay_amount(m: types.Message):
    uid = m.from_user.id
    s = CHECKOUT_STATE.get(uid)
    try:
        amount = int("".join(ch for ch in m.text if ch.isdigit()))
    except Exception:
        bot.send_message(m.chat.id, "’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’£’∏÷Ç’¥’°÷Ä’®’ù ÷Ö÷Ä’´’∂’°’Ø 1300")
        return
    s["order"]["payment"]["amount"] = amount
    s["step"] = "paytx"
    bot.send_message(m.chat.id, "‚úâÔ∏è ‘µ’©’• ’∏÷Ç’∂’•÷Ñ ÷É’∏’≠’°’∂÷Å’¥’°’∂ ’Ω÷Ñ÷Ä’´’∂/ID’ù ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ ’∞’´’¥’° (’Ø’°’¥ ’£÷Ä’•÷Ñ ¬´‚Äî¬ª):")

@bot.message_handler(content_types=["text","photo"])
def finalize_payment(m: types.Message):
    uid = m.from_user.id
    if CHECKOUT_STATE.get(uid, {}).get("step") != "paytx":
        return
    s = CHECKOUT_STATE[uid]
    order = s["order"]
    order_id = order["order_id"]
    amount = order["payment"]["amount"]
    total = order["total"]
    overpay = max(0, amount - total)

    proof_msg_id = None
    if m.content_type == "photo" or (m.text and m.text.strip() != "‚Äî"):
        proof_msg_id = m.message_id

    pay_id = f"PAY-{int(time.time())}-{uid}"
    PENDING_PAY[pay_id] = {
        "user_id": uid,
        "order_id": order_id,
        "method": order["payment"]["method"],
        "amount": amount,
        "proof_msg_id": proof_msg_id,
        "overpay": overpay,
    }

    order["status"] = "Awaiting Admin Confirm"
    PENDING_ORDERS[order_id] = order
    _save_order(order)

    # ‘±’§’¥’´’∂’´’∂ ’∂’°’¥’°’Ø
    items_txt = "\n".join([f"‚Ä¢ {PRODUCTS[i['code']]['title']} √ó {i['qty']}" for i in order["items"]])
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚úÖ ’Ä’°’Ω’ø’°’ø’•’¨", callback_data=f"admin:approve:{pay_id}"),
        types.InlineKeyboardButton("‚ùå ’Ñ’•÷Ä’™’•’¨", callback_data=f"admin:reject:{pay_id}"),
    )
    admin_text = (
        f"üÜï ’Ü’∏÷Ä ’∫’°’ø’æ’•÷Ä {order_id}\n"
        f"üë§ {order['fullname']} | üìû {order['phone']}\n"
        f"üìç {order['country']}, {order['city']} | {order['address']}\n"
        f"üõí ‘±’∫÷Ä’°’∂÷Ñ’∂’•÷Ä:\n{items_txt}\n"
        f"üí∞ ‘∏’∂’§’°’¥’•’∂’®’ù {total}÷è | ’é’≥’°÷Ä’•’¨ ’ß’ù {amount}÷è\n"
        f"üíº Overpay’ù {overpay}÷è (Wallet ’∞’°’Ω’ø’°’ø’∏÷Ç’¥’´÷Å ’∞’•’ø’∏)\n"
        f"üí≥ ’Ñ’•’©’∏’§’ù {order['payment']['method']}\n"
        f"üìù ’Ñ’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’ù {order['comment'] or '‚Äî'}\n"
        f"üë§ User: @{order['username'] or '‚Äî'} (id {uid})\n"
        f"pay_id: {pay_id}"
    )
    try:
        bot.send_message(ADMIN_ID, admin_text, reply_markup=kb)
        if proof_msg_id and m.content_type == "photo":
            bot.forward_message(ADMIN_ID, m.chat.id, proof_msg_id)
    except Exception:
        pass

    bot.send_message(m.chat.id, f"‚úÖ ’é’≥’°÷Ä’∏÷Ç’¥’® ’£÷Ä’°’∂÷Å’æ’•÷Å÷â ’ï÷Ä’§’•÷Ä’ù {order_id}\n’ç’∫’°’Ω’•÷Ñ ’°’§’¥’´’∂’´ ’∞’°’Ω’ø’°’ø’¥’°’∂’®÷â")
    CHECKOUT_STATE.pop(uid, None)  # state close, cart ’Ø’¥’°÷Ñ÷Ä’æ’´ approve-’´ ’∫’°’∞’´’∂

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("admin:"))
def admin_actions(c: types.CallbackQuery):
    if c.from_user.id != ADMIN_ID:
        bot.answer_callback_query(c.id, "’à’π ’°’§’¥’´’∂")
        return
    _, action, pay_id = c.data.split(":")
    pay = PENDING_PAY.get(pay_id)
    if not pay:
        bot.answer_callback_query(c.id, "’â’Ø’° ’°’µ’Ω payment")
        return
    uid = pay["user_id"]
    order = PENDING_ORDERS.get(pay["order_id"])

    if action == "approve":
        if order:
            _apply_stock(order)
            if pay["overpay"] > 0:
                WALLET[uid] += pay["overpay"]
            order["status"] = "Confirmed/Paid"
            _save_order(order)
        CART[uid].clear()
        PENDING_PAY.pop(pay_id, None)
        bot.answer_callback_query(c.id, "’Ä’°’Ω’ø’°’ø’æ’•÷Å ‚úÖ")
        bot.send_message(uid, f"‚úÖ ’Å’•÷Ä ’∫’°’ø’æ’•÷Ä’® ’∞’°’Ω’ø’°’ø’æ’•÷Å÷â {order['order_id']}\n’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ ’£’∂’∏÷Ç’¥’´ ’∞’°’¥’°÷Ä!")
        bot.send_message(uid, f"üíº Wallet ’¥’∂’°÷Å’∏÷Ä’§’ù {WALLET[uid]}÷è")

    elif action == "reject":
        if order:
            order["status"] = "Rejected"
            _save_order(order)
        PENDING_PAY.pop(pay_id, None)
        bot.answer_callback_query(c.id, "’Ñ’•÷Ä’™’æ’•÷Å ‚ùå")
        bot.send_message(uid, "‚ùå ’é’≥’°÷Ä’∏÷Ç’¥’®/’∫’°’ø’æ’•÷Ä’® ’¥’•÷Ä’™’æ’•’¨ ’ß÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’Ø’°’∫ ’∞’°’Ω’ø’°’ø’•’¨ ’°’ª’°’Ø÷Å’¥’°’∂ ’∞’•’ø÷â")

# ‘ª’¥ ’ß’ª’® (Wallet balance)
@bot.message_handler(func=lambda m: m.text in ("üßç ‘ª’¥ ’ß’ª’®", "üßç ‘ª’¥ ’ß’ª’® üë§"))
def my_page(m: types.Message):
    uid = m.from_user.id
    bal = WALLET[uid]
    bot.send_message(m.chat.id, f"üë§ ‘ª’¥ ’ß’ª’®\nüíº Wallet ’¥’∂’°÷Å’∏÷Ä’§’ù **{bal}÷è**")
# ========== END SALES ==========

# ------------------- RUN -------------------
if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling(skip_pending=True, timeout=30, long_polling_timeout=30)




